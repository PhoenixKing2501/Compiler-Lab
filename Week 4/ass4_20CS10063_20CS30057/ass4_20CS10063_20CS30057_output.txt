

Line 6: function_specifier => inline
Line 6: type_specifier => void
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: declaration_specifiers_opt => declaration_specifiers
Line 6: declaration_specifiers => function_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `function1`
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: type_qualifier => restrict
Line 6: type_qualifier_list => type_qualifier
Line 6: type_qualifier_list_opt => type_qualifier_list
Line 6: pointer => * type_qualifier_list_opt
Line 6: pointer_opt => pointer
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `p1`
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_declaration
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `c`
Line 6: type_qualifier_list_opt => epsilon
Line 6: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `9`
Line 6: postfix_expression => primary_expression
Line 6: unary_expression => postfix_expression
Line 6: cast_expression => unary_expression
Line 6: multiplicative_expression => cast_expression
Line 6: additive_expression => multiplicative_expression
Line 6: shift_expression => additive_expression
Line 6: relational_expression => shift_expression
Line 6: equality_expression => relational_expression
Line 6: AND_expression => equality_expression
Line 6: exclusive_OR_expression => AND_expression
Line 6: inclusive_OR_expression => exclusive_OR_expression
Line 6: logical_AND_expression => inclusive_OR_expression
Line 6: logical_OR_expression => logical_AND_expression
Line 6: conditional_expression => logical_OR_expression
Line 6: assignment_expression => conditional_expression
Line 6: direct_declarator => direct_declarator [ static type_qualifier_list_opt assignment_expression ]
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: type_qualifier => volatile
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: declaration_specifiers_opt => declaration_specifiers
Line 6: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `p3`
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `e`
Line 6: type_qualifier => const
Line 6: type_qualifier_list => type_qualifier
Line 6: type_qualifier_list_opt => type_qualifier_list
Line 6: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 6: postfix_expression => primary_expression
Line 6: unary_expression => postfix_expression
Line 6: cast_expression => unary_expression
Line 6: multiplicative_expression => cast_expression
Line 6: additive_expression => multiplicative_expression
Line 6: shift_expression => additive_expression
Line 6: relational_expression => shift_expression
Line 6: equality_expression => relational_expression
Line 6: AND_expression => equality_expression
Line 6: exclusive_OR_expression => AND_expression
Line 6: inclusive_OR_expression => exclusive_OR_expression
Line 6: logical_AND_expression => inclusive_OR_expression
Line 6: logical_OR_expression => logical_AND_expression
Line 6: conditional_expression => logical_OR_expression
Line 6: assignment_expression => conditional_expression
Line 6: assignment_expression_opt => assignment_expression
Line 6: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: parameter_type_list => parameter_list
Line 6: direct_declarator => direct_declarator ( parameter_type_list )

Line 7: declarator => pointer_opt direct_declarator
Line 7: declaration_list_opt => epsilon

Line 8: storage_class_specifier => auto
Line 8: type_specifier => int
Line 8: declaration_specifiers_opt => epsilon 
Line 8: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 8: declaration_specifiers_opt => declaration_specifiers
Line 8: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 8: pointer_opt => epsilon
Line 8: direct_declarator => IDENTIFIER
				IDENTIFIER = `a`
Line 8: declarator => pointer_opt direct_declarator
Line 8: init_declarator => declarator
Line 8: init_declarator_list => init_declarator
Line 8: init_declarator_list_opt => init_declarator_list
Line 8: declaration => declaration_specifiers init_declarator_list_opt ;
Line 8: block_item => declaration
Line 8: block_item_list => block_item

Line 9: storage_class_specifier => register
Line 9: type_specifier => int
Line 9: declaration_specifiers_opt => epsilon 
Line 9: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 9: declaration_specifiers_opt => declaration_specifiers
Line 9: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 9: pointer_opt => epsilon
Line 9: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 9: declarator => pointer_opt direct_declarator
Line 9: init_declarator => declarator
Line 9: init_declarator_list => init_declarator
Line 9: init_declarator_list_opt => init_declarator_list
Line 9: declaration => declaration_specifiers init_declarator_list_opt ;
Line 9: block_item => declaration
Line 9: block_item_list => block_item_list block_item

Line 10: storage_class_specifier => extern
Line 10: type_specifier => int
Line 10: declaration_specifiers_opt => epsilon 
Line 10: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 10: declaration_specifiers_opt => declaration_specifiers
Line 10: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 10: pointer_opt => epsilon
Line 10: direct_declarator => IDENTIFIER
				IDENTIFIER = `c`
Line 10: declarator => pointer_opt direct_declarator
Line 10: init_declarator => declarator
Line 10: init_declarator_list => init_declarator
Line 10: init_declarator_list_opt => init_declarator_list
Line 10: declaration => declaration_specifiers init_declarator_list_opt ;
Line 10: block_item => declaration
Line 10: block_item_list => block_item_list block_item

Line 11: storage_class_specifier => static
Line 11: type_specifier => int
Line 11: declaration_specifiers_opt => epsilon 
Line 11: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 11: declaration_specifiers_opt => declaration_specifiers
Line 11: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 11: pointer_opt => epsilon
Line 11: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 11: declarator => pointer_opt direct_declarator
Line 11: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 11: postfix_expression => primary_expression
Line 11: unary_expression => postfix_expression
Line 11: cast_expression => unary_expression
Line 11: multiplicative_expression => cast_expression
Line 11: additive_expression => multiplicative_expression
Line 11: shift_expression => additive_expression
Line 11: relational_expression => shift_expression
Line 11: equality_expression => relational_expression
Line 11: AND_expression => equality_expression
Line 11: exclusive_OR_expression => AND_expression
Line 11: inclusive_OR_expression => exclusive_OR_expression
Line 11: logical_AND_expression => inclusive_OR_expression
Line 11: logical_OR_expression => logical_AND_expression
Line 11: conditional_expression => logical_OR_expression
Line 11: assignment_expression => conditional_expression
Line 11: initializer => assignment_expression
Line 11: init_declarator => declarator = initializer
Line 11: init_declarator_list => init_declarator
Line 11: init_declarator_list_opt => init_declarator_list
Line 11: declaration => declaration_specifiers init_declarator_list_opt ;
Line 11: block_item => declaration
Line 11: block_item_list => block_item_list block_item

Line 12: block_item_list_opt => block_item_list
Line 12: compound_statement => { block_item_list_opt }
Line 12: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 12: external_declaration => function_definition
Line 12: translation_unit => external_declaration


Line 14: type_qualifier => const
Line 14: type_specifier => char
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: declaration_specifiers_opt => declaration_specifiers
Line 14: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 14: type_qualifier_list_opt => epsilon
Line 14: pointer => * type_qualifier_list_opt
Line 14: pointer_opt => pointer
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `hello2`
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 14: type_qualifier => const
Line 14: type_qualifier_list => type_qualifier
Line 14: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `8`
Line 14: postfix_expression => primary_expression
Line 14: unary_expression => postfix_expression
Line 14: cast_expression => unary_expression
Line 14: multiplicative_expression => cast_expression
Line 14: additive_expression => multiplicative_expression
Line 14: shift_expression => additive_expression
Line 14: relational_expression => shift_expression
Line 14: equality_expression => relational_expression
Line 14: AND_expression => equality_expression
Line 14: exclusive_OR_expression => AND_expression
Line 14: inclusive_OR_expression => exclusive_OR_expression
Line 14: logical_AND_expression => inclusive_OR_expression
Line 14: logical_OR_expression => logical_AND_expression
Line 14: conditional_expression => logical_OR_expression
Line 14: assignment_expression => conditional_expression
Line 14: direct_declarator => direct_declarator [ type_qualifier_list static assignment_expression ]
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_declaration
Line 14: type_qualifier => const
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: declaration_specifiers_opt => declaration_specifiers
Line 14: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `p2`
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_list , parameter_declaration
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 14: type_qualifier_list_opt => epsilon
Line 14: assignment_expression_opt => epsilon
Line 14: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_list , parameter_declaration
Line 14: parameter_type_list => parameter_list , ...
Line 14: direct_declarator => direct_declarator ( parameter_type_list )
Line 14: declarator => pointer_opt direct_declarator
Line 14: init_declarator => declarator
Line 14: init_declarator_list => init_declarator
Line 14: init_declarator_list_opt => init_declarator_list
Line 14: declaration => declaration_specifiers init_declarator_list_opt ;
Line 14: external_declaration => declaration
Line 14: translation_unit => translation_unit external_declaration


Line 16: function_specifier => inline
Line 16: type_qualifier => const
Line 16: type_specifier => long
Line 16: type_specifier => unsigned
Line 16: type_specifier => int
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => function_specifier declaration_specifiers_opt
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier_list_opt => epsilon
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `bye_bye`
Line 16: type_qualifier => const
Line 16: type_specifier => char
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 16: type_qualifier => restrict
Line 16: type_qualifier_list => type_qualifier
Line 16: type_qualifier_list_opt => type_qualifier_list
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `rec`
Line 16: declarator => pointer_opt direct_declarator
Line 16: parameter_declaration => declaration_specifiers declarator
Line 16: parameter_list => parameter_declaration
Line 16: type_specifier => char
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier => restrict
Line 16: type_qualifier_list => type_qualifier
Line 16: type_qualifier_list_opt => type_qualifier_list
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `send`
Line 16: declarator => pointer_opt direct_declarator
Line 16: parameter_declaration => declaration_specifiers declarator
Line 16: parameter_list => parameter_list , parameter_declaration
Line 16: parameter_type_list => parameter_list
Line 16: direct_declarator => direct_declarator ( parameter_type_list )
Line 16: declarator => pointer_opt direct_declarator
Line 16: init_declarator => declarator
Line 16: init_declarator_list => init_declarator
Line 16: init_declarator_list_opt => init_declarator_list
Line 16: declaration => declaration_specifiers init_declarator_list_opt ;
Line 16: external_declaration => declaration
Line 16: translation_unit => translation_unit external_declaration


Line 18: enum_specifier => enum IDENTIFIER
				IDENTIFIER = `e1`
Line 18: type_specifier => enum_specifier
Line 18: declaration_specifiers_opt => epsilon 
Line 18: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 18: init_declarator_list_opt => epsilon
Line 18: declaration => declaration_specifiers init_declarator_list_opt ;
Line 18: external_declaration => declaration
Line 18: translation_unit => translation_unit external_declaration



Line 21: identifier_opt => IDENTIFIER
				IDENTIFIER = `e2`

Line 22: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION1`
Line 22: enumerator_list => enumerator


Line 24: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION2`
Line 24: enumerator_list => enumerator_list , enumerator
Line 24: enum_specifier => enum identifier_opt { enumerator_list }
Line 24: type_specifier => enum_specifier
Line 24: declaration_specifiers_opt => epsilon 
Line 24: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 24: init_declarator_list_opt => epsilon
Line 24: declaration => declaration_specifiers init_declarator_list_opt ;
Line 24: external_declaration => declaration
Line 24: translation_unit => translation_unit external_declaration



Line 27: identifier_opt => epsilon

Line 28: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `100`
Line 28: postfix_expression => primary_expression
Line 28: unary_expression => postfix_expression
Line 28: cast_expression => unary_expression
Line 28: multiplicative_expression => cast_expression
Line 28: additive_expression => multiplicative_expression
Line 28: shift_expression => additive_expression
Line 28: relational_expression => shift_expression
Line 28: equality_expression => relational_expression
Line 28: AND_expression => equality_expression
Line 28: exclusive_OR_expression => AND_expression
Line 28: inclusive_OR_expression => exclusive_OR_expression
Line 28: logical_AND_expression => inclusive_OR_expression
Line 28: logical_OR_expression => logical_AND_expression
Line 28: conditional_expression => logical_OR_expression
Line 28: constant_expression => conditional_expression
Line 28: enumerator => ENUMERATION_CONSTANT = constant_expression
				ENUMERATION_CONSTANT = `POSITION3`
Line 28: enumerator_list => enumerator

Line 29: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION4`
Line 29: enumerator_list => enumerator_list , enumerator

Line 30: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION5`
Line 30: enumerator_list => enumerator_list , enumerator

Line 31: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION6`
Line 31: enumerator_list => enumerator_list , enumerator

Line 32: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION7`
Line 32: enumerator_list => enumerator_list , enumerator

Line 33: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION8`
Line 33: enumerator_list => enumerator_list , enumerator

Line 34: enum_specifier => enum identifier_opt { enumerator_list , }
Line 34: type_specifier => enum_specifier
Line 34: declaration_specifiers_opt => epsilon 
Line 34: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 34: pointer_opt => epsilon
Line 34: direct_declarator => IDENTIFIER
				IDENTIFIER = `e3`
Line 34: declarator => pointer_opt direct_declarator
Line 34: init_declarator => declarator
Line 34: init_declarator_list => init_declarator
Line 34: init_declarator_list_opt => init_declarator_list
Line 34: declaration => declaration_specifiers init_declarator_list_opt ;
Line 34: external_declaration => declaration
Line 34: translation_unit => translation_unit external_declaration


Line 36: type_specifier => void
Line 36: declaration_specifiers_opt => epsilon 
Line 36: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 36: pointer_opt => epsilon
Line 36: direct_declarator => IDENTIFIER
				IDENTIFIER = `reverse`
Line 36: type_specifier => char
Line 36: declaration_specifiers_opt => epsilon 
Line 36: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 36: pointer_opt => epsilon
Line 36: direct_declarator => IDENTIFIER
				IDENTIFIER = `str`
Line 36: type_qualifier_list_opt => epsilon
Line 36: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 36: postfix_expression => primary_expression
Line 36: unary_expression => postfix_expression
Line 36: cast_expression => unary_expression
Line 36: multiplicative_expression => cast_expression
Line 36: additive_expression => multiplicative_expression
Line 36: shift_expression => additive_expression
Line 36: relational_expression => shift_expression
Line 36: equality_expression => relational_expression
Line 36: AND_expression => equality_expression
Line 36: exclusive_OR_expression => AND_expression
Line 36: inclusive_OR_expression => exclusive_OR_expression
Line 36: logical_AND_expression => inclusive_OR_expression
Line 36: logical_OR_expression => logical_AND_expression
Line 36: conditional_expression => logical_OR_expression
Line 36: assignment_expression => conditional_expression
Line 36: assignment_expression_opt => assignment_expression
Line 36: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 36: declarator => pointer_opt direct_declarator
Line 36: parameter_declaration => declaration_specifiers declarator
Line 36: parameter_list => parameter_declaration
Line 36: type_specifier => int
Line 36: declaration_specifiers_opt => epsilon 
Line 36: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 36: pointer_opt => epsilon
Line 36: direct_declarator => IDENTIFIER
				IDENTIFIER = `len`
Line 36: declarator => pointer_opt direct_declarator
Line 36: parameter_declaration => declaration_specifiers declarator
Line 36: parameter_list => parameter_list , parameter_declaration
Line 36: type_specifier => char
Line 36: declaration_specifiers_opt => epsilon 
Line 36: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 36: pointer_opt => epsilon
Line 36: direct_declarator => IDENTIFIER
				IDENTIFIER = `dest`
Line 36: type_qualifier_list_opt => epsilon
Line 36: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 36: postfix_expression => primary_expression
Line 36: unary_expression => postfix_expression
Line 36: cast_expression => unary_expression
Line 36: multiplicative_expression => cast_expression
Line 36: additive_expression => multiplicative_expression
Line 36: shift_expression => additive_expression
Line 36: relational_expression => shift_expression
Line 36: equality_expression => relational_expression
Line 36: AND_expression => equality_expression
Line 36: exclusive_OR_expression => AND_expression
Line 36: inclusive_OR_expression => exclusive_OR_expression
Line 36: logical_AND_expression => inclusive_OR_expression
Line 36: logical_OR_expression => logical_AND_expression
Line 36: conditional_expression => logical_OR_expression
Line 36: assignment_expression => conditional_expression
Line 36: assignment_expression_opt => assignment_expression
Line 36: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 36: declarator => pointer_opt direct_declarator
Line 36: parameter_declaration => declaration_specifiers declarator
Line 36: parameter_list => parameter_list , parameter_declaration
Line 36: parameter_type_list => parameter_list
Line 36: direct_declarator => direct_declarator ( parameter_type_list )
Line 36: declarator => pointer_opt direct_declarator
Line 36: init_declarator => declarator
Line 36: init_declarator_list => init_declarator
Line 36: init_declarator_list_opt => init_declarator_list
Line 36: declaration => declaration_specifiers init_declarator_list_opt ;
Line 36: external_declaration => declaration
Line 36: translation_unit => translation_unit external_declaration


Line 38: type_specifier => void
Line 38: declaration_specifiers_opt => epsilon 
Line 38: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 38: pointer_opt => epsilon
Line 38: direct_declarator => IDENTIFIER
				IDENTIFIER = `sort`
Line 38: type_specifier => char
Line 38: declaration_specifiers_opt => epsilon 
Line 38: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 38: pointer_opt => epsilon
Line 38: direct_declarator => IDENTIFIER
				IDENTIFIER = `str`
Line 38: type_qualifier_list_opt => epsilon
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: assignment_expression_opt => assignment_expression
Line 38: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 38: declarator => pointer_opt direct_declarator
Line 38: parameter_declaration => declaration_specifiers declarator
Line 38: parameter_list => parameter_declaration
Line 38: type_specifier => int
Line 38: declaration_specifiers_opt => epsilon 
Line 38: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 38: pointer_opt => epsilon
Line 38: direct_declarator => IDENTIFIER
				IDENTIFIER = `len`
Line 38: declarator => pointer_opt direct_declarator
Line 38: parameter_declaration => declaration_specifiers declarator
Line 38: parameter_list => parameter_list , parameter_declaration
Line 38: type_specifier => char
Line 38: declaration_specifiers_opt => epsilon 
Line 38: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 38: pointer_opt => epsilon
Line 38: direct_declarator => IDENTIFIER
				IDENTIFIER = `dest`
Line 38: type_qualifier_list_opt => epsilon
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: assignment_expression_opt => assignment_expression
Line 38: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 38: declarator => pointer_opt direct_declarator
Line 38: parameter_declaration => declaration_specifiers declarator
Line 38: parameter_list => parameter_list , parameter_declaration
Line 38: parameter_type_list => parameter_list
Line 38: direct_declarator => direct_declarator ( parameter_type_list )

Line 39: declarator => pointer_opt direct_declarator
Line 39: declaration_list_opt => epsilon

Line 40: type_specifier => int
Line 40: declaration_specifiers_opt => epsilon 
Line 40: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 40: pointer_opt => epsilon
Line 40: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 40: declarator => pointer_opt direct_declarator
Line 40: init_declarator => declarator
Line 40: init_declarator_list => init_declarator
Line 40: pointer_opt => epsilon
Line 40: direct_declarator => IDENTIFIER
				IDENTIFIER = `j`
Line 40: declarator => pointer_opt direct_declarator
Line 40: init_declarator => declarator
Line 40: init_declarator_list => init_declarator_list , init_declarator
Line 40: init_declarator_list_opt => init_declarator_list
Line 40: declaration => declaration_specifiers init_declarator_list_opt ;
Line 40: block_item => declaration
Line 40: block_item_list => block_item

Line 41: type_specifier => char
Line 41: declaration_specifiers_opt => epsilon 
Line 41: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 41: pointer_opt => epsilon
Line 41: direct_declarator => IDENTIFIER
				IDENTIFIER = `temp`
Line 41: declarator => pointer_opt direct_declarator
Line 41: init_declarator => declarator
Line 41: init_declarator_list => init_declarator
Line 41: init_declarator_list_opt => init_declarator_list
Line 41: declaration => declaration_specifiers init_declarator_list_opt ;
Line 41: block_item => declaration
Line 41: block_item_list => block_item_list block_item

Line 42: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: assignment_operator => =
Line 42: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: multiplicative_expression => cast_expression
Line 42: additive_expression => multiplicative_expression
Line 42: shift_expression => additive_expression
Line 42: relational_expression => shift_expression
Line 42: equality_expression => relational_expression
Line 42: AND_expression => equality_expression
Line 42: exclusive_OR_expression => AND_expression
Line 42: inclusive_OR_expression => exclusive_OR_expression
Line 42: logical_AND_expression => inclusive_OR_expression
Line 42: logical_OR_expression => logical_AND_expression
Line 42: conditional_expression => logical_OR_expression
Line 42: assignment_expression => conditional_expression
Line 42: assignment_expression => unary_expression assignment_operator assignment_expression
Line 42: expression => assignment_expression
Line 42: expression_opt => expression
Line 42: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: multiplicative_expression => cast_expression
Line 42: additive_expression => multiplicative_expression
Line 42: shift_expression => additive_expression
Line 42: relational_expression => shift_expression
Line 42: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: multiplicative_expression => cast_expression
Line 42: additive_expression => multiplicative_expression
Line 42: shift_expression => additive_expression
Line 42: relational_expression => relational_expression < shift_expression
Line 42: equality_expression => relational_expression
Line 42: AND_expression => equality_expression
Line 42: exclusive_OR_expression => AND_expression
Line 42: inclusive_OR_expression => exclusive_OR_expression
Line 42: logical_AND_expression => inclusive_OR_expression
Line 42: logical_OR_expression => logical_AND_expression
Line 42: conditional_expression => logical_OR_expression
Line 42: assignment_expression => conditional_expression
Line 42: expression => assignment_expression
Line 42: expression_opt => expression
Line 42: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 42: postfix_expression => primary_expression
Line 42: postfix_expression => postfix_expression ++
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: multiplicative_expression => cast_expression
Line 42: additive_expression => multiplicative_expression
Line 42: shift_expression => additive_expression
Line 42: relational_expression => shift_expression
Line 42: equality_expression => relational_expression
Line 42: AND_expression => equality_expression
Line 42: exclusive_OR_expression => AND_expression
Line 42: inclusive_OR_expression => exclusive_OR_expression
Line 42: logical_AND_expression => inclusive_OR_expression
Line 42: logical_OR_expression => logical_AND_expression
Line 42: conditional_expression => logical_OR_expression
Line 42: assignment_expression => conditional_expression
Line 42: expression => assignment_expression
Line 42: expression_opt => expression


Line 44: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 44: postfix_expression => primary_expression
Line 44: unary_expression => postfix_expression
Line 44: assignment_operator => =
Line 44: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 44: postfix_expression => primary_expression
Line 44: unary_expression => postfix_expression
Line 44: cast_expression => unary_expression
Line 44: multiplicative_expression => cast_expression
Line 44: additive_expression => multiplicative_expression
Line 44: shift_expression => additive_expression
Line 44: relational_expression => shift_expression
Line 44: equality_expression => relational_expression
Line 44: AND_expression => equality_expression
Line 44: exclusive_OR_expression => AND_expression
Line 44: inclusive_OR_expression => exclusive_OR_expression
Line 44: logical_AND_expression => inclusive_OR_expression
Line 44: logical_OR_expression => logical_AND_expression
Line 44: conditional_expression => logical_OR_expression
Line 44: assignment_expression => conditional_expression
Line 44: assignment_expression => unary_expression assignment_operator assignment_expression
Line 44: expression => assignment_expression
Line 44: expression_opt => expression
Line 44: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 44: postfix_expression => primary_expression
Line 44: unary_expression => postfix_expression
Line 44: cast_expression => unary_expression
Line 44: multiplicative_expression => cast_expression
Line 44: additive_expression => multiplicative_expression
Line 44: shift_expression => additive_expression
Line 44: relational_expression => shift_expression
Line 44: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 44: postfix_expression => primary_expression
Line 44: unary_expression => postfix_expression
Line 44: cast_expression => unary_expression
Line 44: multiplicative_expression => cast_expression
Line 44: additive_expression => multiplicative_expression
Line 44: shift_expression => additive_expression
Line 44: relational_expression => relational_expression < shift_expression
Line 44: equality_expression => relational_expression
Line 44: AND_expression => equality_expression
Line 44: exclusive_OR_expression => AND_expression
Line 44: inclusive_OR_expression => exclusive_OR_expression
Line 44: logical_AND_expression => inclusive_OR_expression
Line 44: logical_OR_expression => logical_AND_expression
Line 44: conditional_expression => logical_OR_expression
Line 44: assignment_expression => conditional_expression
Line 44: expression => assignment_expression
Line 44: expression_opt => expression
Line 44: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 44: postfix_expression => primary_expression
Line 44: postfix_expression => postfix_expression ++
Line 44: unary_expression => postfix_expression
Line 44: cast_expression => unary_expression
Line 44: multiplicative_expression => cast_expression
Line 44: additive_expression => multiplicative_expression
Line 44: shift_expression => additive_expression
Line 44: relational_expression => shift_expression
Line 44: equality_expression => relational_expression
Line 44: AND_expression => equality_expression
Line 44: exclusive_OR_expression => AND_expression
Line 44: inclusive_OR_expression => exclusive_OR_expression
Line 44: logical_AND_expression => inclusive_OR_expression
Line 44: logical_OR_expression => logical_AND_expression
Line 44: conditional_expression => logical_OR_expression
Line 44: assignment_expression => conditional_expression
Line 44: expression => assignment_expression
Line 44: expression_opt => expression


Line 46: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 46: postfix_expression => primary_expression
Line 46: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 46: postfix_expression => primary_expression
Line 46: unary_expression => postfix_expression
Line 46: cast_expression => unary_expression
Line 46: multiplicative_expression => cast_expression
Line 46: additive_expression => multiplicative_expression
Line 46: shift_expression => additive_expression
Line 46: relational_expression => shift_expression
Line 46: equality_expression => relational_expression
Line 46: AND_expression => equality_expression
Line 46: exclusive_OR_expression => AND_expression
Line 46: inclusive_OR_expression => exclusive_OR_expression
Line 46: logical_AND_expression => inclusive_OR_expression
Line 46: logical_OR_expression => logical_AND_expression
Line 46: conditional_expression => logical_OR_expression
Line 46: assignment_expression => conditional_expression
Line 46: expression => assignment_expression
Line 46: postfix_expression => postfix_expression [ expression ]
Line 46: unary_expression => postfix_expression
Line 46: cast_expression => unary_expression
Line 46: multiplicative_expression => cast_expression
Line 46: additive_expression => multiplicative_expression
Line 46: shift_expression => additive_expression
Line 46: relational_expression => shift_expression
Line 46: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 46: postfix_expression => primary_expression
Line 46: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 46: postfix_expression => primary_expression
Line 46: unary_expression => postfix_expression
Line 46: cast_expression => unary_expression
Line 46: multiplicative_expression => cast_expression
Line 46: additive_expression => multiplicative_expression
Line 46: shift_expression => additive_expression
Line 46: relational_expression => shift_expression
Line 46: equality_expression => relational_expression
Line 46: AND_expression => equality_expression
Line 46: exclusive_OR_expression => AND_expression
Line 46: inclusive_OR_expression => exclusive_OR_expression
Line 46: logical_AND_expression => inclusive_OR_expression
Line 46: logical_OR_expression => logical_AND_expression
Line 46: conditional_expression => logical_OR_expression
Line 46: assignment_expression => conditional_expression
Line 46: expression => assignment_expression
Line 46: postfix_expression => postfix_expression [ expression ]
Line 46: unary_expression => postfix_expression
Line 46: cast_expression => unary_expression
Line 46: multiplicative_expression => cast_expression
Line 46: additive_expression => multiplicative_expression
Line 46: shift_expression => additive_expression
Line 46: relational_expression => relational_expression < shift_expression
Line 46: equality_expression => relational_expression
Line 46: AND_expression => equality_expression
Line 46: exclusive_OR_expression => AND_expression
Line 46: inclusive_OR_expression => exclusive_OR_expression
Line 46: logical_AND_expression => inclusive_OR_expression
Line 46: logical_OR_expression => logical_AND_expression
Line 46: conditional_expression => logical_OR_expression
Line 46: assignment_expression => conditional_expression
Line 46: expression => assignment_expression


Line 48: primary_expression => IDENTIFIER
				IDENTIFIER = `temp`
Line 48: postfix_expression => primary_expression
Line 48: unary_expression => postfix_expression
Line 48: assignment_operator => =
Line 48: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 48: postfix_expression => primary_expression
Line 48: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 48: postfix_expression => primary_expression
Line 48: unary_expression => postfix_expression
Line 48: cast_expression => unary_expression
Line 48: multiplicative_expression => cast_expression
Line 48: additive_expression => multiplicative_expression
Line 48: shift_expression => additive_expression
Line 48: relational_expression => shift_expression
Line 48: equality_expression => relational_expression
Line 48: AND_expression => equality_expression
Line 48: exclusive_OR_expression => AND_expression
Line 48: inclusive_OR_expression => exclusive_OR_expression
Line 48: logical_AND_expression => inclusive_OR_expression
Line 48: logical_OR_expression => logical_AND_expression
Line 48: conditional_expression => logical_OR_expression
Line 48: assignment_expression => conditional_expression
Line 48: expression => assignment_expression
Line 48: postfix_expression => postfix_expression [ expression ]
Line 48: unary_expression => postfix_expression
Line 48: cast_expression => unary_expression
Line 48: multiplicative_expression => cast_expression
Line 48: additive_expression => multiplicative_expression
Line 48: shift_expression => additive_expression
Line 48: relational_expression => shift_expression
Line 48: equality_expression => relational_expression
Line 48: AND_expression => equality_expression
Line 48: exclusive_OR_expression => AND_expression
Line 48: inclusive_OR_expression => exclusive_OR_expression
Line 48: logical_AND_expression => inclusive_OR_expression
Line 48: logical_OR_expression => logical_AND_expression
Line 48: conditional_expression => logical_OR_expression
Line 48: assignment_expression => conditional_expression
Line 48: assignment_expression => unary_expression assignment_operator assignment_expression
Line 48: expression => assignment_expression
Line 48: expression_opt => expression
Line 48: expression_statement => expression_opt ;
Line 48: statement => expression_statement
Line 48: block_item => statement
Line 48: block_item_list => block_item

Line 49: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 49: postfix_expression => primary_expression
Line 49: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 49: postfix_expression => primary_expression
Line 49: unary_expression => postfix_expression
Line 49: cast_expression => unary_expression
Line 49: multiplicative_expression => cast_expression
Line 49: additive_expression => multiplicative_expression
Line 49: shift_expression => additive_expression
Line 49: relational_expression => shift_expression
Line 49: equality_expression => relational_expression
Line 49: AND_expression => equality_expression
Line 49: exclusive_OR_expression => AND_expression
Line 49: inclusive_OR_expression => exclusive_OR_expression
Line 49: logical_AND_expression => inclusive_OR_expression
Line 49: logical_OR_expression => logical_AND_expression
Line 49: conditional_expression => logical_OR_expression
Line 49: assignment_expression => conditional_expression
Line 49: expression => assignment_expression
Line 49: postfix_expression => postfix_expression [ expression ]
Line 49: unary_expression => postfix_expression
Line 49: assignment_operator => =
Line 49: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 49: postfix_expression => primary_expression
Line 49: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 49: postfix_expression => primary_expression
Line 49: unary_expression => postfix_expression
Line 49: cast_expression => unary_expression
Line 49: multiplicative_expression => cast_expression
Line 49: additive_expression => multiplicative_expression
Line 49: shift_expression => additive_expression
Line 49: relational_expression => shift_expression
Line 49: equality_expression => relational_expression
Line 49: AND_expression => equality_expression
Line 49: exclusive_OR_expression => AND_expression
Line 49: inclusive_OR_expression => exclusive_OR_expression
Line 49: logical_AND_expression => inclusive_OR_expression
Line 49: logical_OR_expression => logical_AND_expression
Line 49: conditional_expression => logical_OR_expression
Line 49: assignment_expression => conditional_expression
Line 49: expression => assignment_expression
Line 49: postfix_expression => postfix_expression [ expression ]
Line 49: unary_expression => postfix_expression
Line 49: cast_expression => unary_expression
Line 49: multiplicative_expression => cast_expression
Line 49: additive_expression => multiplicative_expression
Line 49: shift_expression => additive_expression
Line 49: relational_expression => shift_expression
Line 49: equality_expression => relational_expression
Line 49: AND_expression => equality_expression
Line 49: exclusive_OR_expression => AND_expression
Line 49: inclusive_OR_expression => exclusive_OR_expression
Line 49: logical_AND_expression => inclusive_OR_expression
Line 49: logical_OR_expression => logical_AND_expression
Line 49: conditional_expression => logical_OR_expression
Line 49: assignment_expression => conditional_expression
Line 49: assignment_expression => unary_expression assignment_operator assignment_expression
Line 49: expression => assignment_expression
Line 49: expression_opt => expression
Line 49: expression_statement => expression_opt ;
Line 49: statement => expression_statement
Line 49: block_item => statement
Line 49: block_item_list => block_item_list block_item

Line 50: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 50: postfix_expression => primary_expression
Line 50: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 50: postfix_expression => primary_expression
Line 50: unary_expression => postfix_expression
Line 50: cast_expression => unary_expression
Line 50: multiplicative_expression => cast_expression
Line 50: additive_expression => multiplicative_expression
Line 50: shift_expression => additive_expression
Line 50: relational_expression => shift_expression
Line 50: equality_expression => relational_expression
Line 50: AND_expression => equality_expression
Line 50: exclusive_OR_expression => AND_expression
Line 50: inclusive_OR_expression => exclusive_OR_expression
Line 50: logical_AND_expression => inclusive_OR_expression
Line 50: logical_OR_expression => logical_AND_expression
Line 50: conditional_expression => logical_OR_expression
Line 50: assignment_expression => conditional_expression
Line 50: expression => assignment_expression
Line 50: postfix_expression => postfix_expression [ expression ]
Line 50: unary_expression => postfix_expression
Line 50: assignment_operator => =
Line 50: primary_expression => IDENTIFIER
				IDENTIFIER = `temp`
Line 50: postfix_expression => primary_expression
Line 50: unary_expression => postfix_expression
Line 50: cast_expression => unary_expression
Line 50: multiplicative_expression => cast_expression
Line 50: additive_expression => multiplicative_expression
Line 50: shift_expression => additive_expression
Line 50: relational_expression => shift_expression
Line 50: equality_expression => relational_expression
Line 50: AND_expression => equality_expression
Line 50: exclusive_OR_expression => AND_expression
Line 50: inclusive_OR_expression => exclusive_OR_expression
Line 50: logical_AND_expression => inclusive_OR_expression
Line 50: logical_OR_expression => logical_AND_expression
Line 50: conditional_expression => logical_OR_expression
Line 50: assignment_expression => conditional_expression
Line 50: assignment_expression => unary_expression assignment_operator assignment_expression
Line 50: expression => assignment_expression
Line 50: expression_opt => expression
Line 50: expression_statement => expression_opt ;
Line 50: statement => expression_statement
Line 50: block_item => statement
Line 50: block_item_list => block_item_list block_item

Line 51: block_item_list_opt => block_item_list
Line 51: compound_statement => { block_item_list_opt }
Line 51: statement => compound_statement

Line 52: selection_statement => if ( expression ) statement
Line 52: statement => selection_statement
Line 52: block_item => statement
Line 52: block_item_list => block_item
Line 52: block_item_list_opt => block_item_list
Line 52: compound_statement => { block_item_list_opt }
Line 52: statement => compound_statement
Line 52: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 52: statement => iteration_statement
Line 52: block_item => statement
Line 52: block_item_list => block_item

Line 53: block_item_list_opt => block_item_list
Line 53: compound_statement => { block_item_list_opt }
Line 53: statement => compound_statement
Line 53: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 53: statement => iteration_statement
Line 53: block_item => statement
Line 53: block_item_list => block_item_list block_item


Line 55: primary_expression => IDENTIFIER
				IDENTIFIER = `reverse`
Line 55: postfix_expression => primary_expression
Line 55: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 55: postfix_expression => primary_expression
Line 55: unary_expression => postfix_expression
Line 55: cast_expression => unary_expression
Line 55: multiplicative_expression => cast_expression
Line 55: additive_expression => multiplicative_expression
Line 55: shift_expression => additive_expression
Line 55: relational_expression => shift_expression
Line 55: equality_expression => relational_expression
Line 55: AND_expression => equality_expression
Line 55: exclusive_OR_expression => AND_expression
Line 55: inclusive_OR_expression => exclusive_OR_expression
Line 55: logical_AND_expression => inclusive_OR_expression
Line 55: logical_OR_expression => logical_AND_expression
Line 55: conditional_expression => logical_OR_expression
Line 55: assignment_expression => conditional_expression
Line 55: argument_expression_list => assignment_expression
Line 55: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 55: postfix_expression => primary_expression
Line 55: unary_expression => postfix_expression
Line 55: cast_expression => unary_expression
Line 55: multiplicative_expression => cast_expression
Line 55: additive_expression => multiplicative_expression
Line 55: shift_expression => additive_expression
Line 55: relational_expression => shift_expression
Line 55: equality_expression => relational_expression
Line 55: AND_expression => equality_expression
Line 55: exclusive_OR_expression => AND_expression
Line 55: inclusive_OR_expression => exclusive_OR_expression
Line 55: logical_AND_expression => inclusive_OR_expression
Line 55: logical_OR_expression => logical_AND_expression
Line 55: conditional_expression => logical_OR_expression
Line 55: assignment_expression => conditional_expression
Line 55: argument_expression_list => argument_expression_list , assignment_expression
Line 55: primary_expression => IDENTIFIER
				IDENTIFIER = `dest`
Line 55: postfix_expression => primary_expression
Line 55: unary_expression => postfix_expression
Line 55: cast_expression => unary_expression
Line 55: multiplicative_expression => cast_expression
Line 55: additive_expression => multiplicative_expression
Line 55: shift_expression => additive_expression
Line 55: relational_expression => shift_expression
Line 55: equality_expression => relational_expression
Line 55: AND_expression => equality_expression
Line 55: exclusive_OR_expression => AND_expression
Line 55: inclusive_OR_expression => exclusive_OR_expression
Line 55: logical_AND_expression => inclusive_OR_expression
Line 55: logical_OR_expression => logical_AND_expression
Line 55: conditional_expression => logical_OR_expression
Line 55: assignment_expression => conditional_expression
Line 55: argument_expression_list => argument_expression_list , assignment_expression
Line 55: argument_expression_list_opt => argument_expression_list
Line 55: postfix_expression => postfix_expression ( argument_expression_list_opt )
Line 55: unary_expression => postfix_expression
Line 55: cast_expression => unary_expression
Line 55: multiplicative_expression => cast_expression
Line 55: additive_expression => multiplicative_expression
Line 55: shift_expression => additive_expression
Line 55: relational_expression => shift_expression
Line 55: equality_expression => relational_expression
Line 55: AND_expression => equality_expression
Line 55: exclusive_OR_expression => AND_expression
Line 55: inclusive_OR_expression => exclusive_OR_expression
Line 55: logical_AND_expression => inclusive_OR_expression
Line 55: logical_OR_expression => logical_AND_expression
Line 55: conditional_expression => logical_OR_expression
Line 55: assignment_expression => conditional_expression
Line 55: expression => assignment_expression
Line 55: expression_opt => expression
Line 55: expression_statement => expression_opt ;
Line 55: statement => expression_statement
Line 55: block_item => statement
Line 55: block_item_list => block_item_list block_item

Line 56: block_item_list_opt => block_item_list
Line 56: compound_statement => { block_item_list_opt }
Line 56: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 56: external_declaration => function_definition
Line 56: translation_unit => translation_unit external_declaration

Line 57: type_specifier => void
Line 57: declaration_specifiers_opt => epsilon 
Line 57: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 57: pointer_opt => epsilon
Line 57: direct_declarator => IDENTIFIER
				IDENTIFIER = `reverse`
Line 57: type_specifier => char
Line 57: declaration_specifiers_opt => epsilon 
Line 57: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 57: pointer_opt => epsilon
Line 57: direct_declarator => IDENTIFIER
				IDENTIFIER = `str`
Line 57: type_qualifier_list_opt => epsilon
Line 57: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 57: postfix_expression => primary_expression
Line 57: unary_expression => postfix_expression
Line 57: cast_expression => unary_expression
Line 57: multiplicative_expression => cast_expression
Line 57: additive_expression => multiplicative_expression
Line 57: shift_expression => additive_expression
Line 57: relational_expression => shift_expression
Line 57: equality_expression => relational_expression
Line 57: AND_expression => equality_expression
Line 57: exclusive_OR_expression => AND_expression
Line 57: inclusive_OR_expression => exclusive_OR_expression
Line 57: logical_AND_expression => inclusive_OR_expression
Line 57: logical_OR_expression => logical_AND_expression
Line 57: conditional_expression => logical_OR_expression
Line 57: assignment_expression => conditional_expression
Line 57: assignment_expression_opt => assignment_expression
Line 57: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 57: declarator => pointer_opt direct_declarator
Line 57: parameter_declaration => declaration_specifiers declarator
Line 57: parameter_list => parameter_declaration
Line 57: type_specifier => int
Line 57: declaration_specifiers_opt => epsilon 
Line 57: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 57: pointer_opt => epsilon
Line 57: direct_declarator => IDENTIFIER
				IDENTIFIER = `len`
Line 57: declarator => pointer_opt direct_declarator
Line 57: parameter_declaration => declaration_specifiers declarator
Line 57: parameter_list => parameter_list , parameter_declaration
Line 57: type_specifier => char
Line 57: declaration_specifiers_opt => epsilon 
Line 57: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 57: pointer_opt => epsilon
Line 57: direct_declarator => IDENTIFIER
				IDENTIFIER = `dest`
Line 57: type_qualifier_list_opt => epsilon
Line 57: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `20`
Line 57: postfix_expression => primary_expression
Line 57: unary_expression => postfix_expression
Line 57: cast_expression => unary_expression
Line 57: multiplicative_expression => cast_expression
Line 57: additive_expression => multiplicative_expression
Line 57: shift_expression => additive_expression
Line 57: relational_expression => shift_expression
Line 57: equality_expression => relational_expression
Line 57: AND_expression => equality_expression
Line 57: exclusive_OR_expression => AND_expression
Line 57: inclusive_OR_expression => exclusive_OR_expression
Line 57: logical_AND_expression => inclusive_OR_expression
Line 57: logical_OR_expression => logical_AND_expression
Line 57: conditional_expression => logical_OR_expression
Line 57: assignment_expression => conditional_expression
Line 57: assignment_expression_opt => assignment_expression
Line 57: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 57: declarator => pointer_opt direct_declarator
Line 57: parameter_declaration => declaration_specifiers declarator
Line 57: parameter_list => parameter_list , parameter_declaration
Line 57: parameter_type_list => parameter_list
Line 57: direct_declarator => direct_declarator ( parameter_type_list )

Line 58: declarator => pointer_opt direct_declarator
Line 58: declaration_list_opt => epsilon

Line 59: type_specifier => int
Line 59: declaration_specifiers_opt => epsilon 
Line 59: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 59: pointer_opt => epsilon
Line 59: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 59: declarator => pointer_opt direct_declarator
Line 59: init_declarator => declarator
Line 59: init_declarator_list => init_declarator
Line 59: pointer_opt => epsilon
Line 59: direct_declarator => IDENTIFIER
				IDENTIFIER = `j`
Line 59: declarator => pointer_opt direct_declarator
Line 59: init_declarator => declarator
Line 59: init_declarator_list => init_declarator_list , init_declarator
Line 59: init_declarator_list_opt => init_declarator_list
Line 59: declaration => declaration_specifiers init_declarator_list_opt ;
Line 59: block_item => declaration
Line 59: block_item_list => block_item

Line 60: type_specifier => char
Line 60: declaration_specifiers_opt => epsilon 
Line 60: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 60: pointer_opt => epsilon
Line 60: direct_declarator => IDENTIFIER
				IDENTIFIER = `temp`
Line 60: declarator => pointer_opt direct_declarator
Line 60: init_declarator => declarator
Line 60: init_declarator_list => init_declarator
Line 60: init_declarator_list_opt => init_declarator_list
Line 60: declaration => declaration_specifiers init_declarator_list_opt ;
Line 60: block_item => declaration
Line 60: block_item_list => block_item_list block_item

Line 61: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 61: postfix_expression => primary_expression
Line 61: unary_expression => postfix_expression
Line 61: assignment_operator => =
Line 61: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 61: postfix_expression => primary_expression
Line 61: unary_expression => postfix_expression
Line 61: cast_expression => unary_expression
Line 61: multiplicative_expression => cast_expression
Line 61: additive_expression => multiplicative_expression
Line 61: shift_expression => additive_expression
Line 61: relational_expression => shift_expression
Line 61: equality_expression => relational_expression
Line 61: AND_expression => equality_expression
Line 61: exclusive_OR_expression => AND_expression
Line 61: inclusive_OR_expression => exclusive_OR_expression
Line 61: logical_AND_expression => inclusive_OR_expression
Line 61: logical_OR_expression => logical_AND_expression
Line 61: conditional_expression => logical_OR_expression
Line 61: assignment_expression => conditional_expression
Line 61: assignment_expression => unary_expression assignment_operator assignment_expression
Line 61: expression => assignment_expression
Line 61: expression_opt => expression
Line 61: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 61: postfix_expression => primary_expression
Line 61: unary_expression => postfix_expression
Line 61: cast_expression => unary_expression
Line 61: multiplicative_expression => cast_expression
Line 61: additive_expression => multiplicative_expression
Line 61: shift_expression => additive_expression
Line 61: relational_expression => shift_expression
Line 61: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 61: postfix_expression => primary_expression
Line 61: unary_expression => postfix_expression
Line 61: cast_expression => unary_expression
Line 61: multiplicative_expression => cast_expression
Line 61: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 61: postfix_expression => primary_expression
Line 61: unary_expression => postfix_expression
Line 61: cast_expression => unary_expression
Line 61: multiplicative_expression => multiplicative_expression / cast_expression
Line 61: additive_expression => multiplicative_expression
Line 61: shift_expression => additive_expression
Line 61: relational_expression => relational_expression < shift_expression
Line 61: equality_expression => relational_expression
Line 61: AND_expression => equality_expression
Line 61: exclusive_OR_expression => AND_expression
Line 61: inclusive_OR_expression => exclusive_OR_expression
Line 61: logical_AND_expression => inclusive_OR_expression
Line 61: logical_OR_expression => logical_AND_expression
Line 61: conditional_expression => logical_OR_expression
Line 61: assignment_expression => conditional_expression
Line 61: expression => assignment_expression
Line 61: expression_opt => expression
Line 61: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 61: postfix_expression => primary_expression
Line 61: postfix_expression => postfix_expression ++
Line 61: unary_expression => postfix_expression
Line 61: cast_expression => unary_expression
Line 61: multiplicative_expression => cast_expression
Line 61: additive_expression => multiplicative_expression
Line 61: shift_expression => additive_expression
Line 61: relational_expression => shift_expression
Line 61: equality_expression => relational_expression
Line 61: AND_expression => equality_expression
Line 61: exclusive_OR_expression => AND_expression
Line 61: inclusive_OR_expression => exclusive_OR_expression
Line 61: logical_AND_expression => inclusive_OR_expression
Line 61: logical_OR_expression => logical_AND_expression
Line 61: conditional_expression => logical_OR_expression
Line 61: assignment_expression => conditional_expression
Line 61: expression => assignment_expression
Line 61: expression_opt => expression


Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: assignment_operator => =
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => additive_expression - multiplicative_expression
Line 63: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => additive_expression - multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: relational_expression => shift_expression
Line 63: equality_expression => relational_expression
Line 63: AND_expression => equality_expression
Line 63: exclusive_OR_expression => AND_expression
Line 63: inclusive_OR_expression => exclusive_OR_expression
Line 63: logical_AND_expression => inclusive_OR_expression
Line 63: logical_OR_expression => logical_AND_expression
Line 63: conditional_expression => logical_OR_expression
Line 63: assignment_expression => conditional_expression
Line 63: assignment_expression => unary_expression assignment_operator assignment_expression
Line 63: expression => assignment_expression
Line 63: expression_opt => expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: relational_expression => shift_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => multiplicative_expression / cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: relational_expression => relational_expression >= shift_expression
Line 63: equality_expression => relational_expression
Line 63: AND_expression => equality_expression
Line 63: exclusive_OR_expression => AND_expression
Line 63: inclusive_OR_expression => exclusive_OR_expression
Line 63: logical_AND_expression => inclusive_OR_expression
Line 63: logical_OR_expression => logical_AND_expression
Line 63: conditional_expression => logical_OR_expression
Line 63: assignment_expression => conditional_expression
Line 63: expression => assignment_expression
Line 63: expression_opt => expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 63: postfix_expression => primary_expression
Line 63: postfix_expression => postfix_expression --
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: relational_expression => shift_expression
Line 63: equality_expression => relational_expression
Line 63: AND_expression => equality_expression
Line 63: exclusive_OR_expression => AND_expression
Line 63: inclusive_OR_expression => exclusive_OR_expression
Line 63: logical_AND_expression => inclusive_OR_expression
Line 63: logical_OR_expression => logical_AND_expression
Line 63: conditional_expression => logical_OR_expression
Line 63: assignment_expression => conditional_expression
Line 63: expression => assignment_expression
Line 63: expression_opt => expression


Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => relational_expression
Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => equality_expression == relational_expression
Line 65: AND_expression => equality_expression
Line 65: exclusive_OR_expression => AND_expression
Line 65: inclusive_OR_expression => exclusive_OR_expression
Line 65: logical_AND_expression => inclusive_OR_expression
Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => relational_expression
Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => equality_expression == relational_expression
Line 65: AND_expression => equality_expression
Line 65: exclusive_OR_expression => AND_expression
Line 65: inclusive_OR_expression => exclusive_OR_expression
Line 65: logical_AND_expression => logical_AND_expression && inclusive_OR_expression
Line 65: logical_OR_expression => logical_AND_expression
Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => relational_expression
Line 65: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 65: postfix_expression => primary_expression
Line 65: unary_expression => postfix_expression
Line 65: cast_expression => unary_expression
Line 65: multiplicative_expression => cast_expression
Line 65: additive_expression => multiplicative_expression
Line 65: shift_expression => additive_expression
Line 65: relational_expression => shift_expression
Line 65: equality_expression => equality_expression == relational_expression
Line 65: AND_expression => equality_expression
Line 65: exclusive_OR_expression => AND_expression
Line 65: inclusive_OR_expression => exclusive_OR_expression
Line 65: logical_AND_expression => inclusive_OR_expression
Line 65: logical_OR_expression => logical_OR_expression || logical_AND_expression
Line 65: conditional_expression => logical_OR_expression
Line 65: assignment_expression => conditional_expression
Line 65: expression => assignment_expression

Line 66: jump_statement => break ;
Line 66: statement => jump_statement



Line 69: primary_expression => IDENTIFIER
				IDENTIFIER = `temp`
Line 69: postfix_expression => primary_expression
Line 69: unary_expression => postfix_expression
Line 69: assignment_operator => =
Line 69: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 69: postfix_expression => primary_expression
Line 69: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 69: postfix_expression => primary_expression
Line 69: unary_expression => postfix_expression
Line 69: cast_expression => unary_expression
Line 69: multiplicative_expression => cast_expression
Line 69: additive_expression => multiplicative_expression
Line 69: shift_expression => additive_expression
Line 69: relational_expression => shift_expression
Line 69: equality_expression => relational_expression
Line 69: AND_expression => equality_expression
Line 69: exclusive_OR_expression => AND_expression
Line 69: inclusive_OR_expression => exclusive_OR_expression
Line 69: logical_AND_expression => inclusive_OR_expression
Line 69: logical_OR_expression => logical_AND_expression
Line 69: conditional_expression => logical_OR_expression
Line 69: assignment_expression => conditional_expression
Line 69: expression => assignment_expression
Line 69: postfix_expression => postfix_expression [ expression ]
Line 69: unary_expression => postfix_expression
Line 69: cast_expression => unary_expression
Line 69: multiplicative_expression => cast_expression
Line 69: additive_expression => multiplicative_expression
Line 69: shift_expression => additive_expression
Line 69: relational_expression => shift_expression
Line 69: equality_expression => relational_expression
Line 69: AND_expression => equality_expression
Line 69: exclusive_OR_expression => AND_expression
Line 69: inclusive_OR_expression => exclusive_OR_expression
Line 69: logical_AND_expression => inclusive_OR_expression
Line 69: logical_OR_expression => logical_AND_expression
Line 69: conditional_expression => logical_OR_expression
Line 69: assignment_expression => conditional_expression
Line 69: assignment_expression => unary_expression assignment_operator assignment_expression
Line 69: expression => assignment_expression
Line 69: expression_opt => expression
Line 69: expression_statement => expression_opt ;
Line 69: statement => expression_statement
Line 69: block_item => statement
Line 69: block_item_list => block_item

Line 70: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 70: postfix_expression => primary_expression
Line 70: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 70: postfix_expression => primary_expression
Line 70: unary_expression => postfix_expression
Line 70: cast_expression => unary_expression
Line 70: multiplicative_expression => cast_expression
Line 70: additive_expression => multiplicative_expression
Line 70: shift_expression => additive_expression
Line 70: relational_expression => shift_expression
Line 70: equality_expression => relational_expression
Line 70: AND_expression => equality_expression
Line 70: exclusive_OR_expression => AND_expression
Line 70: inclusive_OR_expression => exclusive_OR_expression
Line 70: logical_AND_expression => inclusive_OR_expression
Line 70: logical_OR_expression => logical_AND_expression
Line 70: conditional_expression => logical_OR_expression
Line 70: assignment_expression => conditional_expression
Line 70: expression => assignment_expression
Line 70: postfix_expression => postfix_expression [ expression ]
Line 70: unary_expression => postfix_expression
Line 70: assignment_operator => =
Line 70: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 70: postfix_expression => primary_expression
Line 70: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 70: postfix_expression => primary_expression
Line 70: unary_expression => postfix_expression
Line 70: cast_expression => unary_expression
Line 70: multiplicative_expression => cast_expression
Line 70: additive_expression => multiplicative_expression
Line 70: shift_expression => additive_expression
Line 70: relational_expression => shift_expression
Line 70: equality_expression => relational_expression
Line 70: AND_expression => equality_expression
Line 70: exclusive_OR_expression => AND_expression
Line 70: inclusive_OR_expression => exclusive_OR_expression
Line 70: logical_AND_expression => inclusive_OR_expression
Line 70: logical_OR_expression => logical_AND_expression
Line 70: conditional_expression => logical_OR_expression
Line 70: assignment_expression => conditional_expression
Line 70: expression => assignment_expression
Line 70: postfix_expression => postfix_expression [ expression ]
Line 70: unary_expression => postfix_expression
Line 70: cast_expression => unary_expression
Line 70: multiplicative_expression => cast_expression
Line 70: additive_expression => multiplicative_expression
Line 70: shift_expression => additive_expression
Line 70: relational_expression => shift_expression
Line 70: equality_expression => relational_expression
Line 70: AND_expression => equality_expression
Line 70: exclusive_OR_expression => AND_expression
Line 70: inclusive_OR_expression => exclusive_OR_expression
Line 70: logical_AND_expression => inclusive_OR_expression
Line 70: logical_OR_expression => logical_AND_expression
Line 70: conditional_expression => logical_OR_expression
Line 70: assignment_expression => conditional_expression
Line 70: assignment_expression => unary_expression assignment_operator assignment_expression
Line 70: expression => assignment_expression
Line 70: expression_opt => expression
Line 70: expression_statement => expression_opt ;
Line 70: statement => expression_statement
Line 70: block_item => statement
Line 70: block_item_list => block_item_list block_item

Line 71: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 71: postfix_expression => primary_expression
Line 71: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 71: postfix_expression => primary_expression
Line 71: unary_expression => postfix_expression
Line 71: cast_expression => unary_expression
Line 71: multiplicative_expression => cast_expression
Line 71: additive_expression => multiplicative_expression
Line 71: shift_expression => additive_expression
Line 71: relational_expression => shift_expression
Line 71: equality_expression => relational_expression
Line 71: AND_expression => equality_expression
Line 71: exclusive_OR_expression => AND_expression
Line 71: inclusive_OR_expression => exclusive_OR_expression
Line 71: logical_AND_expression => inclusive_OR_expression
Line 71: logical_OR_expression => logical_AND_expression
Line 71: conditional_expression => logical_OR_expression
Line 71: assignment_expression => conditional_expression
Line 71: expression => assignment_expression
Line 71: postfix_expression => postfix_expression [ expression ]
Line 71: unary_expression => postfix_expression
Line 71: assignment_operator => =
Line 71: primary_expression => IDENTIFIER
				IDENTIFIER = `temp`
Line 71: postfix_expression => primary_expression
Line 71: unary_expression => postfix_expression
Line 71: cast_expression => unary_expression
Line 71: multiplicative_expression => cast_expression
Line 71: additive_expression => multiplicative_expression
Line 71: shift_expression => additive_expression
Line 71: relational_expression => shift_expression
Line 71: equality_expression => relational_expression
Line 71: AND_expression => equality_expression
Line 71: exclusive_OR_expression => AND_expression
Line 71: inclusive_OR_expression => exclusive_OR_expression
Line 71: logical_AND_expression => inclusive_OR_expression
Line 71: logical_OR_expression => logical_AND_expression
Line 71: conditional_expression => logical_OR_expression
Line 71: assignment_expression => conditional_expression
Line 71: assignment_expression => unary_expression assignment_operator assignment_expression
Line 71: expression => assignment_expression
Line 71: expression_opt => expression
Line 71: expression_statement => expression_opt ;
Line 71: statement => expression_statement
Line 71: block_item => statement
Line 71: block_item_list => block_item_list block_item

Line 72: jump_statement => break ;
Line 72: statement => jump_statement
Line 72: block_item => statement
Line 72: block_item_list => block_item_list block_item

Line 73: block_item_list_opt => block_item_list
Line 73: compound_statement => { block_item_list_opt }
Line 73: statement => compound_statement
Line 73: selection_statement => if ( expression ) statement else statement
Line 73: statement => selection_statement
Line 73: block_item => statement
Line 73: block_item_list => block_item

Line 74: block_item_list_opt => block_item_list
Line 74: compound_statement => { block_item_list_opt }
Line 74: statement => compound_statement
Line 74: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 74: statement => iteration_statement
Line 74: block_item => statement
Line 74: block_item_list => block_item

Line 75: block_item_list_opt => block_item_list
Line 75: compound_statement => { block_item_list_opt }
Line 75: statement => compound_statement
Line 75: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 75: statement => iteration_statement
Line 75: block_item => statement
Line 75: block_item_list => block_item_list block_item

Line 76: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 76: postfix_expression => primary_expression
Line 76: unary_expression => postfix_expression
Line 76: assignment_operator => =
Line 76: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 76: postfix_expression => primary_expression
Line 76: unary_expression => postfix_expression
Line 76: cast_expression => unary_expression
Line 76: multiplicative_expression => cast_expression
Line 76: additive_expression => multiplicative_expression
Line 76: shift_expression => additive_expression
Line 76: relational_expression => shift_expression
Line 76: equality_expression => relational_expression
Line 76: AND_expression => equality_expression
Line 76: exclusive_OR_expression => AND_expression
Line 76: inclusive_OR_expression => exclusive_OR_expression
Line 76: logical_AND_expression => inclusive_OR_expression
Line 76: logical_OR_expression => logical_AND_expression
Line 76: conditional_expression => logical_OR_expression
Line 76: assignment_expression => conditional_expression
Line 76: assignment_expression => unary_expression assignment_operator assignment_expression
Line 76: expression => assignment_expression
Line 76: expression_opt => expression
Line 76: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 76: postfix_expression => primary_expression
Line 76: unary_expression => postfix_expression
Line 76: cast_expression => unary_expression
Line 76: multiplicative_expression => cast_expression
Line 76: additive_expression => multiplicative_expression
Line 76: shift_expression => additive_expression
Line 76: relational_expression => shift_expression
Line 76: primary_expression => IDENTIFIER
				IDENTIFIER = `len`
Line 76: postfix_expression => primary_expression
Line 76: unary_expression => postfix_expression
Line 76: cast_expression => unary_expression
Line 76: multiplicative_expression => cast_expression
Line 76: additive_expression => multiplicative_expression
Line 76: shift_expression => additive_expression
Line 76: relational_expression => relational_expression < shift_expression
Line 76: equality_expression => relational_expression
Line 76: AND_expression => equality_expression
Line 76: exclusive_OR_expression => AND_expression
Line 76: inclusive_OR_expression => exclusive_OR_expression
Line 76: logical_AND_expression => inclusive_OR_expression
Line 76: logical_OR_expression => logical_AND_expression
Line 76: conditional_expression => logical_OR_expression
Line 76: assignment_expression => conditional_expression
Line 76: expression => assignment_expression
Line 76: expression_opt => expression
Line 76: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 76: postfix_expression => primary_expression
Line 76: postfix_expression => postfix_expression ++
Line 76: unary_expression => postfix_expression
Line 76: cast_expression => unary_expression
Line 76: multiplicative_expression => cast_expression
Line 76: additive_expression => multiplicative_expression
Line 76: shift_expression => additive_expression
Line 76: relational_expression => shift_expression
Line 76: equality_expression => relational_expression
Line 76: AND_expression => equality_expression
Line 76: exclusive_OR_expression => AND_expression
Line 76: inclusive_OR_expression => exclusive_OR_expression
Line 76: logical_AND_expression => inclusive_OR_expression
Line 76: logical_OR_expression => logical_AND_expression
Line 76: conditional_expression => logical_OR_expression
Line 76: assignment_expression => conditional_expression
Line 76: expression => assignment_expression
Line 76: expression_opt => expression

Line 77: primary_expression => IDENTIFIER
				IDENTIFIER = `dest`
Line 77: postfix_expression => primary_expression
Line 77: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 77: postfix_expression => primary_expression
Line 77: unary_expression => postfix_expression
Line 77: cast_expression => unary_expression
Line 77: multiplicative_expression => cast_expression
Line 77: additive_expression => multiplicative_expression
Line 77: shift_expression => additive_expression
Line 77: relational_expression => shift_expression
Line 77: equality_expression => relational_expression
Line 77: AND_expression => equality_expression
Line 77: exclusive_OR_expression => AND_expression
Line 77: inclusive_OR_expression => exclusive_OR_expression
Line 77: logical_AND_expression => inclusive_OR_expression
Line 77: logical_OR_expression => logical_AND_expression
Line 77: conditional_expression => logical_OR_expression
Line 77: assignment_expression => conditional_expression
Line 77: expression => assignment_expression
Line 77: postfix_expression => postfix_expression [ expression ]
Line 77: unary_expression => postfix_expression
Line 77: assignment_operator => =
Line 77: primary_expression => IDENTIFIER
				IDENTIFIER = `str`
Line 77: postfix_expression => primary_expression
Line 77: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 77: postfix_expression => primary_expression
Line 77: unary_expression => postfix_expression
Line 77: cast_expression => unary_expression
Line 77: multiplicative_expression => cast_expression
Line 77: additive_expression => multiplicative_expression
Line 77: shift_expression => additive_expression
Line 77: relational_expression => shift_expression
Line 77: equality_expression => relational_expression
Line 77: AND_expression => equality_expression
Line 77: exclusive_OR_expression => AND_expression
Line 77: inclusive_OR_expression => exclusive_OR_expression
Line 77: logical_AND_expression => inclusive_OR_expression
Line 77: logical_OR_expression => logical_AND_expression
Line 77: conditional_expression => logical_OR_expression
Line 77: assignment_expression => conditional_expression
Line 77: expression => assignment_expression
Line 77: postfix_expression => postfix_expression [ expression ]
Line 77: unary_expression => postfix_expression
Line 77: cast_expression => unary_expression
Line 77: multiplicative_expression => cast_expression
Line 77: additive_expression => multiplicative_expression
Line 77: shift_expression => additive_expression
Line 77: relational_expression => shift_expression
Line 77: equality_expression => relational_expression
Line 77: AND_expression => equality_expression
Line 77: exclusive_OR_expression => AND_expression
Line 77: inclusive_OR_expression => exclusive_OR_expression
Line 77: logical_AND_expression => inclusive_OR_expression
Line 77: logical_OR_expression => logical_AND_expression
Line 77: conditional_expression => logical_OR_expression
Line 77: assignment_expression => conditional_expression
Line 77: assignment_expression => unary_expression assignment_operator assignment_expression
Line 77: expression => assignment_expression
Line 77: expression_opt => expression
Line 77: expression_statement => expression_opt ;
Line 77: statement => expression_statement
Line 77: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 77: statement => iteration_statement
Line 77: block_item => statement
Line 77: block_item_list => block_item_list block_item

Line 78: block_item_list_opt => block_item_list
Line 78: compound_statement => { block_item_list_opt }
Line 78: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 78: external_declaration => function_definition
Line 78: translation_unit => translation_unit external_declaration


Line 80: type_specifier => signed
Line 80: declaration_specifiers_opt => epsilon 
Line 80: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 80: pointer_opt => epsilon
Line 80: direct_declarator => IDENTIFIER
				IDENTIFIER = `main`
Line 80: identifier_list_opt => epsilon
Line 80: direct_declarator => direct_declarator ( identifier_list_opt )

Line 81: declarator => pointer_opt direct_declarator
Line 81: declaration_list_opt => epsilon

Line 82: type_specifier => int
Line 82: declaration_specifiers_opt => epsilon 
Line 82: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 82: pointer_opt => epsilon
Line 82: direct_declarator => IDENTIFIER
				IDENTIFIER = `a`
Line 82: type_qualifier_list_opt => epsilon
Line 82: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `6`
Line 82: postfix_expression => primary_expression
Line 82: unary_expression => postfix_expression
Line 82: cast_expression => unary_expression
Line 82: multiplicative_expression => cast_expression
Line 82: additive_expression => multiplicative_expression
Line 82: shift_expression => additive_expression
Line 82: relational_expression => shift_expression
Line 82: equality_expression => relational_expression
Line 82: AND_expression => equality_expression
Line 82: exclusive_OR_expression => AND_expression
Line 82: inclusive_OR_expression => exclusive_OR_expression
Line 82: logical_AND_expression => inclusive_OR_expression
Line 82: logical_OR_expression => logical_AND_expression
Line 82: conditional_expression => logical_OR_expression
Line 82: assignment_expression => conditional_expression
Line 82: assignment_expression_opt => assignment_expression
Line 82: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 82: declarator => pointer_opt direct_declarator
Line 82: designation_opt => epsilon
Line 82: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 82: postfix_expression => primary_expression
Line 82: unary_expression => postfix_expression
Line 82: cast_expression => unary_expression
Line 82: multiplicative_expression => cast_expression
Line 82: additive_expression => multiplicative_expression
Line 82: shift_expression => additive_expression
Line 82: relational_expression => shift_expression
Line 82: equality_expression => relational_expression
Line 82: AND_expression => equality_expression
Line 82: exclusive_OR_expression => AND_expression
Line 82: inclusive_OR_expression => exclusive_OR_expression
Line 82: logical_AND_expression => inclusive_OR_expression
Line 82: logical_OR_expression => logical_AND_expression
Line 82: conditional_expression => logical_OR_expression
Line 82: assignment_expression => conditional_expression
Line 82: initializer => assignment_expression
Line 82: initializer_list => designation_opt initializer
Line 82: designation_opt => epsilon
Line 82: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 82: postfix_expression => primary_expression
Line 82: unary_expression => postfix_expression
Line 82: cast_expression => unary_expression
Line 82: multiplicative_expression => cast_expression
Line 82: additive_expression => multiplicative_expression
Line 82: shift_expression => additive_expression
Line 82: relational_expression => shift_expression
Line 82: equality_expression => relational_expression
Line 82: AND_expression => equality_expression
Line 82: exclusive_OR_expression => AND_expression
Line 82: inclusive_OR_expression => exclusive_OR_expression
Line 82: logical_AND_expression => inclusive_OR_expression
Line 82: logical_OR_expression => logical_AND_expression
Line 82: conditional_expression => logical_OR_expression
Line 82: assignment_expression => conditional_expression
Line 82: initializer => assignment_expression
Line 82: initializer_list => initializer_list , designation_opt initializer
Line 82: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 82: postfix_expression => primary_expression
Line 82: unary_expression => postfix_expression
Line 82: cast_expression => unary_expression
Line 82: multiplicative_expression => cast_expression
Line 82: additive_expression => multiplicative_expression
Line 82: shift_expression => additive_expression
Line 82: relational_expression => shift_expression
Line 82: equality_expression => relational_expression
Line 82: AND_expression => equality_expression
Line 82: exclusive_OR_expression => AND_expression
Line 82: inclusive_OR_expression => exclusive_OR_expression
Line 82: logical_AND_expression => inclusive_OR_expression
Line 82: logical_OR_expression => logical_AND_expression
Line 82: conditional_expression => logical_OR_expression
Line 82: constant_expression => conditional_expression
Line 82: designator => [ constant_expression ]
Line 82: designator_list => designator
Line 82: designation => designator_list =
Line 82: designation_opt => designation
Line 82: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 82: postfix_expression => primary_expression
Line 82: unary_expression => postfix_expression
Line 82: cast_expression => unary_expression
Line 82: multiplicative_expression => cast_expression
Line 82: additive_expression => multiplicative_expression
Line 82: shift_expression => additive_expression
Line 82: relational_expression => shift_expression
Line 82: equality_expression => relational_expression
Line 82: AND_expression => equality_expression
Line 82: exclusive_OR_expression => AND_expression
Line 82: inclusive_OR_expression => exclusive_OR_expression
Line 82: logical_AND_expression => inclusive_OR_expression
Line 82: logical_OR_expression => logical_AND_expression
Line 82: conditional_expression => logical_OR_expression
Line 82: assignment_expression => conditional_expression
Line 82: initializer => assignment_expression
Line 82: initializer_list => initializer_list , designation_opt initializer
Line 82: initializer => { initializer_list }
Line 82: init_declarator => declarator = initializer
Line 82: init_declarator_list => init_declarator
Line 82: init_declarator_list_opt => init_declarator_list
Line 82: declaration => declaration_specifiers init_declarator_list_opt ;
Line 82: block_item => declaration
Line 82: block_item_list => block_item

Line 83: type_specifier => char
Line 83: declaration_specifiers_opt => epsilon 
Line 83: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 83: pointer_opt => epsilon
Line 83: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 83: type_qualifier_list_opt => epsilon
Line 83: assignment_expression_opt => epsilon
Line 83: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 83: declarator => pointer_opt direct_declarator
Line 83: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"hello world"`
Line 83: postfix_expression => primary_expression
Line 83: unary_expression => postfix_expression
Line 83: cast_expression => unary_expression
Line 83: multiplicative_expression => cast_expression
Line 83: additive_expression => multiplicative_expression
Line 83: shift_expression => additive_expression
Line 83: relational_expression => shift_expression
Line 83: equality_expression => relational_expression
Line 83: AND_expression => equality_expression
Line 83: exclusive_OR_expression => AND_expression
Line 83: inclusive_OR_expression => exclusive_OR_expression
Line 83: logical_AND_expression => inclusive_OR_expression
Line 83: logical_OR_expression => logical_AND_expression
Line 83: conditional_expression => logical_OR_expression
Line 83: assignment_expression => conditional_expression
Line 83: initializer => assignment_expression
Line 83: init_declarator => declarator = initializer
Line 83: init_declarator_list => init_declarator
Line 83: init_declarator_list_opt => init_declarator_list
Line 83: declaration => declaration_specifiers init_declarator_list_opt ;
Line 83: block_item => declaration
Line 83: block_item_list => block_item_list block_item

Line 84: type_specifier => char
Line 84: declaration_specifiers_opt => epsilon 
Line 84: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 84: pointer_opt => epsilon
Line 84: direct_declarator => IDENTIFIER
				IDENTIFIER = `c1`
Line 84: declarator => pointer_opt direct_declarator
Line 84: primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = `'c'`
Line 84: postfix_expression => primary_expression
Line 84: unary_expression => postfix_expression
Line 84: cast_expression => unary_expression
Line 84: multiplicative_expression => cast_expression
Line 84: additive_expression => multiplicative_expression
Line 84: shift_expression => additive_expression
Line 84: relational_expression => shift_expression
Line 84: equality_expression => relational_expression
Line 84: AND_expression => equality_expression
Line 84: exclusive_OR_expression => AND_expression
Line 84: inclusive_OR_expression => exclusive_OR_expression
Line 84: logical_AND_expression => inclusive_OR_expression
Line 84: logical_OR_expression => logical_AND_expression
Line 84: conditional_expression => logical_OR_expression
Line 84: assignment_expression => conditional_expression
Line 84: initializer => assignment_expression
Line 84: init_declarator => declarator = initializer
Line 84: init_declarator_list => init_declarator
Line 84: init_declarator_list_opt => init_declarator_list
Line 84: declaration => declaration_specifiers init_declarator_list_opt ;
Line 84: block_item => declaration
Line 84: block_item_list => block_item_list block_item

Line 85: type_specifier => char
Line 85: declaration_specifiers_opt => epsilon 
Line 85: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 85: type_qualifier_list_opt => epsilon
Line 85: pointer => * type_qualifier_list_opt
Line 85: pointer_opt => pointer
Line 85: direct_declarator => IDENTIFIER
				IDENTIFIER = `c2`
Line 85: declarator => pointer_opt direct_declarator
Line 85: unary_operator => &
Line 85: primary_expression => IDENTIFIER
				IDENTIFIER = `c1`
Line 85: postfix_expression => primary_expression
Line 85: unary_expression => postfix_expression
Line 85: cast_expression => unary_expression
Line 85: unary_expression => unary_operator cast_expression
Line 85: cast_expression => unary_expression
Line 85: multiplicative_expression => cast_expression
Line 85: additive_expression => multiplicative_expression
Line 85: shift_expression => additive_expression
Line 85: relational_expression => shift_expression
Line 85: equality_expression => relational_expression
Line 85: AND_expression => equality_expression
Line 85: exclusive_OR_expression => AND_expression
Line 85: inclusive_OR_expression => exclusive_OR_expression
Line 85: logical_AND_expression => inclusive_OR_expression
Line 85: logical_OR_expression => logical_AND_expression
Line 85: conditional_expression => logical_OR_expression
Line 85: assignment_expression => conditional_expression
Line 85: initializer => assignment_expression
Line 85: init_declarator => declarator = initializer
Line 85: init_declarator_list => init_declarator
Line 85: init_declarator_list_opt => init_declarator_list
Line 85: declaration => declaration_specifiers init_declarator_list_opt ;
Line 85: block_item => declaration
Line 85: block_item_list => block_item_list block_item

Line 86: unary_operator => *
Line 86: primary_expression => IDENTIFIER
				IDENTIFIER = `c2`
Line 86: postfix_expression => primary_expression
Line 86: unary_expression => postfix_expression
Line 86: cast_expression => unary_expression
Line 86: unary_expression => unary_operator cast_expression
Line 86: assignment_operator => =
Line 86: primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = `'a'`
Line 86: postfix_expression => primary_expression
Line 86: unary_expression => postfix_expression
Line 86: cast_expression => unary_expression
Line 86: multiplicative_expression => cast_expression
Line 86: additive_expression => multiplicative_expression
Line 86: shift_expression => additive_expression
Line 86: relational_expression => shift_expression
Line 86: equality_expression => relational_expression
Line 86: AND_expression => equality_expression
Line 86: exclusive_OR_expression => AND_expression
Line 86: inclusive_OR_expression => exclusive_OR_expression
Line 86: logical_AND_expression => inclusive_OR_expression
Line 86: logical_OR_expression => logical_AND_expression
Line 86: conditional_expression => logical_OR_expression
Line 86: assignment_expression => conditional_expression
Line 86: assignment_expression => unary_expression assignment_operator assignment_expression
Line 86: expression => assignment_expression
Line 86: expression_opt => expression
Line 86: expression_statement => expression_opt ;
Line 86: statement => expression_statement
Line 86: block_item => statement
Line 86: block_item_list => block_item_list block_item

Line 87: type_specifier => char
Line 87: declaration_specifiers_opt => epsilon 
Line 87: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 87: type_qualifier_list_opt => epsilon
Line 87: type_qualifier_list_opt => epsilon
Line 87: pointer => * type_qualifier_list_opt
Line 87: pointer => * type_qualifier_list_opt pointer
Line 87: pointer_opt => pointer
Line 87: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 87: declarator => pointer_opt direct_declarator
Line 87: type_specifier => char
Line 87: specifier_qualifier_list_opt => epsilon
Line 87: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 87: type_name => specifier_qualifier_list
Line 87: designation_opt => epsilon
Line 87: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"a"`
Line 87: postfix_expression => primary_expression
Line 87: unary_expression => postfix_expression
Line 87: cast_expression => unary_expression
Line 87: multiplicative_expression => cast_expression
Line 87: additive_expression => multiplicative_expression
Line 87: shift_expression => additive_expression
Line 87: relational_expression => shift_expression
Line 87: equality_expression => relational_expression
Line 87: AND_expression => equality_expression
Line 87: exclusive_OR_expression => AND_expression
Line 87: inclusive_OR_expression => exclusive_OR_expression
Line 87: logical_AND_expression => inclusive_OR_expression
Line 87: logical_OR_expression => logical_AND_expression
Line 87: conditional_expression => logical_OR_expression
Line 87: assignment_expression => conditional_expression
Line 87: initializer => assignment_expression
Line 87: initializer_list => designation_opt initializer
Line 87: designation_opt => epsilon
Line 87: primary_expression => IDENTIFIER
				IDENTIFIER = `b`
Line 87: postfix_expression => primary_expression
Line 87: unary_expression => postfix_expression
Line 87: cast_expression => unary_expression
Line 87: multiplicative_expression => cast_expression
Line 87: additive_expression => multiplicative_expression
Line 87: shift_expression => additive_expression
Line 87: relational_expression => shift_expression
Line 87: equality_expression => relational_expression
Line 87: AND_expression => equality_expression
Line 87: exclusive_OR_expression => AND_expression
Line 87: inclusive_OR_expression => exclusive_OR_expression
Line 87: logical_AND_expression => inclusive_OR_expression
Line 87: logical_OR_expression => logical_AND_expression
Line 87: conditional_expression => logical_OR_expression
Line 87: assignment_expression => conditional_expression
Line 87: initializer => assignment_expression
Line 87: initializer_list => initializer_list , designation_opt initializer
Line 87: designation_opt => epsilon
Line 87: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"abc"`
Line 87: postfix_expression => primary_expression
Line 87: unary_expression => postfix_expression
Line 87: cast_expression => unary_expression
Line 87: multiplicative_expression => cast_expression
Line 87: additive_expression => multiplicative_expression
Line 87: shift_expression => additive_expression
Line 87: relational_expression => shift_expression
Line 87: equality_expression => relational_expression
Line 87: AND_expression => equality_expression
Line 87: exclusive_OR_expression => AND_expression
Line 87: inclusive_OR_expression => exclusive_OR_expression
Line 87: logical_AND_expression => inclusive_OR_expression
Line 87: logical_OR_expression => logical_AND_expression
Line 87: conditional_expression => logical_OR_expression
Line 87: assignment_expression => conditional_expression
Line 87: initializer => assignment_expression
Line 87: initializer_list => initializer_list , designation_opt initializer
Line 87: postfix_expression => ( type_name ) { initializer_list }
Line 87: unary_expression => postfix_expression
Line 87: cast_expression => unary_expression
Line 87: multiplicative_expression => cast_expression
Line 87: additive_expression => multiplicative_expression
Line 87: shift_expression => additive_expression
Line 87: relational_expression => shift_expression
Line 87: equality_expression => relational_expression
Line 87: AND_expression => equality_expression
Line 87: exclusive_OR_expression => AND_expression
Line 87: inclusive_OR_expression => exclusive_OR_expression
Line 87: logical_AND_expression => inclusive_OR_expression
Line 87: logical_OR_expression => logical_AND_expression
Line 87: conditional_expression => logical_OR_expression
Line 87: assignment_expression => conditional_expression
Line 87: initializer => assignment_expression
Line 87: init_declarator => declarator = initializer
Line 87: init_declarator_list => init_declarator
Line 87: init_declarator_list_opt => init_declarator_list
Line 87: declaration => declaration_specifiers init_declarator_list_opt ;
Line 87: block_item => declaration
Line 87: block_item_list => block_item_list block_item


Line 89: type_specifier => int
Line 89: declaration_specifiers_opt => epsilon 
Line 89: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 89: pointer_opt => epsilon
Line 89: direct_declarator => IDENTIFIER
				IDENTIFIER = `n0`
Line 89: declarator => pointer_opt direct_declarator
Line 89: unary_operator => -
Line 89: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3452`
Line 89: postfix_expression => primary_expression
Line 89: unary_expression => postfix_expression
Line 89: cast_expression => unary_expression
Line 89: unary_expression => unary_operator cast_expression
Line 89: cast_expression => unary_expression
Line 89: multiplicative_expression => cast_expression
Line 89: additive_expression => multiplicative_expression
Line 89: shift_expression => additive_expression
Line 89: relational_expression => shift_expression
Line 89: equality_expression => relational_expression
Line 89: AND_expression => equality_expression
Line 89: exclusive_OR_expression => AND_expression
Line 89: inclusive_OR_expression => exclusive_OR_expression
Line 89: logical_AND_expression => inclusive_OR_expression
Line 89: logical_OR_expression => logical_AND_expression
Line 89: conditional_expression => logical_OR_expression
Line 89: assignment_expression => conditional_expression
Line 89: initializer => assignment_expression
Line 89: init_declarator => declarator = initializer
Line 89: init_declarator_list => init_declarator
Line 89: init_declarator_list_opt => init_declarator_list
Line 89: declaration => declaration_specifiers init_declarator_list_opt ;
Line 89: block_item => declaration
Line 89: block_item_list => block_item_list block_item

Line 90: type_specifier => unsigned
Line 90: type_specifier => long
Line 90: declaration_specifiers_opt => epsilon 
Line 90: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 90: declaration_specifiers_opt => declaration_specifiers
Line 90: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 90: pointer_opt => epsilon
Line 90: direct_declarator => IDENTIFIER
				IDENTIFIER = `n1`
Line 90: declarator => pointer_opt direct_declarator
Line 90: unary_operator => +
Line 90: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `94570275`
Line 90: postfix_expression => primary_expression
Line 90: unary_expression => postfix_expression
Line 90: cast_expression => unary_expression
Line 90: unary_expression => unary_operator cast_expression
Line 90: cast_expression => unary_expression
Line 90: multiplicative_expression => cast_expression
Line 90: additive_expression => multiplicative_expression
Line 90: shift_expression => additive_expression
Line 90: relational_expression => shift_expression
Line 90: equality_expression => relational_expression
Line 90: AND_expression => equality_expression
Line 90: exclusive_OR_expression => AND_expression
Line 90: inclusive_OR_expression => exclusive_OR_expression
Line 90: logical_AND_expression => inclusive_OR_expression
Line 90: logical_OR_expression => logical_AND_expression
Line 90: conditional_expression => logical_OR_expression
Line 90: assignment_expression => conditional_expression
Line 90: initializer => assignment_expression
Line 90: init_declarator => declarator = initializer
Line 90: init_declarator_list => init_declarator
Line 90: init_declarator_list_opt => init_declarator_list
Line 90: declaration => declaration_specifiers init_declarator_list_opt ;
Line 90: block_item => declaration
Line 90: block_item_list => block_item_list block_item

Line 91: type_specifier => short
Line 91: declaration_specifiers_opt => epsilon 
Line 91: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 91: pointer_opt => epsilon
Line 91: direct_declarator => IDENTIFIER
				IDENTIFIER = `n2`
Line 91: declarator => pointer_opt direct_declarator
Line 91: unary_operator => ~
Line 91: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `46`
Line 91: postfix_expression => primary_expression
Line 91: unary_expression => postfix_expression
Line 91: cast_expression => unary_expression
Line 91: unary_expression => unary_operator cast_expression
Line 91: cast_expression => unary_expression
Line 91: multiplicative_expression => cast_expression
Line 91: additive_expression => multiplicative_expression
Line 91: shift_expression => additive_expression
Line 91: relational_expression => shift_expression
Line 91: equality_expression => relational_expression
Line 91: AND_expression => equality_expression
Line 91: exclusive_OR_expression => AND_expression
Line 91: inclusive_OR_expression => exclusive_OR_expression
Line 91: logical_AND_expression => inclusive_OR_expression
Line 91: logical_OR_expression => logical_AND_expression
Line 91: conditional_expression => logical_OR_expression
Line 91: assignment_expression => conditional_expression
Line 91: initializer => assignment_expression
Line 91: init_declarator => declarator = initializer
Line 91: init_declarator_list => init_declarator
Line 91: init_declarator_list_opt => init_declarator_list
Line 91: declaration => declaration_specifiers init_declarator_list_opt ;
Line 91: block_item => declaration
Line 91: block_item_list => block_item_list block_item

Line 92: type_specifier => float
Line 92: declaration_specifiers_opt => epsilon 
Line 92: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 92: pointer_opt => epsilon
Line 92: direct_declarator => IDENTIFIER
				IDENTIFIER = `n3`
Line 92: declarator => pointer_opt direct_declarator
Line 92: unary_operator => -
Line 92: primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = `23.865320`
Line 92: postfix_expression => primary_expression
Line 92: unary_expression => postfix_expression
Line 92: cast_expression => unary_expression
Line 92: unary_expression => unary_operator cast_expression
Line 92: cast_expression => unary_expression
Line 92: multiplicative_expression => cast_expression
Line 92: additive_expression => multiplicative_expression
Line 92: shift_expression => additive_expression
Line 92: relational_expression => shift_expression
Line 92: equality_expression => relational_expression
Line 92: AND_expression => equality_expression
Line 92: exclusive_OR_expression => AND_expression
Line 92: inclusive_OR_expression => exclusive_OR_expression
Line 92: logical_AND_expression => inclusive_OR_expression
Line 92: logical_OR_expression => logical_AND_expression
Line 92: conditional_expression => logical_OR_expression
Line 92: assignment_expression => conditional_expression
Line 92: initializer => assignment_expression
Line 92: init_declarator => declarator = initializer
Line 92: init_declarator_list => init_declarator
Line 92: init_declarator_list_opt => init_declarator_list
Line 92: declaration => declaration_specifiers init_declarator_list_opt ;
Line 92: block_item => declaration
Line 92: block_item_list => block_item_list block_item

Line 93: type_specifier => double
Line 93: declaration_specifiers_opt => epsilon 
Line 93: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 93: pointer_opt => epsilon
Line 93: direct_declarator => IDENTIFIER
				IDENTIFIER = `n4`
Line 93: declarator => pointer_opt direct_declarator
Line 93: primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = `0.000000`
Line 93: postfix_expression => primary_expression
Line 93: unary_expression => postfix_expression
Line 93: cast_expression => unary_expression
Line 93: multiplicative_expression => cast_expression
Line 93: additive_expression => multiplicative_expression
Line 93: shift_expression => additive_expression
Line 93: relational_expression => shift_expression
Line 93: equality_expression => relational_expression
Line 93: AND_expression => equality_expression
Line 93: exclusive_OR_expression => AND_expression
Line 93: inclusive_OR_expression => exclusive_OR_expression
Line 93: logical_AND_expression => inclusive_OR_expression
Line 93: logical_OR_expression => logical_AND_expression
Line 93: conditional_expression => logical_OR_expression
Line 93: assignment_expression => conditional_expression
Line 93: initializer => assignment_expression
Line 93: init_declarator => declarator = initializer
Line 93: init_declarator_list => init_declarator
Line 93: init_declarator_list_opt => init_declarator_list
Line 93: declaration => declaration_specifiers init_declarator_list_opt ;
Line 93: block_item => declaration
Line 93: block_item_list => block_item_list block_item

Line 94: type_specifier => _Bool
Line 94: declaration_specifiers_opt => epsilon 
Line 94: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 94: pointer_opt => epsilon
Line 94: direct_declarator => IDENTIFIER
				IDENTIFIER = `n5`
Line 94: declarator => pointer_opt direct_declarator
Line 94: unary_operator => !
Line 94: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `5`
Line 94: postfix_expression => primary_expression
Line 94: unary_expression => postfix_expression
Line 94: cast_expression => unary_expression
Line 94: unary_expression => unary_operator cast_expression
Line 94: cast_expression => unary_expression
Line 94: multiplicative_expression => cast_expression
Line 94: additive_expression => multiplicative_expression
Line 94: shift_expression => additive_expression
Line 94: relational_expression => shift_expression
Line 94: equality_expression => relational_expression
Line 94: AND_expression => equality_expression
Line 94: exclusive_OR_expression => AND_expression
Line 94: inclusive_OR_expression => exclusive_OR_expression
Line 94: logical_AND_expression => inclusive_OR_expression
Line 94: logical_OR_expression => logical_AND_expression
Line 94: conditional_expression => logical_OR_expression
Line 94: assignment_expression => conditional_expression
Line 94: initializer => assignment_expression
Line 94: init_declarator => declarator = initializer
Line 94: init_declarator_list => init_declarator
Line 94: init_declarator_list_opt => init_declarator_list
Line 94: declaration => declaration_specifiers init_declarator_list_opt ;
Line 94: block_item => declaration
Line 94: block_item_list => block_item_list block_item

Line 95: type_specifier => double
Line 95: type_specifier => _Complex
Line 95: declaration_specifiers_opt => epsilon 
Line 95: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 95: declaration_specifiers_opt => declaration_specifiers
Line 95: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 95: pointer_opt => epsilon
Line 95: direct_declarator => IDENTIFIER
				IDENTIFIER = `n6`
Line 95: declarator => pointer_opt direct_declarator
Line 95: init_declarator => declarator
Line 95: init_declarator_list => init_declarator
Line 95: init_declarator_list_opt => init_declarator_list
Line 95: declaration => declaration_specifiers init_declarator_list_opt ;
Line 95: block_item => declaration
Line 95: block_item_list => block_item_list block_item

Line 96: type_specifier => double
Line 96: type_specifier => _Imaginary
Line 96: declaration_specifiers_opt => epsilon 
Line 96: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 96: declaration_specifiers_opt => declaration_specifiers
Line 96: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 96: pointer_opt => epsilon
Line 96: direct_declarator => IDENTIFIER
				IDENTIFIER = `n7`
Line 96: declarator => pointer_opt direct_declarator
Line 96: init_declarator => declarator
Line 96: init_declarator_list => init_declarator
Line 96: init_declarator_list_opt => init_declarator_list
Line 96: declaration => declaration_specifiers init_declarator_list_opt ;
Line 96: block_item => declaration
Line 96: block_item_list => block_item_list block_item


Line 98: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 98: postfix_expression => primary_expression
Line 98: unary_expression => postfix_expression
Line 98: assignment_operator => =
Line 98: type_specifier => unsigned
Line 98: type_specifier => int
Line 98: specifier_qualifier_list_opt => epsilon
Line 98: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 98: specifier_qualifier_list_opt => specifier_qualifier_list
Line 98: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 98: type_name => specifier_qualifier_list
Line 98: primary_expression => IDENTIFIER
				IDENTIFIER = `c`
Line 98: postfix_expression => primary_expression
Line 98: unary_expression => postfix_expression
Line 98: cast_expression => unary_expression
Line 98: cast_expression => ( type_name ) cast_expression
Line 98: multiplicative_expression => cast_expression
Line 98: additive_expression => multiplicative_expression
Line 98: shift_expression => additive_expression
Line 98: relational_expression => shift_expression
Line 98: equality_expression => relational_expression
Line 98: AND_expression => equality_expression
Line 98: exclusive_OR_expression => AND_expression
Line 98: inclusive_OR_expression => exclusive_OR_expression
Line 98: logical_AND_expression => inclusive_OR_expression
Line 98: logical_OR_expression => logical_AND_expression
Line 98: conditional_expression => logical_OR_expression
Line 98: assignment_expression => conditional_expression
Line 98: assignment_expression => unary_expression assignment_operator assignment_expression
Line 98: expression => assignment_expression
Line 98: expression_opt => expression
Line 98: expression_statement => expression_opt ;
Line 98: statement => expression_statement
Line 98: block_item => statement
Line 98: block_item_list => block_item_list block_item

Line 99: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 99: postfix_expression => primary_expression
Line 99: unary_expression => postfix_expression
Line 99: assignment_operator => =
Line 99: type_specifier => long
Line 99: type_specifier => double
Line 99: specifier_qualifier_list_opt => epsilon
Line 99: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 99: specifier_qualifier_list_opt => specifier_qualifier_list
Line 99: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 99: type_name => specifier_qualifier_list
Line 99: unary_expression => sizeof ( type_name )
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => relational_expression
Line 99: AND_expression => equality_expression
Line 99: exclusive_OR_expression => AND_expression
Line 99: inclusive_OR_expression => exclusive_OR_expression
Line 99: logical_AND_expression => inclusive_OR_expression
Line 99: logical_OR_expression => logical_AND_expression
Line 99: conditional_expression => logical_OR_expression
Line 99: assignment_expression => conditional_expression
Line 99: assignment_expression => unary_expression assignment_operator assignment_expression
Line 99: expression => assignment_expression
Line 99: expression_opt => expression
Line 99: expression_statement => expression_opt ;
Line 99: statement => expression_statement
Line 99: block_item => statement
Line 99: block_item_list => block_item_list block_item

Line 100: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 100: postfix_expression => primary_expression
Line 100: unary_expression => postfix_expression
Line 100: assignment_operator => =
Line 100: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 100: postfix_expression => primary_expression
Line 100: unary_expression => postfix_expression
Line 100: unary_expression => sizeof unary_expression
Line 100: cast_expression => unary_expression
Line 100: multiplicative_expression => cast_expression
Line 100: additive_expression => multiplicative_expression
Line 100: shift_expression => additive_expression
Line 100: relational_expression => shift_expression
Line 100: equality_expression => relational_expression
Line 100: AND_expression => equality_expression
Line 100: exclusive_OR_expression => AND_expression
Line 100: inclusive_OR_expression => exclusive_OR_expression
Line 100: logical_AND_expression => inclusive_OR_expression
Line 100: logical_OR_expression => logical_AND_expression
Line 100: conditional_expression => logical_OR_expression
Line 100: assignment_expression => conditional_expression
Line 100: assignment_expression => unary_expression assignment_operator assignment_expression
Line 100: expression => assignment_expression
Line 100: expression_opt => expression
Line 100: expression_statement => expression_opt ;
Line 100: statement => expression_statement
Line 100: block_item => statement
Line 100: block_item_list => block_item_list block_item


Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: assignment_operator => *=
Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: cast_expression => unary_expression
Line 102: multiplicative_expression => cast_expression
Line 102: additive_expression => multiplicative_expression
Line 102: shift_expression => additive_expression
Line 102: relational_expression => shift_expression
Line 102: equality_expression => relational_expression
Line 102: AND_expression => equality_expression
Line 102: exclusive_OR_expression => AND_expression
Line 102: inclusive_OR_expression => exclusive_OR_expression
Line 102: logical_AND_expression => inclusive_OR_expression
Line 102: logical_OR_expression => logical_AND_expression
Line 102: conditional_expression => logical_OR_expression
Line 102: assignment_expression => conditional_expression
Line 102: assignment_expression => unary_expression assignment_operator assignment_expression
Line 102: expression => assignment_expression
Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: assignment_operator => /=
Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: cast_expression => unary_expression
Line 102: multiplicative_expression => cast_expression
Line 102: additive_expression => multiplicative_expression
Line 102: shift_expression => additive_expression
Line 102: relational_expression => shift_expression
Line 102: equality_expression => relational_expression
Line 102: AND_expression => equality_expression
Line 102: exclusive_OR_expression => AND_expression
Line 102: inclusive_OR_expression => exclusive_OR_expression
Line 102: logical_AND_expression => inclusive_OR_expression
Line 102: logical_OR_expression => logical_AND_expression
Line 102: conditional_expression => logical_OR_expression
Line 102: assignment_expression => conditional_expression
Line 102: assignment_expression => unary_expression assignment_operator assignment_expression
Line 102: expression => expression , assignment_expression
Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: assignment_operator => %=
Line 102: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 102: postfix_expression => primary_expression
Line 102: unary_expression => postfix_expression
Line 102: cast_expression => unary_expression
Line 102: multiplicative_expression => cast_expression
Line 102: additive_expression => multiplicative_expression
Line 102: shift_expression => additive_expression
Line 102: relational_expression => shift_expression
Line 102: equality_expression => relational_expression
Line 102: AND_expression => equality_expression
Line 102: exclusive_OR_expression => AND_expression
Line 102: inclusive_OR_expression => exclusive_OR_expression
Line 102: logical_AND_expression => inclusive_OR_expression
Line 102: logical_OR_expression => logical_AND_expression
Line 102: conditional_expression => logical_OR_expression
Line 102: assignment_expression => conditional_expression
Line 102: assignment_expression => unary_expression assignment_operator assignment_expression
Line 102: expression => expression , assignment_expression
Line 102: expression_opt => expression
Line 102: expression_statement => expression_opt ;
Line 102: statement => expression_statement
Line 102: block_item => statement
Line 102: block_item_list => block_item_list block_item

Line 103: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: assignment_operator => += 
Line 103: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: assignment_operator => -= 
Line 103: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: assignment_operator => <<=
Line 103: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: assignment_operator => >>=
Line 103: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: cast_expression => unary_expression
Line 103: multiplicative_expression => cast_expression
Line 103: additive_expression => multiplicative_expression
Line 103: shift_expression => additive_expression
Line 103: relational_expression => shift_expression
Line 103: equality_expression => relational_expression
Line 103: AND_expression => equality_expression
Line 103: exclusive_OR_expression => AND_expression
Line 103: inclusive_OR_expression => exclusive_OR_expression
Line 103: logical_AND_expression => inclusive_OR_expression
Line 103: logical_OR_expression => logical_AND_expression
Line 103: conditional_expression => logical_OR_expression
Line 103: assignment_expression => conditional_expression
Line 103: assignment_expression => unary_expression assignment_operator assignment_expression
Line 103: expression => assignment_expression
Line 103: primary_expression => ( expression )
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: cast_expression => unary_expression
Line 103: multiplicative_expression => cast_expression
Line 103: additive_expression => multiplicative_expression
Line 103: shift_expression => additive_expression
Line 103: relational_expression => shift_expression
Line 103: equality_expression => relational_expression
Line 103: AND_expression => equality_expression
Line 103: exclusive_OR_expression => AND_expression
Line 103: inclusive_OR_expression => exclusive_OR_expression
Line 103: logical_AND_expression => inclusive_OR_expression
Line 103: logical_OR_expression => logical_AND_expression
Line 103: conditional_expression => logical_OR_expression
Line 103: assignment_expression => conditional_expression
Line 103: assignment_expression => unary_expression assignment_operator assignment_expression
Line 103: expression => assignment_expression
Line 103: primary_expression => ( expression )
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: cast_expression => unary_expression
Line 103: multiplicative_expression => cast_expression
Line 103: additive_expression => multiplicative_expression
Line 103: shift_expression => additive_expression
Line 103: relational_expression => shift_expression
Line 103: equality_expression => relational_expression
Line 103: AND_expression => equality_expression
Line 103: exclusive_OR_expression => AND_expression
Line 103: inclusive_OR_expression => exclusive_OR_expression
Line 103: logical_AND_expression => inclusive_OR_expression
Line 103: logical_OR_expression => logical_AND_expression
Line 103: conditional_expression => logical_OR_expression
Line 103: assignment_expression => conditional_expression
Line 103: assignment_expression => unary_expression assignment_operator assignment_expression
Line 103: expression => assignment_expression
Line 103: primary_expression => ( expression )
Line 103: postfix_expression => primary_expression
Line 103: unary_expression => postfix_expression
Line 103: cast_expression => unary_expression
Line 103: multiplicative_expression => cast_expression
Line 103: additive_expression => multiplicative_expression
Line 103: shift_expression => additive_expression
Line 103: relational_expression => shift_expression
Line 103: equality_expression => relational_expression
Line 103: AND_expression => equality_expression
Line 103: exclusive_OR_expression => AND_expression
Line 103: inclusive_OR_expression => exclusive_OR_expression
Line 103: logical_AND_expression => inclusive_OR_expression
Line 103: logical_OR_expression => logical_AND_expression
Line 103: conditional_expression => logical_OR_expression
Line 103: assignment_expression => conditional_expression
Line 103: assignment_expression => unary_expression assignment_operator assignment_expression
Line 103: expression => assignment_expression
Line 103: expression_opt => expression
Line 103: expression_statement => expression_opt ;
Line 103: statement => expression_statement
Line 103: block_item => statement
Line 103: block_item_list => block_item_list block_item

Line 104: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 104: postfix_expression => primary_expression
Line 104: unary_expression => postfix_expression
Line 104: assignment_operator => &=
Line 104: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 104: postfix_expression => primary_expression
Line 104: unary_expression => postfix_expression
Line 104: assignment_operator => |=
Line 104: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 104: postfix_expression => primary_expression
Line 104: unary_expression => postfix_expression
Line 104: assignment_operator => ^=
Line 104: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 104: postfix_expression => primary_expression
Line 104: unary_expression => postfix_expression
Line 104: cast_expression => unary_expression
Line 104: multiplicative_expression => cast_expression
Line 104: additive_expression => multiplicative_expression
Line 104: shift_expression => additive_expression
Line 104: relational_expression => shift_expression
Line 104: equality_expression => relational_expression
Line 104: AND_expression => equality_expression
Line 104: exclusive_OR_expression => AND_expression
Line 104: inclusive_OR_expression => exclusive_OR_expression
Line 104: logical_AND_expression => inclusive_OR_expression
Line 104: logical_OR_expression => logical_AND_expression
Line 104: conditional_expression => logical_OR_expression
Line 104: assignment_expression => conditional_expression
Line 104: assignment_expression => unary_expression assignment_operator assignment_expression
Line 104: assignment_expression => unary_expression assignment_operator assignment_expression
Line 104: assignment_expression => unary_expression assignment_operator assignment_expression
Line 104: expression => assignment_expression
Line 104: expression_opt => expression
Line 104: expression_statement => expression_opt ;
Line 104: statement => expression_statement
Line 104: block_item => statement
Line 104: block_item_list => block_item_list block_item


Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: assignment_operator => =
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => equality_expression == relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => equality_expression == relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => logical_AND_expression && inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: conditional_expression => logical_OR_expression
Line 106: assignment_expression => conditional_expression
Line 106: expression => assignment_expression
Line 106: primary_expression => ( expression )
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: unary_operator => !
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => equality_expression != relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: conditional_expression => logical_OR_expression
Line 106: assignment_expression => conditional_expression
Line 106: expression => assignment_expression
Line 106: primary_expression => ( expression )
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: unary_expression => unary_operator cast_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => logical_AND_expression && inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: conditional_expression => logical_OR_expression
Line 106: assignment_expression => conditional_expression
Line 106: expression => assignment_expression
Line 106: primary_expression => ( expression )
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: assignment_operator => =
Line 106: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `7`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: conditional_expression => logical_OR_expression
Line 106: assignment_expression => conditional_expression
Line 106: assignment_expression => unary_expression assignment_operator assignment_expression
Line 106: expression => assignment_expression
Line 106: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 106: postfix_expression => primary_expression
Line 106: unary_expression => postfix_expression
Line 106: cast_expression => unary_expression
Line 106: multiplicative_expression => cast_expression
Line 106: additive_expression => multiplicative_expression
Line 106: shift_expression => additive_expression
Line 106: relational_expression => shift_expression
Line 106: equality_expression => relational_expression
Line 106: AND_expression => equality_expression
Line 106: exclusive_OR_expression => AND_expression
Line 106: inclusive_OR_expression => exclusive_OR_expression
Line 106: logical_AND_expression => inclusive_OR_expression
Line 106: logical_OR_expression => logical_AND_expression
Line 106: conditional_expression => logical_OR_expression
Line 106: conditional_expression => logical_OR_expression ? expression : conditional_expression
Line 106: assignment_expression => conditional_expression
Line 106: assignment_expression => unary_expression assignment_operator assignment_expression
Line 106: expression => assignment_expression
Line 106: expression_opt => expression
Line 106: expression_statement => expression_opt ;
Line 106: statement => expression_statement
Line 106: block_item => statement
Line 106: block_item_list => block_item_list block_item

Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `a`
Line 107: postfix_expression => primary_expression
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => additive_expression
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => shift_expression << additive_expression
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => shift_expression >> additive_expression
Line 107: relational_expression => shift_expression
Line 107: equality_expression => relational_expression
Line 107: AND_expression => equality_expression
Line 107: exclusive_OR_expression => AND_expression
Line 107: inclusive_OR_expression => exclusive_OR_expression
Line 107: logical_AND_expression => inclusive_OR_expression
Line 107: logical_OR_expression => logical_AND_expression
Line 107: conditional_expression => logical_OR_expression
Line 107: assignment_expression => conditional_expression
Line 107: expression => assignment_expression
Line 107: postfix_expression => postfix_expression [ expression ]
Line 107: unary_expression => postfix_expression
Line 107: assignment_operator => =
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => additive_expression
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => shift_expression >> additive_expression
Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 107: postfix_expression => primary_expression
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => shift_expression << additive_expression
Line 107: relational_expression => shift_expression
Line 107: equality_expression => relational_expression
Line 107: AND_expression => equality_expression
Line 107: exclusive_OR_expression => AND_expression
Line 107: inclusive_OR_expression => exclusive_OR_expression
Line 107: logical_AND_expression => inclusive_OR_expression
Line 107: logical_OR_expression => logical_AND_expression
Line 107: conditional_expression => logical_OR_expression
Line 107: assignment_expression => conditional_expression
Line 107: assignment_expression => unary_expression assignment_operator assignment_expression
Line 107: expression => assignment_expression
Line 107: expression_opt => expression
Line 107: expression_statement => expression_opt ;
Line 107: statement => expression_statement
Line 107: block_item => statement
Line 107: block_item_list => block_item_list block_item




Line 111: unary_operator => !
Line 111: primary_expression => IDENTIFIER
				IDENTIFIER = `n5`
Line 111: postfix_expression => primary_expression
Line 111: unary_expression => postfix_expression
Line 111: cast_expression => unary_expression
Line 111: unary_expression => unary_operator cast_expression
Line 111: cast_expression => unary_expression
Line 111: multiplicative_expression => cast_expression
Line 111: additive_expression => multiplicative_expression
Line 111: shift_expression => additive_expression
Line 111: relational_expression => shift_expression
Line 111: equality_expression => relational_expression
Line 111: AND_expression => equality_expression
Line 111: exclusive_OR_expression => AND_expression
Line 111: inclusive_OR_expression => exclusive_OR_expression
Line 111: logical_AND_expression => inclusive_OR_expression
Line 111: logical_OR_expression => logical_AND_expression
Line 111: conditional_expression => logical_OR_expression
Line 111: assignment_expression => conditional_expression
Line 111: expression => assignment_expression


Line 113: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 113: postfix_expression => primary_expression
Line 113: unary_expression => postfix_expression
Line 113: cast_expression => unary_expression
Line 113: multiplicative_expression => cast_expression
Line 113: additive_expression => multiplicative_expression
Line 113: shift_expression => additive_expression
Line 113: relational_expression => shift_expression
Line 113: equality_expression => relational_expression
Line 113: AND_expression => equality_expression
Line 113: exclusive_OR_expression => AND_expression
Line 113: inclusive_OR_expression => exclusive_OR_expression
Line 113: logical_AND_expression => inclusive_OR_expression
Line 113: logical_OR_expression => logical_AND_expression
Line 113: conditional_expression => logical_OR_expression
Line 113: assignment_expression => conditional_expression
Line 113: expression => assignment_expression


Line 115: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 115: postfix_expression => primary_expression
Line 115: unary_expression => postfix_expression
Line 115: cast_expression => unary_expression
Line 115: multiplicative_expression => cast_expression
Line 115: additive_expression => multiplicative_expression
Line 115: shift_expression => additive_expression
Line 115: relational_expression => shift_expression
Line 115: equality_expression => relational_expression
Line 115: AND_expression => equality_expression
Line 115: exclusive_OR_expression => AND_expression
Line 115: inclusive_OR_expression => exclusive_OR_expression
Line 115: logical_AND_expression => inclusive_OR_expression
Line 115: logical_OR_expression => logical_AND_expression
Line 115: conditional_expression => logical_OR_expression
Line 115: constant_expression => conditional_expression

Line 116: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 116: postfix_expression => primary_expression
Line 116: postfix_expression => postfix_expression ++
Line 116: unary_expression => postfix_expression
Line 116: cast_expression => unary_expression
Line 116: multiplicative_expression => cast_expression
Line 116: additive_expression => multiplicative_expression
Line 116: shift_expression => additive_expression
Line 116: relational_expression => shift_expression
Line 116: equality_expression => relational_expression
Line 116: AND_expression => equality_expression
Line 116: exclusive_OR_expression => AND_expression
Line 116: inclusive_OR_expression => exclusive_OR_expression
Line 116: logical_AND_expression => inclusive_OR_expression
Line 116: logical_OR_expression => logical_AND_expression
Line 116: conditional_expression => logical_OR_expression
Line 116: assignment_expression => conditional_expression
Line 116: expression => assignment_expression
Line 116: expression_opt => expression
Line 116: expression_statement => expression_opt ;
Line 116: statement => expression_statement
Line 116: labeled_statement => case constant_expression : statement
Line 116: statement => labeled_statement
Line 116: block_item => statement
Line 116: block_item_list => block_item

Line 117: jump_statement => break ;
Line 117: statement => jump_statement
Line 117: block_item => statement
Line 117: block_item_list => block_item_list block_item

Line 118: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 118: postfix_expression => primary_expression
Line 118: unary_expression => postfix_expression
Line 118: cast_expression => unary_expression
Line 118: multiplicative_expression => cast_expression
Line 118: additive_expression => multiplicative_expression
Line 118: shift_expression => additive_expression
Line 118: relational_expression => shift_expression
Line 118: equality_expression => relational_expression
Line 118: AND_expression => equality_expression
Line 118: exclusive_OR_expression => AND_expression
Line 118: inclusive_OR_expression => exclusive_OR_expression
Line 118: logical_AND_expression => inclusive_OR_expression
Line 118: logical_OR_expression => logical_AND_expression
Line 118: conditional_expression => logical_OR_expression
Line 118: constant_expression => conditional_expression

Line 119: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: assignment_operator => /=
Line 119: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: assignment_expression => unary_expression assignment_operator assignment_expression
Line 119: expression => assignment_expression
Line 119: expression_opt => expression
Line 119: expression_statement => expression_opt ;
Line 119: statement => expression_statement
Line 119: labeled_statement => case constant_expression : statement
Line 119: statement => labeled_statement
Line 119: block_item => statement
Line 119: block_item_list => block_item_list block_item

Line 120: jump_statement => break ;
Line 120: statement => jump_statement
Line 120: block_item => statement
Line 120: block_item_list => block_item_list block_item


Line 122: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 122: postfix_expression => primary_expression
Line 122: postfix_expression => postfix_expression --
Line 122: unary_expression => postfix_expression
Line 122: cast_expression => unary_expression
Line 122: multiplicative_expression => cast_expression
Line 122: additive_expression => multiplicative_expression
Line 122: shift_expression => additive_expression
Line 122: relational_expression => shift_expression
Line 122: equality_expression => relational_expression
Line 122: AND_expression => equality_expression
Line 122: exclusive_OR_expression => AND_expression
Line 122: inclusive_OR_expression => exclusive_OR_expression
Line 122: logical_AND_expression => inclusive_OR_expression
Line 122: logical_OR_expression => logical_AND_expression
Line 122: conditional_expression => logical_OR_expression
Line 122: assignment_expression => conditional_expression
Line 122: expression => assignment_expression
Line 122: expression_opt => expression
Line 122: expression_statement => expression_opt ;
Line 122: statement => expression_statement
Line 122: labeled_statement => default : statement
Line 122: statement => labeled_statement
Line 122: block_item => statement
Line 122: block_item_list => block_item_list block_item

Line 123: block_item_list_opt => block_item_list
Line 123: compound_statement => { block_item_list_opt }
Line 123: statement => compound_statement
Line 123: selection_statement => switch ( expression ) statement
Line 123: statement => selection_statement
Line 123: block_item => statement
Line 123: block_item_list => block_item

Line 124: block_item_list_opt => block_item_list
Line 124: compound_statement => { block_item_list_opt }
Line 124: statement => compound_statement

Line 125: primary_expression => IDENTIFIER
				IDENTIFIER = `n3`
Line 125: postfix_expression => primary_expression
Line 125: unary_expression => postfix_expression
Line 125: cast_expression => unary_expression
Line 125: multiplicative_expression => cast_expression
Line 125: additive_expression => multiplicative_expression
Line 125: shift_expression => additive_expression
Line 125: relational_expression => shift_expression
Line 125: primary_expression => IDENTIFIER
				IDENTIFIER = `n4`
Line 125: postfix_expression => primary_expression
Line 125: unary_expression => postfix_expression
Line 125: cast_expression => unary_expression
Line 125: multiplicative_expression => cast_expression
Line 125: additive_expression => multiplicative_expression
Line 125: shift_expression => additive_expression
Line 125: relational_expression => relational_expression > shift_expression
Line 125: equality_expression => relational_expression
Line 125: AND_expression => equality_expression
Line 125: exclusive_OR_expression => AND_expression
Line 125: inclusive_OR_expression => exclusive_OR_expression
Line 125: logical_AND_expression => inclusive_OR_expression
Line 125: logical_OR_expression => logical_AND_expression
Line 125: conditional_expression => logical_OR_expression
Line 125: assignment_expression => conditional_expression
Line 125: expression => assignment_expression


Line 127: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 127: postfix_expression => primary_expression
Line 127: unary_expression => postfix_expression
Line 127: cast_expression => unary_expression
Line 127: multiplicative_expression => cast_expression
Line 127: additive_expression => multiplicative_expression
Line 127: shift_expression => additive_expression
Line 127: relational_expression => shift_expression
Line 127: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 127: postfix_expression => primary_expression
Line 127: unary_expression => postfix_expression
Line 127: cast_expression => unary_expression
Line 127: multiplicative_expression => cast_expression
Line 127: additive_expression => multiplicative_expression
Line 127: shift_expression => additive_expression
Line 127: relational_expression => relational_expression <= shift_expression
Line 127: equality_expression => relational_expression
Line 127: AND_expression => equality_expression
Line 127: exclusive_OR_expression => AND_expression
Line 127: inclusive_OR_expression => exclusive_OR_expression
Line 127: logical_AND_expression => inclusive_OR_expression
Line 127: logical_OR_expression => logical_AND_expression
Line 127: conditional_expression => logical_OR_expression
Line 127: assignment_expression => conditional_expression
Line 127: expression => assignment_expression

Line 128: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 128: postfix_expression => primary_expression
Line 128: postfix_expression => postfix_expression ++
Line 128: unary_expression => postfix_expression
Line 128: cast_expression => unary_expression
Line 128: multiplicative_expression => cast_expression
Line 128: additive_expression => multiplicative_expression
Line 128: shift_expression => additive_expression
Line 128: relational_expression => shift_expression
Line 128: equality_expression => relational_expression
Line 128: AND_expression => equality_expression
Line 128: exclusive_OR_expression => AND_expression
Line 128: inclusive_OR_expression => exclusive_OR_expression
Line 128: logical_AND_expression => inclusive_OR_expression
Line 128: logical_OR_expression => logical_AND_expression
Line 128: conditional_expression => logical_OR_expression
Line 128: assignment_expression => conditional_expression
Line 128: expression => assignment_expression
Line 128: expression_opt => expression
Line 128: expression_statement => expression_opt ;
Line 128: statement => expression_statement

Line 129: selection_statement => if ( expression ) statement
Line 129: statement => selection_statement
Line 129: block_item => statement
Line 129: block_item_list => block_item
Line 129: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 129: postfix_expression => primary_expression
Line 129: unary_expression => postfix_expression
Line 129: unary_expression => ++ unary_expression
Line 129: cast_expression => unary_expression
Line 129: multiplicative_expression => cast_expression
Line 129: additive_expression => multiplicative_expression
Line 129: shift_expression => additive_expression
Line 129: relational_expression => shift_expression
Line 129: equality_expression => relational_expression
Line 129: AND_expression => equality_expression
Line 129: exclusive_OR_expression => AND_expression
Line 129: inclusive_OR_expression => exclusive_OR_expression
Line 129: logical_AND_expression => inclusive_OR_expression
Line 129: logical_OR_expression => logical_AND_expression
Line 129: conditional_expression => logical_OR_expression
Line 129: assignment_expression => conditional_expression
Line 129: expression => assignment_expression
Line 129: expression_opt => expression
Line 129: expression_statement => expression_opt ;
Line 129: statement => expression_statement
Line 129: block_item => statement
Line 129: block_item_list => block_item_list block_item

Line 130: block_item_list_opt => block_item_list
Line 130: compound_statement => { block_item_list_opt }
Line 130: statement => compound_statement



Line 133: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 133: postfix_expression => primary_expression
Line 133: unary_expression => postfix_expression
Line 133: cast_expression => unary_expression
Line 133: multiplicative_expression => cast_expression
Line 133: additive_expression => multiplicative_expression
Line 133: shift_expression => additive_expression
Line 133: relational_expression => shift_expression
Line 133: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 133: postfix_expression => primary_expression
Line 133: unary_expression => postfix_expression
Line 133: cast_expression => unary_expression
Line 133: multiplicative_expression => cast_expression
Line 133: additive_expression => multiplicative_expression
Line 133: shift_expression => additive_expression
Line 133: relational_expression => relational_expression >= shift_expression
Line 133: equality_expression => relational_expression
Line 133: AND_expression => equality_expression
Line 133: exclusive_OR_expression => AND_expression
Line 133: inclusive_OR_expression => exclusive_OR_expression
Line 133: logical_AND_expression => inclusive_OR_expression
Line 133: logical_OR_expression => logical_AND_expression
Line 133: conditional_expression => logical_OR_expression
Line 133: assignment_expression => conditional_expression
Line 133: expression => assignment_expression

Line 134: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 134: postfix_expression => primary_expression
Line 134: postfix_expression => postfix_expression ++
Line 134: unary_expression => postfix_expression
Line 134: cast_expression => unary_expression
Line 134: multiplicative_expression => cast_expression
Line 134: additive_expression => multiplicative_expression
Line 134: shift_expression => additive_expression
Line 134: relational_expression => shift_expression
Line 134: equality_expression => relational_expression
Line 134: AND_expression => equality_expression
Line 134: exclusive_OR_expression => AND_expression
Line 134: inclusive_OR_expression => exclusive_OR_expression
Line 134: logical_AND_expression => inclusive_OR_expression
Line 134: logical_OR_expression => logical_AND_expression
Line 134: conditional_expression => logical_OR_expression
Line 134: assignment_expression => conditional_expression
Line 134: expression => assignment_expression
Line 134: expression_opt => expression
Line 134: expression_statement => expression_opt ;
Line 134: statement => expression_statement

Line 135: selection_statement => if ( expression ) statement
Line 135: statement => selection_statement
Line 135: block_item => statement
Line 135: block_item_list => block_item
Line 135: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 135: postfix_expression => primary_expression
Line 135: unary_expression => postfix_expression
Line 135: unary_expression => ++ unary_expression
Line 135: cast_expression => unary_expression
Line 135: multiplicative_expression => cast_expression
Line 135: additive_expression => multiplicative_expression
Line 135: shift_expression => additive_expression
Line 135: relational_expression => shift_expression
Line 135: equality_expression => relational_expression
Line 135: AND_expression => equality_expression
Line 135: exclusive_OR_expression => AND_expression
Line 135: inclusive_OR_expression => exclusive_OR_expression
Line 135: logical_AND_expression => inclusive_OR_expression
Line 135: logical_OR_expression => logical_AND_expression
Line 135: conditional_expression => logical_OR_expression
Line 135: assignment_expression => conditional_expression
Line 135: expression => assignment_expression
Line 135: expression_opt => expression
Line 135: expression_statement => expression_opt ;
Line 135: statement => expression_statement
Line 135: block_item => statement
Line 135: block_item_list => block_item_list block_item

Line 136: block_item_list_opt => block_item_list
Line 136: compound_statement => { block_item_list_opt }
Line 136: statement => compound_statement
Line 136: selection_statement => if ( expression ) statement else statement
Line 136: statement => selection_statement
Line 136: selection_statement => if ( expression ) statement else statement
Line 136: statement => selection_statement
Line 136: labeled_statement => IDENTIFIER : statement
				IDENTIFIER = `RANDOM_LOC`
Line 136: statement => labeled_statement
Line 136: block_item => statement
Line 136: block_item_list => block_item_list block_item


Line 138: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 138: postfix_expression => primary_expression
Line 138: postfix_expression => postfix_expression --
Line 138: unary_expression => postfix_expression
Line 138: cast_expression => unary_expression
Line 138: multiplicative_expression => cast_expression
Line 138: additive_expression => multiplicative_expression
Line 138: shift_expression => additive_expression
Line 138: relational_expression => shift_expression
Line 138: equality_expression => relational_expression
Line 138: AND_expression => equality_expression
Line 138: exclusive_OR_expression => AND_expression
Line 138: inclusive_OR_expression => exclusive_OR_expression
Line 138: logical_AND_expression => inclusive_OR_expression
Line 138: logical_OR_expression => logical_AND_expression
Line 138: conditional_expression => logical_OR_expression
Line 138: assignment_expression => conditional_expression
Line 138: expression => assignment_expression

Line 139: jump_statement => goto IDENTIFIER ;
				IDENTIFIER = `RANDOM_LOC`
Line 139: statement => jump_statement
Line 139: iteration_statement => while ( expression ) statement
Line 139: statement => iteration_statement
Line 139: block_item => statement
Line 139: block_item_list => block_item_list block_item


Line 141: expression_opt => epsilon
Line 141: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 141: postfix_expression => primary_expression
Line 141: unary_expression => postfix_expression
Line 141: cast_expression => unary_expression
Line 141: multiplicative_expression => cast_expression
Line 141: additive_expression => multiplicative_expression
Line 141: shift_expression => additive_expression
Line 141: relational_expression => shift_expression
Line 141: equality_expression => relational_expression
Line 141: AND_expression => equality_expression
Line 141: exclusive_OR_expression => AND_expression
Line 141: inclusive_OR_expression => exclusive_OR_expression
Line 141: logical_AND_expression => inclusive_OR_expression
Line 141: logical_OR_expression => logical_AND_expression
Line 141: conditional_expression => logical_OR_expression
Line 141: assignment_expression => conditional_expression
Line 141: expression => assignment_expression
Line 141: expression_opt => expression
Line 141: expression_opt => epsilon

Line 142: type_specifier => int
Line 142: declaration_specifiers_opt => epsilon 
Line 142: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 142: pointer_opt => epsilon
Line 142: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 142: declarator => pointer_opt direct_declarator
Line 142: init_declarator => declarator
Line 142: init_declarator_list => init_declarator
Line 142: init_declarator_list_opt => init_declarator_list
Line 142: declaration => declaration_specifiers init_declarator_list_opt ;
Line 142: expression_opt => epsilon
Line 142: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 142: postfix_expression => primary_expression
Line 142: unary_expression => postfix_expression
Line 142: unary_expression => ++ unary_expression
Line 142: cast_expression => unary_expression
Line 142: multiplicative_expression => cast_expression
Line 142: additive_expression => multiplicative_expression
Line 142: shift_expression => additive_expression
Line 142: relational_expression => shift_expression
Line 142: equality_expression => relational_expression
Line 142: AND_expression => equality_expression
Line 142: exclusive_OR_expression => AND_expression
Line 142: inclusive_OR_expression => exclusive_OR_expression
Line 142: logical_AND_expression => inclusive_OR_expression
Line 142: logical_OR_expression => logical_AND_expression
Line 142: conditional_expression => logical_OR_expression
Line 142: assignment_expression => conditional_expression
Line 142: expression => assignment_expression
Line 142: expression_opt => expression

Line 143: type_specifier => int
Line 143: declaration_specifiers_opt => epsilon 
Line 143: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 143: pointer_opt => epsilon
Line 143: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 143: declarator => pointer_opt direct_declarator
Line 143: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 143: postfix_expression => primary_expression
Line 143: unary_expression => postfix_expression
Line 143: cast_expression => unary_expression
Line 143: multiplicative_expression => cast_expression
Line 143: additive_expression => multiplicative_expression
Line 143: shift_expression => additive_expression
Line 143: relational_expression => shift_expression
Line 143: equality_expression => relational_expression
Line 143: AND_expression => equality_expression
Line 143: exclusive_OR_expression => AND_expression
Line 143: inclusive_OR_expression => exclusive_OR_expression
Line 143: logical_AND_expression => inclusive_OR_expression
Line 143: logical_OR_expression => logical_AND_expression
Line 143: conditional_expression => logical_OR_expression
Line 143: assignment_expression => conditional_expression
Line 143: initializer => assignment_expression
Line 143: init_declarator => declarator = initializer
Line 143: init_declarator_list => init_declarator
Line 143: pointer_opt => epsilon
Line 143: direct_declarator => IDENTIFIER
				IDENTIFIER = `j`
Line 143: declarator => pointer_opt direct_declarator
Line 143: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 143: postfix_expression => primary_expression
Line 143: unary_expression => postfix_expression
Line 143: cast_expression => unary_expression
Line 143: multiplicative_expression => cast_expression
Line 143: additive_expression => multiplicative_expression
Line 143: shift_expression => additive_expression
Line 143: relational_expression => shift_expression
Line 143: equality_expression => relational_expression
Line 143: AND_expression => equality_expression
Line 143: exclusive_OR_expression => AND_expression
Line 143: inclusive_OR_expression => exclusive_OR_expression
Line 143: logical_AND_expression => inclusive_OR_expression
Line 143: logical_OR_expression => logical_AND_expression
Line 143: conditional_expression => logical_OR_expression
Line 143: assignment_expression => conditional_expression
Line 143: initializer => assignment_expression
Line 143: init_declarator => declarator = initializer
Line 143: init_declarator_list => init_declarator_list , init_declarator
Line 143: init_declarator_list_opt => init_declarator_list
Line 143: declaration => declaration_specifiers init_declarator_list_opt ;
Line 143: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 143: postfix_expression => primary_expression
Line 143: unary_expression => postfix_expression
Line 143: cast_expression => unary_expression
Line 143: multiplicative_expression => cast_expression
Line 143: additive_expression => multiplicative_expression
Line 143: shift_expression => additive_expression
Line 143: relational_expression => shift_expression
Line 143: equality_expression => relational_expression
Line 143: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 143: postfix_expression => primary_expression
Line 143: unary_expression => postfix_expression
Line 143: cast_expression => unary_expression
Line 143: multiplicative_expression => cast_expression
Line 143: additive_expression => multiplicative_expression
Line 143: shift_expression => additive_expression
Line 143: relational_expression => shift_expression
Line 143: equality_expression => equality_expression != relational_expression
Line 143: AND_expression => equality_expression
Line 143: exclusive_OR_expression => AND_expression
Line 143: inclusive_OR_expression => exclusive_OR_expression
Line 143: logical_AND_expression => inclusive_OR_expression
Line 143: logical_OR_expression => logical_AND_expression
Line 143: conditional_expression => logical_OR_expression
Line 143: assignment_expression => conditional_expression
Line 143: expression => assignment_expression
Line 143: expression_opt => expression
Line 143: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 143: postfix_expression => primary_expression
Line 143: postfix_expression => postfix_expression ++
Line 143: unary_expression => postfix_expression
Line 143: cast_expression => unary_expression
Line 143: multiplicative_expression => cast_expression
Line 143: additive_expression => multiplicative_expression
Line 143: shift_expression => additive_expression
Line 143: relational_expression => shift_expression
Line 143: equality_expression => relational_expression
Line 143: AND_expression => equality_expression
Line 143: exclusive_OR_expression => AND_expression
Line 143: inclusive_OR_expression => exclusive_OR_expression
Line 143: logical_AND_expression => inclusive_OR_expression
Line 143: logical_OR_expression => logical_AND_expression
Line 143: conditional_expression => logical_OR_expression
Line 143: assignment_expression => conditional_expression
Line 143: expression => assignment_expression
Line 143: expression_opt => expression


Line 145: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 145: postfix_expression => primary_expression
Line 145: unary_expression => postfix_expression
Line 145: cast_expression => unary_expression
Line 145: multiplicative_expression => cast_expression
Line 145: additive_expression => multiplicative_expression
Line 145: shift_expression => additive_expression
Line 145: relational_expression => shift_expression
Line 145: equality_expression => relational_expression
Line 145: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 145: postfix_expression => primary_expression
Line 145: unary_expression => postfix_expression
Line 145: cast_expression => unary_expression
Line 145: multiplicative_expression => cast_expression
Line 145: additive_expression => multiplicative_expression
Line 145: shift_expression => additive_expression
Line 145: relational_expression => shift_expression
Line 145: equality_expression => equality_expression == relational_expression
Line 145: AND_expression => equality_expression
Line 145: exclusive_OR_expression => AND_expression
Line 145: inclusive_OR_expression => exclusive_OR_expression
Line 145: logical_AND_expression => inclusive_OR_expression
Line 145: logical_OR_expression => logical_AND_expression
Line 145: conditional_expression => logical_OR_expression
Line 145: assignment_expression => conditional_expression
Line 145: expression => assignment_expression

Line 146: jump_statement => continue ;
Line 146: statement => jump_statement

Line 147: selection_statement => if ( expression ) statement
Line 147: statement => selection_statement
Line 147: block_item => statement
Line 147: block_item_list => block_item
Line 147: block_item_list_opt => block_item_list
Line 147: compound_statement => { block_item_list_opt }
Line 147: statement => compound_statement
Line 147: iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
Line 147: statement => iteration_statement
Line 147: iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
Line 147: statement => iteration_statement
Line 147: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 147: statement => iteration_statement
Line 147: block_item => statement
Line 147: block_item_list => block_item_list block_item




Line 151: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 151: postfix_expression => primary_expression
Line 151: postfix_expression => postfix_expression ++
Line 151: unary_expression => postfix_expression
Line 151: cast_expression => unary_expression
Line 151: multiplicative_expression => cast_expression
Line 151: additive_expression => multiplicative_expression
Line 151: shift_expression => additive_expression
Line 151: relational_expression => shift_expression
Line 151: equality_expression => relational_expression
Line 151: AND_expression => equality_expression
Line 151: exclusive_OR_expression => AND_expression
Line 151: inclusive_OR_expression => exclusive_OR_expression
Line 151: logical_AND_expression => inclusive_OR_expression
Line 151: logical_OR_expression => logical_AND_expression
Line 151: conditional_expression => logical_OR_expression
Line 151: assignment_expression => conditional_expression
Line 151: expression => assignment_expression
Line 151: expression_opt => expression
Line 151: expression_statement => expression_opt ;
Line 151: statement => expression_statement
Line 151: block_item => statement
Line 151: block_item_list => block_item

Line 152: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 152: postfix_expression => primary_expression
Line 152: unary_expression => postfix_expression
Line 152: unary_expression => ++ unary_expression
Line 152: cast_expression => unary_expression
Line 152: multiplicative_expression => cast_expression
Line 152: additive_expression => multiplicative_expression
Line 152: shift_expression => additive_expression
Line 152: relational_expression => shift_expression
Line 152: equality_expression => relational_expression
Line 152: AND_expression => equality_expression
Line 152: exclusive_OR_expression => AND_expression
Line 152: inclusive_OR_expression => exclusive_OR_expression
Line 152: logical_AND_expression => inclusive_OR_expression
Line 152: logical_OR_expression => logical_AND_expression
Line 152: conditional_expression => logical_OR_expression
Line 152: assignment_expression => conditional_expression
Line 152: expression => assignment_expression
Line 152: expression_opt => expression
Line 152: expression_statement => expression_opt ;
Line 152: statement => expression_statement
Line 152: block_item => statement
Line 152: block_item_list => block_item_list block_item


Line 154: block_item_list_opt => block_item_list
Line 154: compound_statement => { block_item_list_opt }
Line 154: statement => compound_statement
Line 154: unary_operator => !
Line 154: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 154: postfix_expression => primary_expression
Line 154: unary_expression => postfix_expression
Line 154: cast_expression => unary_expression
Line 154: multiplicative_expression => cast_expression
Line 154: additive_expression => multiplicative_expression
Line 154: shift_expression => additive_expression
Line 154: relational_expression => shift_expression
Line 154: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 154: postfix_expression => primary_expression
Line 154: unary_expression => postfix_expression
Line 154: cast_expression => unary_expression
Line 154: multiplicative_expression => cast_expression
Line 154: additive_expression => multiplicative_expression
Line 154: shift_expression => additive_expression
Line 154: relational_expression => relational_expression >= shift_expression
Line 154: equality_expression => relational_expression
Line 154: AND_expression => equality_expression
Line 154: exclusive_OR_expression => AND_expression
Line 154: inclusive_OR_expression => exclusive_OR_expression
Line 154: logical_AND_expression => inclusive_OR_expression
Line 154: logical_OR_expression => logical_AND_expression
Line 154: conditional_expression => logical_OR_expression
Line 154: assignment_expression => conditional_expression
Line 154: expression => assignment_expression
Line 154: primary_expression => ( expression )
Line 154: postfix_expression => primary_expression
Line 154: unary_expression => postfix_expression
Line 154: cast_expression => unary_expression
Line 154: unary_expression => unary_operator cast_expression
Line 154: cast_expression => unary_expression
Line 154: multiplicative_expression => cast_expression
Line 154: additive_expression => multiplicative_expression
Line 154: shift_expression => additive_expression
Line 154: relational_expression => shift_expression
Line 154: equality_expression => relational_expression
Line 154: AND_expression => equality_expression
Line 154: exclusive_OR_expression => AND_expression
Line 154: inclusive_OR_expression => exclusive_OR_expression
Line 154: logical_AND_expression => inclusive_OR_expression
Line 154: logical_OR_expression => logical_AND_expression
Line 154: conditional_expression => logical_OR_expression
Line 154: assignment_expression => conditional_expression
Line 154: expression => assignment_expression
Line 154: iteration_statement => do statement while ( expression ) ;
Line 154: statement => iteration_statement
Line 154: block_item => statement
Line 154: block_item_list => block_item_list block_item


Line 156: type_specifier => int
Line 156: declaration_specifiers_opt => epsilon 
Line 156: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var1`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var2`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator_list , init_declarator
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var3`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator_list , init_declarator
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var4`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator_list , init_declarator
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var5`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator_list , init_declarator
Line 156: pointer_opt => epsilon
Line 156: direct_declarator => IDENTIFIER
				IDENTIFIER = `var6`
Line 156: declarator => pointer_opt direct_declarator
Line 156: init_declarator => declarator
Line 156: init_declarator_list => init_declarator_list , init_declarator
Line 156: init_declarator_list_opt => init_declarator_list
Line 156: declaration => declaration_specifiers init_declarator_list_opt ;
Line 156: block_item => declaration
Line 156: block_item_list => block_item_list block_item


Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: assignment_operator => =
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => cast_expression
Line 158: additive_expression => multiplicative_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => cast_expression
Line 158: additive_expression => additive_expression - multiplicative_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var3`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => cast_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => multiplicative_expression / cast_expression
Line 158: additive_expression => additive_expression + multiplicative_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var4`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => cast_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var5`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => multiplicative_expression * cast_expression
Line 158: primary_expression => IDENTIFIER
				IDENTIFIER = `var6`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => multiplicative_expression / cast_expression
Line 158: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `23`
Line 158: postfix_expression => primary_expression
Line 158: unary_expression => postfix_expression
Line 158: cast_expression => unary_expression
Line 158: multiplicative_expression => multiplicative_expression % cast_expression
Line 158: additive_expression => additive_expression - multiplicative_expression
Line 158: shift_expression => additive_expression
Line 158: relational_expression => shift_expression
Line 158: equality_expression => relational_expression
Line 158: AND_expression => equality_expression
Line 158: exclusive_OR_expression => AND_expression
Line 158: inclusive_OR_expression => exclusive_OR_expression
Line 158: logical_AND_expression => inclusive_OR_expression
Line 158: logical_OR_expression => logical_AND_expression
Line 158: conditional_expression => logical_OR_expression
Line 158: assignment_expression => conditional_expression
Line 158: assignment_expression => unary_expression assignment_operator assignment_expression
Line 158: expression => assignment_expression
Line 158: expression_opt => expression
Line 158: expression_statement => expression_opt ;
Line 158: statement => expression_statement
Line 158: block_item => statement
Line 158: block_item_list => block_item_list block_item

Line 159: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 159: postfix_expression => primary_expression
Line 159: unary_expression => postfix_expression
Line 159: assignment_operator => =
Line 159: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 159: postfix_expression => primary_expression
Line 159: unary_expression => postfix_expression
Line 159: cast_expression => unary_expression
Line 159: multiplicative_expression => cast_expression
Line 159: additive_expression => multiplicative_expression
Line 159: shift_expression => additive_expression
Line 159: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `6`
Line 159: postfix_expression => primary_expression
Line 159: unary_expression => postfix_expression
Line 159: cast_expression => unary_expression
Line 159: multiplicative_expression => cast_expression
Line 159: additive_expression => multiplicative_expression
Line 159: shift_expression => shift_expression << additive_expression
Line 159: relational_expression => shift_expression
Line 159: equality_expression => relational_expression
Line 159: AND_expression => equality_expression
Line 159: exclusive_OR_expression => AND_expression
Line 159: inclusive_OR_expression => exclusive_OR_expression
Line 159: logical_AND_expression => inclusive_OR_expression
Line 159: logical_OR_expression => logical_AND_expression
Line 159: conditional_expression => logical_OR_expression
Line 159: assignment_expression => conditional_expression
Line 159: assignment_expression => unary_expression assignment_operator assignment_expression
Line 159: expression => assignment_expression
Line 159: expression_opt => expression
Line 159: expression_statement => expression_opt ;
Line 159: statement => expression_statement
Line 159: block_item => statement
Line 159: block_item_list => block_item_list block_item

Line 160: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 160: postfix_expression => primary_expression
Line 160: unary_expression => postfix_expression
Line 160: assignment_operator => =
Line 160: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 160: postfix_expression => primary_expression
Line 160: unary_expression => postfix_expression
Line 160: cast_expression => unary_expression
Line 160: multiplicative_expression => cast_expression
Line 160: additive_expression => multiplicative_expression
Line 160: shift_expression => additive_expression
Line 160: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `8`
Line 160: postfix_expression => primary_expression
Line 160: unary_expression => postfix_expression
Line 160: cast_expression => unary_expression
Line 160: multiplicative_expression => cast_expression
Line 160: additive_expression => multiplicative_expression
Line 160: shift_expression => shift_expression >> additive_expression
Line 160: relational_expression => shift_expression
Line 160: equality_expression => relational_expression
Line 160: AND_expression => equality_expression
Line 160: exclusive_OR_expression => AND_expression
Line 160: inclusive_OR_expression => exclusive_OR_expression
Line 160: logical_AND_expression => inclusive_OR_expression
Line 160: logical_OR_expression => logical_AND_expression
Line 160: conditional_expression => logical_OR_expression
Line 160: assignment_expression => conditional_expression
Line 160: assignment_expression => unary_expression assignment_operator assignment_expression
Line 160: expression => assignment_expression
Line 160: expression_opt => expression
Line 160: expression_statement => expression_opt ;
Line 160: statement => expression_statement
Line 160: block_item => statement
Line 160: block_item_list => block_item_list block_item

Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: assignment_operator => =
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => equality_expression
Line 161: exclusive_OR_expression => AND_expression
Line 161: inclusive_OR_expression => exclusive_OR_expression
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var3`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => equality_expression
Line 161: exclusive_OR_expression => AND_expression
Line 161: inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var4`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => equality_expression
Line 161: exclusive_OR_expression => AND_expression
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var5`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => equality_expression
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var6`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => AND_expression & equality_expression
Line 161: exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
Line 161: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 161: postfix_expression => primary_expression
Line 161: unary_expression => postfix_expression
Line 161: cast_expression => unary_expression
Line 161: multiplicative_expression => cast_expression
Line 161: additive_expression => multiplicative_expression
Line 161: shift_expression => additive_expression
Line 161: relational_expression => shift_expression
Line 161: equality_expression => relational_expression
Line 161: AND_expression => equality_expression
Line 161: exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
Line 161: inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
Line 161: logical_AND_expression => inclusive_OR_expression
Line 161: logical_OR_expression => logical_AND_expression
Line 161: conditional_expression => logical_OR_expression
Line 161: assignment_expression => conditional_expression
Line 161: assignment_expression => unary_expression assignment_operator assignment_expression
Line 161: expression => assignment_expression
Line 161: expression_opt => expression
Line 161: expression_statement => expression_opt ;
Line 161: statement => expression_statement
Line 161: block_item => statement
Line 161: block_item_list => block_item_list block_item


Line 163: primary_expression => IDENTIFIER
				IDENTIFIER = `function1`
Line 163: postfix_expression => primary_expression
Line 163: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 163: postfix_expression => primary_expression
Line 163: unary_expression => postfix_expression
Line 163: cast_expression => unary_expression
Line 163: multiplicative_expression => cast_expression
Line 163: additive_expression => multiplicative_expression
Line 163: shift_expression => additive_expression
Line 163: relational_expression => shift_expression
Line 163: equality_expression => relational_expression
Line 163: AND_expression => equality_expression
Line 163: exclusive_OR_expression => AND_expression
Line 163: inclusive_OR_expression => exclusive_OR_expression
Line 163: logical_AND_expression => inclusive_OR_expression
Line 163: logical_OR_expression => logical_AND_expression
Line 163: conditional_expression => logical_OR_expression
Line 163: assignment_expression => conditional_expression
Line 163: argument_expression_list => assignment_expression
Line 163: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 163: postfix_expression => primary_expression
Line 163: unary_expression => postfix_expression
Line 163: cast_expression => unary_expression
Line 163: multiplicative_expression => cast_expression
Line 163: additive_expression => multiplicative_expression
Line 163: shift_expression => additive_expression
Line 163: relational_expression => shift_expression
Line 163: equality_expression => relational_expression
Line 163: AND_expression => equality_expression
Line 163: exclusive_OR_expression => AND_expression
Line 163: inclusive_OR_expression => exclusive_OR_expression
Line 163: logical_AND_expression => inclusive_OR_expression
Line 163: logical_OR_expression => logical_AND_expression
Line 163: conditional_expression => logical_OR_expression
Line 163: assignment_expression => conditional_expression
Line 163: argument_expression_list => argument_expression_list , assignment_expression
Line 163: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 163: postfix_expression => primary_expression
Line 163: unary_expression => postfix_expression
Line 163: cast_expression => unary_expression
Line 163: multiplicative_expression => cast_expression
Line 163: additive_expression => multiplicative_expression
Line 163: shift_expression => additive_expression
Line 163: relational_expression => shift_expression
Line 163: equality_expression => relational_expression
Line 163: AND_expression => equality_expression
Line 163: exclusive_OR_expression => AND_expression
Line 163: inclusive_OR_expression => exclusive_OR_expression
Line 163: logical_AND_expression => inclusive_OR_expression
Line 163: logical_OR_expression => logical_AND_expression
Line 163: conditional_expression => logical_OR_expression
Line 163: assignment_expression => conditional_expression
Line 163: argument_expression_list => argument_expression_list , assignment_expression
Line 163: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 163: postfix_expression => primary_expression
Line 163: unary_expression => postfix_expression
Line 163: cast_expression => unary_expression
Line 163: multiplicative_expression => cast_expression
Line 163: additive_expression => multiplicative_expression
Line 163: shift_expression => additive_expression
Line 163: relational_expression => shift_expression
Line 163: equality_expression => relational_expression
Line 163: AND_expression => equality_expression
Line 163: exclusive_OR_expression => AND_expression
Line 163: inclusive_OR_expression => exclusive_OR_expression
Line 163: logical_AND_expression => inclusive_OR_expression
Line 163: logical_OR_expression => logical_AND_expression
Line 163: conditional_expression => logical_OR_expression
Line 163: assignment_expression => conditional_expression
Line 163: argument_expression_list => argument_expression_list , assignment_expression
Line 163: argument_expression_list_opt => argument_expression_list
Line 163: postfix_expression => postfix_expression ( argument_expression_list_opt )
Line 163: unary_expression => postfix_expression
Line 163: cast_expression => unary_expression
Line 163: multiplicative_expression => cast_expression
Line 163: additive_expression => multiplicative_expression
Line 163: shift_expression => additive_expression
Line 163: relational_expression => shift_expression
Line 163: equality_expression => relational_expression
Line 163: AND_expression => equality_expression
Line 163: exclusive_OR_expression => AND_expression
Line 163: inclusive_OR_expression => exclusive_OR_expression
Line 163: logical_AND_expression => inclusive_OR_expression
Line 163: logical_OR_expression => logical_AND_expression
Line 163: conditional_expression => logical_OR_expression
Line 163: assignment_expression => conditional_expression
Line 163: expression => assignment_expression
Line 163: expression_opt => expression
Line 163: expression_statement => expression_opt ;
Line 163: statement => expression_statement
Line 163: block_item => statement
Line 163: block_item_list => block_item_list block_item



Line 166: primary_expression => IDENTIFIER
				IDENTIFIER = `ms1`
Line 166: postfix_expression => primary_expression
Line 166: postfix_expression => postfix_expression . IDENTIFIER
				IDENTIFIER = `a`
Line 166: unary_expression => postfix_expression
Line 166: assignment_operator => =
Line 166: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 166: postfix_expression => primary_expression
Line 166: unary_expression => postfix_expression
Line 166: cast_expression => unary_expression
Line 166: multiplicative_expression => cast_expression
Line 166: additive_expression => multiplicative_expression
Line 166: shift_expression => additive_expression
Line 166: relational_expression => shift_expression
Line 166: equality_expression => relational_expression
Line 166: AND_expression => equality_expression
Line 166: exclusive_OR_expression => AND_expression
Line 166: inclusive_OR_expression => exclusive_OR_expression
Line 166: logical_AND_expression => inclusive_OR_expression
Line 166: logical_OR_expression => logical_AND_expression
Line 166: conditional_expression => logical_OR_expression
Line 166: assignment_expression => conditional_expression
Line 166: assignment_expression => unary_expression assignment_operator assignment_expression
Line 166: expression => assignment_expression
Line 166: expression_opt => expression
Line 166: expression_statement => expression_opt ;
Line 166: statement => expression_statement
Line 166: block_item => statement
Line 166: block_item_list => block_item_list block_item

Line 167: primary_expression => IDENTIFIER
				IDENTIFIER = `ms2`
Line 167: postfix_expression => primary_expression
Line 167: postfix_expression => postfix_expression -> IDENTIFIER
				IDENTIFIER = `a`
Line 167: unary_expression => postfix_expression
Line 167: assignment_operator => =
Line 167: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 167: postfix_expression => primary_expression
Line 167: unary_expression => postfix_expression
Line 167: cast_expression => unary_expression
Line 167: multiplicative_expression => cast_expression
Line 167: additive_expression => multiplicative_expression
Line 167: shift_expression => additive_expression
Line 167: relational_expression => shift_expression
Line 167: equality_expression => relational_expression
Line 167: AND_expression => equality_expression
Line 167: exclusive_OR_expression => AND_expression
Line 167: inclusive_OR_expression => exclusive_OR_expression
Line 167: logical_AND_expression => inclusive_OR_expression
Line 167: logical_OR_expression => logical_AND_expression
Line 167: conditional_expression => logical_OR_expression
Line 167: assignment_expression => conditional_expression
Line 167: assignment_expression => unary_expression assignment_operator assignment_expression
Line 167: expression => assignment_expression
Line 167: expression_opt => expression
Line 167: expression_statement => expression_opt ;
Line 167: statement => expression_statement
Line 167: block_item => statement
Line 167: block_item_list => block_item_list block_item


Line 169: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 169: postfix_expression => primary_expression
Line 169: unary_expression => postfix_expression
Line 169: cast_expression => unary_expression
Line 169: multiplicative_expression => cast_expression
Line 169: additive_expression => multiplicative_expression
Line 169: shift_expression => additive_expression
Line 169: relational_expression => shift_expression
Line 169: equality_expression => relational_expression
Line 169: AND_expression => equality_expression
Line 169: exclusive_OR_expression => AND_expression
Line 169: inclusive_OR_expression => exclusive_OR_expression
Line 169: logical_AND_expression => inclusive_OR_expression
Line 169: logical_OR_expression => logical_AND_expression
Line 169: conditional_expression => logical_OR_expression
Line 169: assignment_expression => conditional_expression
Line 169: expression => assignment_expression
Line 169: expression_opt => expression
Line 169: jump_statement => return expression_opt ;
Line 169: statement => jump_statement
Line 169: block_item => statement
Line 169: block_item_list => block_item_list block_item

Line 170: block_item_list_opt => block_item_list
Line 170: compound_statement => { block_item_list_opt }
Line 170: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 170: external_declaration => function_definition
Line 170: translation_unit => translation_unit external_declaration

