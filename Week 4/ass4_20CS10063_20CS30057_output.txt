

Line 6: function_specifier => inline
Line 6: type_specifier => void
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: declaration_specifiers_opt => declaration_specifiers
Line 6: declaration_specifiers => function_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `function1`
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: type_qualifier => restrict
Line 6: type_qualifier_list => type_qualifier
Line 6: type_qualifier_list_opt => type_qualifier_list
Line 6: pointer => * type_qualifier_list_opt
Line 6: pointer_opt => pointer
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `p1`
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_declaration
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `c`
Line 6: type_qualifier_list_opt => epsilon
Line 6: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `9`
Line 6: postfix_expression => primary_expression
Line 6: unary_expression => postfix_expression
Line 6: cast_expression => unary_expression
Line 6: multiplicative_expression => cast_expression
Line 6: additive_expression => multiplicative_expression
Line 6: shift_expression => additive_expression
Line 6: relational_expression => shift_expression
Line 6: equality_expression => relational_expression
Line 6: AND_expression => equality_expression
Line 6: exclusive_OR_expression => AND_expression
Line 6: inclusive_OR_expression => exclusive_OR_expression
Line 6: logical_AND_expression => inclusive_OR_expression
Line 6: logical_OR_expression => logical_AND_expression
Line 6: conditional_expression => logical_OR_expression
Line 6: assignment_expression => conditional_expression
Line 6: direct_declarator => direct_declarator [ static type_qualifier_list_opt assignment_expression ]
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: type_qualifier => volatile
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: declaration_specifiers_opt => declaration_specifiers
Line 6: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `p3`
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: type_specifier => int
Line 6: declaration_specifiers_opt => epsilon 
Line 6: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 6: pointer_opt => epsilon
Line 6: direct_declarator => IDENTIFIER
				IDENTIFIER = `e`
Line 6: type_qualifier => const
Line 6: type_qualifier_list => type_qualifier
Line 6: type_qualifier_list_opt => type_qualifier_list
Line 6: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 6: postfix_expression => primary_expression
Line 6: unary_expression => postfix_expression
Line 6: cast_expression => unary_expression
Line 6: multiplicative_expression => cast_expression
Line 6: additive_expression => multiplicative_expression
Line 6: shift_expression => additive_expression
Line 6: relational_expression => shift_expression
Line 6: equality_expression => relational_expression
Line 6: AND_expression => equality_expression
Line 6: exclusive_OR_expression => AND_expression
Line 6: inclusive_OR_expression => exclusive_OR_expression
Line 6: logical_AND_expression => inclusive_OR_expression
Line 6: logical_OR_expression => logical_AND_expression
Line 6: conditional_expression => logical_OR_expression
Line 6: assignment_expression => conditional_expression
Line 6: assignment_expression_opt => assignment_expression
Line 6: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 6: declarator => pointer_opt direct_declarator
Line 6: parameter_declaration => declaration_specifiers declarator
Line 6: parameter_list => parameter_list , parameter_declaration
Line 6: parameter_type_list => parameter_list
Line 6: direct_declarator => direct_declarator ( parameter_type_list )

Line 7: declarator => pointer_opt direct_declarator
Line 7: declaration_list_opt => epsilon

Line 8: storage_class_specifier => auto
Line 8: type_specifier => int
Line 8: declaration_specifiers_opt => epsilon 
Line 8: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 8: declaration_specifiers_opt => declaration_specifiers
Line 8: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 8: pointer_opt => epsilon
Line 8: direct_declarator => IDENTIFIER
				IDENTIFIER = `a`
Line 8: declarator => pointer_opt direct_declarator
Line 8: init_declarator => declarator
Line 8: init_declarator_list => init_declarator
Line 8: init_declarator_list_opt => init_declarator_list
Line 8: declaration => declaration_specifiers init_declarator_list_opt ;
Line 8: block_item => declaration
Line 8: block_item_list => block_item

Line 9: storage_class_specifier => register
Line 9: type_specifier => int
Line 9: declaration_specifiers_opt => epsilon 
Line 9: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 9: declaration_specifiers_opt => declaration_specifiers
Line 9: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 9: pointer_opt => epsilon
Line 9: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 9: declarator => pointer_opt direct_declarator
Line 9: init_declarator => declarator
Line 9: init_declarator_list => init_declarator
Line 9: init_declarator_list_opt => init_declarator_list
Line 9: declaration => declaration_specifiers init_declarator_list_opt ;
Line 9: block_item => declaration
Line 9: block_item_list => block_item_list block_item

Line 10: storage_class_specifier => extern
Line 10: type_specifier => int
Line 10: declaration_specifiers_opt => epsilon 
Line 10: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 10: declaration_specifiers_opt => declaration_specifiers
Line 10: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 10: pointer_opt => epsilon
Line 10: direct_declarator => IDENTIFIER
				IDENTIFIER = `c`
Line 10: declarator => pointer_opt direct_declarator
Line 10: init_declarator => declarator
Line 10: init_declarator_list => init_declarator
Line 10: init_declarator_list_opt => init_declarator_list
Line 10: declaration => declaration_specifiers init_declarator_list_opt ;
Line 10: block_item => declaration
Line 10: block_item_list => block_item_list block_item

Line 11: storage_class_specifier => static
Line 11: type_specifier => int
Line 11: declaration_specifiers_opt => epsilon 
Line 11: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 11: declaration_specifiers_opt => declaration_specifiers
Line 11: declaration_specifiers => storage_class_specifier declaration_specifiers_opt
Line 11: pointer_opt => epsilon
Line 11: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 11: declarator => pointer_opt direct_declarator
Line 11: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 11: postfix_expression => primary_expression
Line 11: unary_expression => postfix_expression
Line 11: cast_expression => unary_expression
Line 11: multiplicative_expression => cast_expression
Line 11: additive_expression => multiplicative_expression
Line 11: shift_expression => additive_expression
Line 11: relational_expression => shift_expression
Line 11: equality_expression => relational_expression
Line 11: AND_expression => equality_expression
Line 11: exclusive_OR_expression => AND_expression
Line 11: inclusive_OR_expression => exclusive_OR_expression
Line 11: logical_AND_expression => inclusive_OR_expression
Line 11: logical_OR_expression => logical_AND_expression
Line 11: conditional_expression => logical_OR_expression
Line 11: assignment_expression => conditional_expression
Line 11: initializer => assignment_expression
Line 11: init_declarator => declarator = initializer
Line 11: init_declarator_list => init_declarator
Line 11: init_declarator_list_opt => init_declarator_list
Line 11: declaration => declaration_specifiers init_declarator_list_opt ;
Line 11: block_item => declaration
Line 11: block_item_list => block_item_list block_item

Line 12: block_item_list_opt => block_item_list
Line 12: compound_statement => { block_item_list_opt }
Line 12: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 12: external_declaration => function_definition
Line 12: translation_unit => external_declaration


Line 14: type_qualifier => const
Line 14: type_specifier => char
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: declaration_specifiers_opt => declaration_specifiers
Line 14: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 14: type_qualifier_list_opt => epsilon
Line 14: pointer => * type_qualifier_list_opt
Line 14: pointer_opt => pointer
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `hello2`
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 14: type_qualifier => const
Line 14: type_qualifier_list => type_qualifier
Line 14: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `8`
Line 14: postfix_expression => primary_expression
Line 14: unary_expression => postfix_expression
Line 14: cast_expression => unary_expression
Line 14: multiplicative_expression => cast_expression
Line 14: additive_expression => multiplicative_expression
Line 14: shift_expression => additive_expression
Line 14: relational_expression => shift_expression
Line 14: equality_expression => relational_expression
Line 14: AND_expression => equality_expression
Line 14: exclusive_OR_expression => AND_expression
Line 14: inclusive_OR_expression => exclusive_OR_expression
Line 14: logical_AND_expression => inclusive_OR_expression
Line 14: logical_OR_expression => logical_AND_expression
Line 14: conditional_expression => logical_OR_expression
Line 14: assignment_expression => conditional_expression
Line 14: direct_declarator => direct_declarator [ type_qualifier_list static assignment_expression ]
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_declaration
Line 14: type_qualifier => const
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: declaration_specifiers_opt => declaration_specifiers
Line 14: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `p2`
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_list , parameter_declaration
Line 14: type_specifier => int
Line 14: declaration_specifiers_opt => epsilon 
Line 14: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 14: pointer_opt => epsilon
Line 14: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 14: type_qualifier_list_opt => epsilon
Line 14: assignment_expression_opt => epsilon
Line 14: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 14: declarator => pointer_opt direct_declarator
Line 14: parameter_declaration => declaration_specifiers declarator
Line 14: parameter_list => parameter_list , parameter_declaration
Line 14: parameter_type_list => parameter_list , ...
Line 14: direct_declarator => direct_declarator ( parameter_type_list )
Line 14: declarator => pointer_opt direct_declarator
Line 14: init_declarator => declarator
Line 14: init_declarator_list => init_declarator
Line 14: init_declarator_list_opt => init_declarator_list
Line 14: declaration => declaration_specifiers init_declarator_list_opt ;
Line 14: external_declaration => declaration
Line 14: translation_unit => translation_unit external_declaration


Line 16: function_specifier => inline
Line 16: type_qualifier => const
Line 16: type_specifier => long
Line 16: type_specifier => unsigned
Line 16: type_specifier => int
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => function_specifier declaration_specifiers_opt
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier_list_opt => epsilon
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `bye_bye`
Line 16: type_qualifier => const
Line 16: type_specifier => char
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: declaration_specifiers_opt => declaration_specifiers
Line 16: declaration_specifiers => type_qualifier declaration_specifiers_opt
Line 16: type_qualifier => restrict
Line 16: type_qualifier_list => type_qualifier
Line 16: type_qualifier_list_opt => type_qualifier_list
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `rec`
Line 16: declarator => pointer_opt direct_declarator
Line 16: parameter_declaration => declaration_specifiers declarator
Line 16: parameter_list => parameter_declaration
Line 16: type_specifier => char
Line 16: declaration_specifiers_opt => epsilon 
Line 16: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 16: type_qualifier_list_opt => epsilon
Line 16: type_qualifier => restrict
Line 16: type_qualifier_list => type_qualifier
Line 16: type_qualifier_list_opt => type_qualifier_list
Line 16: pointer => * type_qualifier_list_opt
Line 16: pointer => * type_qualifier_list_opt pointer
Line 16: pointer_opt => pointer
Line 16: direct_declarator => IDENTIFIER
				IDENTIFIER = `send`
Line 16: declarator => pointer_opt direct_declarator
Line 16: parameter_declaration => declaration_specifiers declarator
Line 16: parameter_list => parameter_list , parameter_declaration
Line 16: parameter_type_list => parameter_list
Line 16: direct_declarator => direct_declarator ( parameter_type_list )
Line 16: declarator => pointer_opt direct_declarator
Line 16: init_declarator => declarator
Line 16: init_declarator_list => init_declarator
Line 16: init_declarator_list_opt => init_declarator_list
Line 16: declaration => declaration_specifiers init_declarator_list_opt ;
Line 16: external_declaration => declaration
Line 16: translation_unit => translation_unit external_declaration


Line 18: enum_specifier => enum IDENTIFIER
				IDENTIFIER = `e1`
Line 18: type_specifier => enum_specifier
Line 18: declaration_specifiers_opt => epsilon 
Line 18: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 18: init_declarator_list_opt => epsilon
Line 18: declaration => declaration_specifiers init_declarator_list_opt ;
Line 18: external_declaration => declaration
Line 18: translation_unit => translation_unit external_declaration



Line 21: identifier_opt => IDENTIFIER
				IDENTIFIER = `e2`

Line 22: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION1`
Line 22: enumerator_list => enumerator


Line 24: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION2`
Line 24: enumerator_list => enumerator_list , enumerator
Line 24: enum_specifier => enum identifier_opt { enumerator_list }
Line 24: type_specifier => enum_specifier
Line 24: declaration_specifiers_opt => epsilon 
Line 24: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 24: init_declarator_list_opt => epsilon
Line 24: declaration => declaration_specifiers init_declarator_list_opt ;
Line 24: external_declaration => declaration
Line 24: translation_unit => translation_unit external_declaration



Line 27: identifier_opt => epsilon

Line 28: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `100`
Line 28: postfix_expression => primary_expression
Line 28: unary_expression => postfix_expression
Line 28: cast_expression => unary_expression
Line 28: multiplicative_expression => cast_expression
Line 28: additive_expression => multiplicative_expression
Line 28: shift_expression => additive_expression
Line 28: relational_expression => shift_expression
Line 28: equality_expression => relational_expression
Line 28: AND_expression => equality_expression
Line 28: exclusive_OR_expression => AND_expression
Line 28: inclusive_OR_expression => exclusive_OR_expression
Line 28: logical_AND_expression => inclusive_OR_expression
Line 28: logical_OR_expression => logical_AND_expression
Line 28: conditional_expression => logical_OR_expression
Line 28: constant_expression => conditional_expression
Line 28: enumerator => ENUMERATION_CONSTANT = constant_expression
				ENUMERATION_CONSTANT = `POSITION3`
Line 28: enumerator_list => enumerator

Line 29: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION4`
Line 29: enumerator_list => enumerator_list , enumerator

Line 30: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION5`
Line 30: enumerator_list => enumerator_list , enumerator

Line 31: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION6`
Line 31: enumerator_list => enumerator_list , enumerator

Line 32: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION7`
Line 32: enumerator_list => enumerator_list , enumerator

Line 33: enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = `POSITION8`
Line 33: enumerator_list => enumerator_list , enumerator

Line 34: enum_specifier => enum identifier_opt { enumerator_list , }
Line 34: type_specifier => enum_specifier
Line 34: declaration_specifiers_opt => epsilon 
Line 34: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 34: pointer_opt => epsilon
Line 34: direct_declarator => IDENTIFIER
				IDENTIFIER = `e3`
Line 34: declarator => pointer_opt direct_declarator
Line 34: init_declarator => declarator
Line 34: init_declarator_list => init_declarator
Line 34: init_declarator_list_opt => init_declarator_list
Line 34: declaration => declaration_specifiers init_declarator_list_opt ;
Line 34: external_declaration => declaration
Line 34: translation_unit => translation_unit external_declaration


Line 36: type_specifier => signed
Line 36: declaration_specifiers_opt => epsilon 
Line 36: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 36: pointer_opt => epsilon
Line 36: direct_declarator => IDENTIFIER
				IDENTIFIER = `main`
Line 36: identifier_list_opt => epsilon
Line 36: direct_declarator => direct_declarator ( identifier_list_opt )

Line 37: declarator => pointer_opt direct_declarator
Line 37: declaration_list_opt => epsilon

Line 38: type_specifier => int
Line 38: declaration_specifiers_opt => epsilon 
Line 38: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 38: pointer_opt => epsilon
Line 38: direct_declarator => IDENTIFIER
				IDENTIFIER = `a`
Line 38: type_qualifier_list_opt => epsilon
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `6`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: assignment_expression_opt => assignment_expression
Line 38: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 38: declarator => pointer_opt direct_declarator
Line 38: designation_opt => epsilon
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: initializer => assignment_expression
Line 38: initializer_list => designation_opt initializer
Line 38: designation_opt => epsilon
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: initializer => assignment_expression
Line 38: initializer_list => initializer_list , designation_opt initializer
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: constant_expression => conditional_expression
Line 38: designator => [ constant_expression ]
Line 38: designator_list => designator
Line 38: designation => designator_list =
Line 38: designation_opt => designation
Line 38: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 38: postfix_expression => primary_expression
Line 38: unary_expression => postfix_expression
Line 38: cast_expression => unary_expression
Line 38: multiplicative_expression => cast_expression
Line 38: additive_expression => multiplicative_expression
Line 38: shift_expression => additive_expression
Line 38: relational_expression => shift_expression
Line 38: equality_expression => relational_expression
Line 38: AND_expression => equality_expression
Line 38: exclusive_OR_expression => AND_expression
Line 38: inclusive_OR_expression => exclusive_OR_expression
Line 38: logical_AND_expression => inclusive_OR_expression
Line 38: logical_OR_expression => logical_AND_expression
Line 38: conditional_expression => logical_OR_expression
Line 38: assignment_expression => conditional_expression
Line 38: initializer => assignment_expression
Line 38: initializer_list => initializer_list , designation_opt initializer
Line 38: initializer => { initializer_list }
Line 38: init_declarator => declarator = initializer
Line 38: init_declarator_list => init_declarator
Line 38: init_declarator_list_opt => init_declarator_list
Line 38: declaration => declaration_specifiers init_declarator_list_opt ;
Line 38: block_item => declaration
Line 38: block_item_list => block_item

Line 39: type_specifier => char
Line 39: declaration_specifiers_opt => epsilon 
Line 39: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 39: pointer_opt => epsilon
Line 39: direct_declarator => IDENTIFIER
				IDENTIFIER = `b`
Line 39: type_qualifier_list_opt => epsilon
Line 39: assignment_expression_opt => epsilon
Line 39: direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
Line 39: declarator => pointer_opt direct_declarator
Line 39: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"hello world"`
Line 39: postfix_expression => primary_expression
Line 39: unary_expression => postfix_expression
Line 39: cast_expression => unary_expression
Line 39: multiplicative_expression => cast_expression
Line 39: additive_expression => multiplicative_expression
Line 39: shift_expression => additive_expression
Line 39: relational_expression => shift_expression
Line 39: equality_expression => relational_expression
Line 39: AND_expression => equality_expression
Line 39: exclusive_OR_expression => AND_expression
Line 39: inclusive_OR_expression => exclusive_OR_expression
Line 39: logical_AND_expression => inclusive_OR_expression
Line 39: logical_OR_expression => logical_AND_expression
Line 39: conditional_expression => logical_OR_expression
Line 39: assignment_expression => conditional_expression
Line 39: initializer => assignment_expression
Line 39: init_declarator => declarator = initializer
Line 39: init_declarator_list => init_declarator
Line 39: init_declarator_list_opt => init_declarator_list
Line 39: declaration => declaration_specifiers init_declarator_list_opt ;
Line 39: block_item => declaration
Line 39: block_item_list => block_item_list block_item

Line 40: type_specifier => char
Line 40: declaration_specifiers_opt => epsilon 
Line 40: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 40: pointer_opt => epsilon
Line 40: direct_declarator => IDENTIFIER
				IDENTIFIER = `c1`
Line 40: declarator => pointer_opt direct_declarator
Line 40: primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = `'c'`
Line 40: postfix_expression => primary_expression
Line 40: unary_expression => postfix_expression
Line 40: cast_expression => unary_expression
Line 40: multiplicative_expression => cast_expression
Line 40: additive_expression => multiplicative_expression
Line 40: shift_expression => additive_expression
Line 40: relational_expression => shift_expression
Line 40: equality_expression => relational_expression
Line 40: AND_expression => equality_expression
Line 40: exclusive_OR_expression => AND_expression
Line 40: inclusive_OR_expression => exclusive_OR_expression
Line 40: logical_AND_expression => inclusive_OR_expression
Line 40: logical_OR_expression => logical_AND_expression
Line 40: conditional_expression => logical_OR_expression
Line 40: assignment_expression => conditional_expression
Line 40: initializer => assignment_expression
Line 40: init_declarator => declarator = initializer
Line 40: init_declarator_list => init_declarator
Line 40: init_declarator_list_opt => init_declarator_list
Line 40: declaration => declaration_specifiers init_declarator_list_opt ;
Line 40: block_item => declaration
Line 40: block_item_list => block_item_list block_item

Line 41: type_specifier => char
Line 41: declaration_specifiers_opt => epsilon 
Line 41: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 41: type_qualifier_list_opt => epsilon
Line 41: pointer => * type_qualifier_list_opt
Line 41: pointer_opt => pointer
Line 41: direct_declarator => IDENTIFIER
				IDENTIFIER = `c2`
Line 41: declarator => pointer_opt direct_declarator
Line 41: unary_operator => &
Line 41: primary_expression => IDENTIFIER
				IDENTIFIER = `c1`
Line 41: postfix_expression => primary_expression
Line 41: unary_expression => postfix_expression
Line 41: cast_expression => unary_expression
Line 41: unary_expression => unary_operator cast_expression
Line 41: cast_expression => unary_expression
Line 41: multiplicative_expression => cast_expression
Line 41: additive_expression => multiplicative_expression
Line 41: shift_expression => additive_expression
Line 41: relational_expression => shift_expression
Line 41: equality_expression => relational_expression
Line 41: AND_expression => equality_expression
Line 41: exclusive_OR_expression => AND_expression
Line 41: inclusive_OR_expression => exclusive_OR_expression
Line 41: logical_AND_expression => inclusive_OR_expression
Line 41: logical_OR_expression => logical_AND_expression
Line 41: conditional_expression => logical_OR_expression
Line 41: assignment_expression => conditional_expression
Line 41: initializer => assignment_expression
Line 41: init_declarator => declarator = initializer
Line 41: init_declarator_list => init_declarator
Line 41: init_declarator_list_opt => init_declarator_list
Line 41: declaration => declaration_specifiers init_declarator_list_opt ;
Line 41: block_item => declaration
Line 41: block_item_list => block_item_list block_item

Line 42: unary_operator => *
Line 42: primary_expression => IDENTIFIER
				IDENTIFIER = `c2`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: unary_expression => unary_operator cast_expression
Line 42: assignment_operator => =
Line 42: primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = `'a'`
Line 42: postfix_expression => primary_expression
Line 42: unary_expression => postfix_expression
Line 42: cast_expression => unary_expression
Line 42: multiplicative_expression => cast_expression
Line 42: additive_expression => multiplicative_expression
Line 42: shift_expression => additive_expression
Line 42: relational_expression => shift_expression
Line 42: equality_expression => relational_expression
Line 42: AND_expression => equality_expression
Line 42: exclusive_OR_expression => AND_expression
Line 42: inclusive_OR_expression => exclusive_OR_expression
Line 42: logical_AND_expression => inclusive_OR_expression
Line 42: logical_OR_expression => logical_AND_expression
Line 42: conditional_expression => logical_OR_expression
Line 42: assignment_expression => conditional_expression
Line 42: assignment_expression => unary_expression assignment_operator assignment_expression
Line 42: expression => assignment_expression
Line 42: expression_opt => expression
Line 42: expression_statement => expression_opt ;
Line 42: statement => expression_statement
Line 42: block_item => statement
Line 42: block_item_list => block_item_list block_item

Line 43: type_specifier => char
Line 43: declaration_specifiers_opt => epsilon 
Line 43: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 43: type_qualifier_list_opt => epsilon
Line 43: type_qualifier_list_opt => epsilon
Line 43: pointer => * type_qualifier_list_opt
Line 43: pointer => * type_qualifier_list_opt pointer
Line 43: pointer_opt => pointer
Line 43: direct_declarator => IDENTIFIER
				IDENTIFIER = `d`
Line 43: declarator => pointer_opt direct_declarator
Line 43: type_specifier => char
Line 43: specifier_qualifier_list_opt => epsilon
Line 43: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 43: type_name => specifier_qualifier_list
Line 43: designation_opt => epsilon
Line 43: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"a"`
Line 43: postfix_expression => primary_expression
Line 43: unary_expression => postfix_expression
Line 43: cast_expression => unary_expression
Line 43: multiplicative_expression => cast_expression
Line 43: additive_expression => multiplicative_expression
Line 43: shift_expression => additive_expression
Line 43: relational_expression => shift_expression
Line 43: equality_expression => relational_expression
Line 43: AND_expression => equality_expression
Line 43: exclusive_OR_expression => AND_expression
Line 43: inclusive_OR_expression => exclusive_OR_expression
Line 43: logical_AND_expression => inclusive_OR_expression
Line 43: logical_OR_expression => logical_AND_expression
Line 43: conditional_expression => logical_OR_expression
Line 43: assignment_expression => conditional_expression
Line 43: initializer => assignment_expression
Line 43: initializer_list => designation_opt initializer
Line 43: designation_opt => epsilon
Line 43: primary_expression => IDENTIFIER
				IDENTIFIER = `b`
Line 43: postfix_expression => primary_expression
Line 43: unary_expression => postfix_expression
Line 43: cast_expression => unary_expression
Line 43: multiplicative_expression => cast_expression
Line 43: additive_expression => multiplicative_expression
Line 43: shift_expression => additive_expression
Line 43: relational_expression => shift_expression
Line 43: equality_expression => relational_expression
Line 43: AND_expression => equality_expression
Line 43: exclusive_OR_expression => AND_expression
Line 43: inclusive_OR_expression => exclusive_OR_expression
Line 43: logical_AND_expression => inclusive_OR_expression
Line 43: logical_OR_expression => logical_AND_expression
Line 43: conditional_expression => logical_OR_expression
Line 43: assignment_expression => conditional_expression
Line 43: initializer => assignment_expression
Line 43: initializer_list => initializer_list , designation_opt initializer
Line 43: designation_opt => epsilon
Line 43: primary_expression => STRING_LITERAL
				STRING_LITERAL = `"abc"`
Line 43: postfix_expression => primary_expression
Line 43: unary_expression => postfix_expression
Line 43: cast_expression => unary_expression
Line 43: multiplicative_expression => cast_expression
Line 43: additive_expression => multiplicative_expression
Line 43: shift_expression => additive_expression
Line 43: relational_expression => shift_expression
Line 43: equality_expression => relational_expression
Line 43: AND_expression => equality_expression
Line 43: exclusive_OR_expression => AND_expression
Line 43: inclusive_OR_expression => exclusive_OR_expression
Line 43: logical_AND_expression => inclusive_OR_expression
Line 43: logical_OR_expression => logical_AND_expression
Line 43: conditional_expression => logical_OR_expression
Line 43: assignment_expression => conditional_expression
Line 43: initializer => assignment_expression
Line 43: initializer_list => initializer_list , designation_opt initializer
Line 43: postfix_expression => ( type_name ) { initializer_list }
Line 43: unary_expression => postfix_expression
Line 43: cast_expression => unary_expression
Line 43: multiplicative_expression => cast_expression
Line 43: additive_expression => multiplicative_expression
Line 43: shift_expression => additive_expression
Line 43: relational_expression => shift_expression
Line 43: equality_expression => relational_expression
Line 43: AND_expression => equality_expression
Line 43: exclusive_OR_expression => AND_expression
Line 43: inclusive_OR_expression => exclusive_OR_expression
Line 43: logical_AND_expression => inclusive_OR_expression
Line 43: logical_OR_expression => logical_AND_expression
Line 43: conditional_expression => logical_OR_expression
Line 43: assignment_expression => conditional_expression
Line 43: initializer => assignment_expression
Line 43: init_declarator => declarator = initializer
Line 43: init_declarator_list => init_declarator
Line 43: init_declarator_list_opt => init_declarator_list
Line 43: declaration => declaration_specifiers init_declarator_list_opt ;
Line 43: block_item => declaration
Line 43: block_item_list => block_item_list block_item


Line 45: type_specifier => int
Line 45: declaration_specifiers_opt => epsilon 
Line 45: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 45: pointer_opt => epsilon
Line 45: direct_declarator => IDENTIFIER
				IDENTIFIER = `n0`
Line 45: declarator => pointer_opt direct_declarator
Line 45: unary_operator => -
Line 45: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3452`
Line 45: postfix_expression => primary_expression
Line 45: unary_expression => postfix_expression
Line 45: cast_expression => unary_expression
Line 45: unary_expression => unary_operator cast_expression
Line 45: cast_expression => unary_expression
Line 45: multiplicative_expression => cast_expression
Line 45: additive_expression => multiplicative_expression
Line 45: shift_expression => additive_expression
Line 45: relational_expression => shift_expression
Line 45: equality_expression => relational_expression
Line 45: AND_expression => equality_expression
Line 45: exclusive_OR_expression => AND_expression
Line 45: inclusive_OR_expression => exclusive_OR_expression
Line 45: logical_AND_expression => inclusive_OR_expression
Line 45: logical_OR_expression => logical_AND_expression
Line 45: conditional_expression => logical_OR_expression
Line 45: assignment_expression => conditional_expression
Line 45: initializer => assignment_expression
Line 45: init_declarator => declarator = initializer
Line 45: init_declarator_list => init_declarator
Line 45: init_declarator_list_opt => init_declarator_list
Line 45: declaration => declaration_specifiers init_declarator_list_opt ;
Line 45: block_item => declaration
Line 45: block_item_list => block_item_list block_item

Line 46: type_specifier => unsigned
Line 46: type_specifier => long
Line 46: declaration_specifiers_opt => epsilon 
Line 46: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 46: declaration_specifiers_opt => declaration_specifiers
Line 46: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 46: pointer_opt => epsilon
Line 46: direct_declarator => IDENTIFIER
				IDENTIFIER = `n1`
Line 46: declarator => pointer_opt direct_declarator
Line 46: unary_operator => +
Line 46: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `94570275`
Line 46: postfix_expression => primary_expression
Line 46: unary_expression => postfix_expression
Line 46: cast_expression => unary_expression
Line 46: unary_expression => unary_operator cast_expression
Line 46: cast_expression => unary_expression
Line 46: multiplicative_expression => cast_expression
Line 46: additive_expression => multiplicative_expression
Line 46: shift_expression => additive_expression
Line 46: relational_expression => shift_expression
Line 46: equality_expression => relational_expression
Line 46: AND_expression => equality_expression
Line 46: exclusive_OR_expression => AND_expression
Line 46: inclusive_OR_expression => exclusive_OR_expression
Line 46: logical_AND_expression => inclusive_OR_expression
Line 46: logical_OR_expression => logical_AND_expression
Line 46: conditional_expression => logical_OR_expression
Line 46: assignment_expression => conditional_expression
Line 46: initializer => assignment_expression
Line 46: init_declarator => declarator = initializer
Line 46: init_declarator_list => init_declarator
Line 46: init_declarator_list_opt => init_declarator_list
Line 46: declaration => declaration_specifiers init_declarator_list_opt ;
Line 46: block_item => declaration
Line 46: block_item_list => block_item_list block_item

Line 47: type_specifier => short
Line 47: declaration_specifiers_opt => epsilon 
Line 47: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 47: pointer_opt => epsilon
Line 47: direct_declarator => IDENTIFIER
				IDENTIFIER = `n2`
Line 47: declarator => pointer_opt direct_declarator
Line 47: unary_operator => ~
Line 47: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `46`
Line 47: postfix_expression => primary_expression
Line 47: unary_expression => postfix_expression
Line 47: cast_expression => unary_expression
Line 47: unary_expression => unary_operator cast_expression
Line 47: cast_expression => unary_expression
Line 47: multiplicative_expression => cast_expression
Line 47: additive_expression => multiplicative_expression
Line 47: shift_expression => additive_expression
Line 47: relational_expression => shift_expression
Line 47: equality_expression => relational_expression
Line 47: AND_expression => equality_expression
Line 47: exclusive_OR_expression => AND_expression
Line 47: inclusive_OR_expression => exclusive_OR_expression
Line 47: logical_AND_expression => inclusive_OR_expression
Line 47: logical_OR_expression => logical_AND_expression
Line 47: conditional_expression => logical_OR_expression
Line 47: assignment_expression => conditional_expression
Line 47: initializer => assignment_expression
Line 47: init_declarator => declarator = initializer
Line 47: init_declarator_list => init_declarator
Line 47: init_declarator_list_opt => init_declarator_list
Line 47: declaration => declaration_specifiers init_declarator_list_opt ;
Line 47: block_item => declaration
Line 47: block_item_list => block_item_list block_item

Line 48: type_specifier => float
Line 48: declaration_specifiers_opt => epsilon 
Line 48: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 48: pointer_opt => epsilon
Line 48: direct_declarator => IDENTIFIER
				IDENTIFIER = `n3`
Line 48: declarator => pointer_opt direct_declarator
Line 48: unary_operator => -
Line 48: primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = `23.865320`
Line 48: postfix_expression => primary_expression
Line 48: unary_expression => postfix_expression
Line 48: cast_expression => unary_expression
Line 48: unary_expression => unary_operator cast_expression
Line 48: cast_expression => unary_expression
Line 48: multiplicative_expression => cast_expression
Line 48: additive_expression => multiplicative_expression
Line 48: shift_expression => additive_expression
Line 48: relational_expression => shift_expression
Line 48: equality_expression => relational_expression
Line 48: AND_expression => equality_expression
Line 48: exclusive_OR_expression => AND_expression
Line 48: inclusive_OR_expression => exclusive_OR_expression
Line 48: logical_AND_expression => inclusive_OR_expression
Line 48: logical_OR_expression => logical_AND_expression
Line 48: conditional_expression => logical_OR_expression
Line 48: assignment_expression => conditional_expression
Line 48: initializer => assignment_expression
Line 48: init_declarator => declarator = initializer
Line 48: init_declarator_list => init_declarator
Line 48: init_declarator_list_opt => init_declarator_list
Line 48: declaration => declaration_specifiers init_declarator_list_opt ;
Line 48: block_item => declaration
Line 48: block_item_list => block_item_list block_item

Line 49: type_specifier => double
Line 49: declaration_specifiers_opt => epsilon 
Line 49: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 49: pointer_opt => epsilon
Line 49: direct_declarator => IDENTIFIER
				IDENTIFIER = `n4`
Line 49: declarator => pointer_opt direct_declarator
Line 49: primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = `0.000000`
Line 49: postfix_expression => primary_expression
Line 49: unary_expression => postfix_expression
Line 49: cast_expression => unary_expression
Line 49: multiplicative_expression => cast_expression
Line 49: additive_expression => multiplicative_expression
Line 49: shift_expression => additive_expression
Line 49: relational_expression => shift_expression
Line 49: equality_expression => relational_expression
Line 49: AND_expression => equality_expression
Line 49: exclusive_OR_expression => AND_expression
Line 49: inclusive_OR_expression => exclusive_OR_expression
Line 49: logical_AND_expression => inclusive_OR_expression
Line 49: logical_OR_expression => logical_AND_expression
Line 49: conditional_expression => logical_OR_expression
Line 49: assignment_expression => conditional_expression
Line 49: initializer => assignment_expression
Line 49: init_declarator => declarator = initializer
Line 49: init_declarator_list => init_declarator
Line 49: init_declarator_list_opt => init_declarator_list
Line 49: declaration => declaration_specifiers init_declarator_list_opt ;
Line 49: block_item => declaration
Line 49: block_item_list => block_item_list block_item

Line 50: type_specifier => _Bool
Line 50: declaration_specifiers_opt => epsilon 
Line 50: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 50: pointer_opt => epsilon
Line 50: direct_declarator => IDENTIFIER
				IDENTIFIER = `n5`
Line 50: declarator => pointer_opt direct_declarator
Line 50: unary_operator => !
Line 50: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `5`
Line 50: postfix_expression => primary_expression
Line 50: unary_expression => postfix_expression
Line 50: cast_expression => unary_expression
Line 50: unary_expression => unary_operator cast_expression
Line 50: cast_expression => unary_expression
Line 50: multiplicative_expression => cast_expression
Line 50: additive_expression => multiplicative_expression
Line 50: shift_expression => additive_expression
Line 50: relational_expression => shift_expression
Line 50: equality_expression => relational_expression
Line 50: AND_expression => equality_expression
Line 50: exclusive_OR_expression => AND_expression
Line 50: inclusive_OR_expression => exclusive_OR_expression
Line 50: logical_AND_expression => inclusive_OR_expression
Line 50: logical_OR_expression => logical_AND_expression
Line 50: conditional_expression => logical_OR_expression
Line 50: assignment_expression => conditional_expression
Line 50: initializer => assignment_expression
Line 50: init_declarator => declarator = initializer
Line 50: init_declarator_list => init_declarator
Line 50: init_declarator_list_opt => init_declarator_list
Line 50: declaration => declaration_specifiers init_declarator_list_opt ;
Line 50: block_item => declaration
Line 50: block_item_list => block_item_list block_item

Line 51: type_specifier => double
Line 51: type_specifier => _Complex
Line 51: declaration_specifiers_opt => epsilon 
Line 51: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 51: declaration_specifiers_opt => declaration_specifiers
Line 51: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 51: pointer_opt => epsilon
Line 51: direct_declarator => IDENTIFIER
				IDENTIFIER = `n6`
Line 51: declarator => pointer_opt direct_declarator
Line 51: init_declarator => declarator
Line 51: init_declarator_list => init_declarator
Line 51: init_declarator_list_opt => init_declarator_list
Line 51: declaration => declaration_specifiers init_declarator_list_opt ;
Line 51: block_item => declaration
Line 51: block_item_list => block_item_list block_item

Line 52: type_specifier => double
Line 52: type_specifier => _Imaginary
Line 52: declaration_specifiers_opt => epsilon 
Line 52: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 52: declaration_specifiers_opt => declaration_specifiers
Line 52: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 52: pointer_opt => epsilon
Line 52: direct_declarator => IDENTIFIER
				IDENTIFIER = `n7`
Line 52: declarator => pointer_opt direct_declarator
Line 52: init_declarator => declarator
Line 52: init_declarator_list => init_declarator
Line 52: init_declarator_list_opt => init_declarator_list
Line 52: declaration => declaration_specifiers init_declarator_list_opt ;
Line 52: block_item => declaration
Line 52: block_item_list => block_item_list block_item


Line 54: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 54: postfix_expression => primary_expression
Line 54: unary_expression => postfix_expression
Line 54: assignment_operator => =
Line 54: type_specifier => unsigned
Line 54: type_specifier => int
Line 54: specifier_qualifier_list_opt => epsilon
Line 54: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 54: specifier_qualifier_list_opt => specifier_qualifier_list
Line 54: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 54: type_name => specifier_qualifier_list
Line 54: primary_expression => IDENTIFIER
				IDENTIFIER = `c`
Line 54: postfix_expression => primary_expression
Line 54: unary_expression => postfix_expression
Line 54: cast_expression => unary_expression
Line 54: cast_expression => ( type_name ) cast_expression
Line 54: multiplicative_expression => cast_expression
Line 54: additive_expression => multiplicative_expression
Line 54: shift_expression => additive_expression
Line 54: relational_expression => shift_expression
Line 54: equality_expression => relational_expression
Line 54: AND_expression => equality_expression
Line 54: exclusive_OR_expression => AND_expression
Line 54: inclusive_OR_expression => exclusive_OR_expression
Line 54: logical_AND_expression => inclusive_OR_expression
Line 54: logical_OR_expression => logical_AND_expression
Line 54: conditional_expression => logical_OR_expression
Line 54: assignment_expression => conditional_expression
Line 54: assignment_expression => unary_expression assignment_operator assignment_expression
Line 54: expression => assignment_expression
Line 54: expression_opt => expression
Line 54: expression_statement => expression_opt ;
Line 54: statement => expression_statement
Line 54: block_item => statement
Line 54: block_item_list => block_item_list block_item

Line 55: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 55: postfix_expression => primary_expression
Line 55: unary_expression => postfix_expression
Line 55: assignment_operator => =
Line 55: type_specifier => long
Line 55: type_specifier => double
Line 55: specifier_qualifier_list_opt => epsilon
Line 55: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 55: specifier_qualifier_list_opt => specifier_qualifier_list
Line 55: specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
Line 55: type_name => specifier_qualifier_list
Line 55: unary_expression => sizeof ( type_name )
Line 55: cast_expression => unary_expression
Line 55: multiplicative_expression => cast_expression
Line 55: additive_expression => multiplicative_expression
Line 55: shift_expression => additive_expression
Line 55: relational_expression => shift_expression
Line 55: equality_expression => relational_expression
Line 55: AND_expression => equality_expression
Line 55: exclusive_OR_expression => AND_expression
Line 55: inclusive_OR_expression => exclusive_OR_expression
Line 55: logical_AND_expression => inclusive_OR_expression
Line 55: logical_OR_expression => logical_AND_expression
Line 55: conditional_expression => logical_OR_expression
Line 55: assignment_expression => conditional_expression
Line 55: assignment_expression => unary_expression assignment_operator assignment_expression
Line 55: expression => assignment_expression
Line 55: expression_opt => expression
Line 55: expression_statement => expression_opt ;
Line 55: statement => expression_statement
Line 55: block_item => statement
Line 55: block_item_list => block_item_list block_item

Line 56: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 56: postfix_expression => primary_expression
Line 56: unary_expression => postfix_expression
Line 56: assignment_operator => =
Line 56: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 56: postfix_expression => primary_expression
Line 56: unary_expression => postfix_expression
Line 56: unary_expression => sizeof unary_expression
Line 56: cast_expression => unary_expression
Line 56: multiplicative_expression => cast_expression
Line 56: additive_expression => multiplicative_expression
Line 56: shift_expression => additive_expression
Line 56: relational_expression => shift_expression
Line 56: equality_expression => relational_expression
Line 56: AND_expression => equality_expression
Line 56: exclusive_OR_expression => AND_expression
Line 56: inclusive_OR_expression => exclusive_OR_expression
Line 56: logical_AND_expression => inclusive_OR_expression
Line 56: logical_OR_expression => logical_AND_expression
Line 56: conditional_expression => logical_OR_expression
Line 56: assignment_expression => conditional_expression
Line 56: assignment_expression => unary_expression assignment_operator assignment_expression
Line 56: expression => assignment_expression
Line 56: expression_opt => expression
Line 56: expression_statement => expression_opt ;
Line 56: statement => expression_statement
Line 56: block_item => statement
Line 56: block_item_list => block_item_list block_item


Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: assignment_operator => *=
Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: cast_expression => unary_expression
Line 58: multiplicative_expression => cast_expression
Line 58: additive_expression => multiplicative_expression
Line 58: shift_expression => additive_expression
Line 58: relational_expression => shift_expression
Line 58: equality_expression => relational_expression
Line 58: AND_expression => equality_expression
Line 58: exclusive_OR_expression => AND_expression
Line 58: inclusive_OR_expression => exclusive_OR_expression
Line 58: logical_AND_expression => inclusive_OR_expression
Line 58: logical_OR_expression => logical_AND_expression
Line 58: conditional_expression => logical_OR_expression
Line 58: assignment_expression => conditional_expression
Line 58: assignment_expression => unary_expression assignment_operator assignment_expression
Line 58: expression => assignment_expression
Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: assignment_operator => /=
Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: cast_expression => unary_expression
Line 58: multiplicative_expression => cast_expression
Line 58: additive_expression => multiplicative_expression
Line 58: shift_expression => additive_expression
Line 58: relational_expression => shift_expression
Line 58: equality_expression => relational_expression
Line 58: AND_expression => equality_expression
Line 58: exclusive_OR_expression => AND_expression
Line 58: inclusive_OR_expression => exclusive_OR_expression
Line 58: logical_AND_expression => inclusive_OR_expression
Line 58: logical_OR_expression => logical_AND_expression
Line 58: conditional_expression => logical_OR_expression
Line 58: assignment_expression => conditional_expression
Line 58: assignment_expression => unary_expression assignment_operator assignment_expression
Line 58: expression => expression , assignment_expression
Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: assignment_operator => %=
Line 58: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 58: postfix_expression => primary_expression
Line 58: unary_expression => postfix_expression
Line 58: cast_expression => unary_expression
Line 58: multiplicative_expression => cast_expression
Line 58: additive_expression => multiplicative_expression
Line 58: shift_expression => additive_expression
Line 58: relational_expression => shift_expression
Line 58: equality_expression => relational_expression
Line 58: AND_expression => equality_expression
Line 58: exclusive_OR_expression => AND_expression
Line 58: inclusive_OR_expression => exclusive_OR_expression
Line 58: logical_AND_expression => inclusive_OR_expression
Line 58: logical_OR_expression => logical_AND_expression
Line 58: conditional_expression => logical_OR_expression
Line 58: assignment_expression => conditional_expression
Line 58: assignment_expression => unary_expression assignment_operator assignment_expression
Line 58: expression => expression , assignment_expression
Line 58: expression_opt => expression
Line 58: expression_statement => expression_opt ;
Line 58: statement => expression_statement
Line 58: block_item => statement
Line 58: block_item_list => block_item_list block_item

Line 59: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: assignment_operator => += 
Line 59: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: assignment_operator => -= 
Line 59: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: assignment_operator => <<=
Line 59: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: assignment_operator => >>=
Line 59: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: cast_expression => unary_expression
Line 59: multiplicative_expression => cast_expression
Line 59: additive_expression => multiplicative_expression
Line 59: shift_expression => additive_expression
Line 59: relational_expression => shift_expression
Line 59: equality_expression => relational_expression
Line 59: AND_expression => equality_expression
Line 59: exclusive_OR_expression => AND_expression
Line 59: inclusive_OR_expression => exclusive_OR_expression
Line 59: logical_AND_expression => inclusive_OR_expression
Line 59: logical_OR_expression => logical_AND_expression
Line 59: conditional_expression => logical_OR_expression
Line 59: assignment_expression => conditional_expression
Line 59: assignment_expression => unary_expression assignment_operator assignment_expression
Line 59: expression => assignment_expression
Line 59: primary_expression => ( expression )
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: cast_expression => unary_expression
Line 59: multiplicative_expression => cast_expression
Line 59: additive_expression => multiplicative_expression
Line 59: shift_expression => additive_expression
Line 59: relational_expression => shift_expression
Line 59: equality_expression => relational_expression
Line 59: AND_expression => equality_expression
Line 59: exclusive_OR_expression => AND_expression
Line 59: inclusive_OR_expression => exclusive_OR_expression
Line 59: logical_AND_expression => inclusive_OR_expression
Line 59: logical_OR_expression => logical_AND_expression
Line 59: conditional_expression => logical_OR_expression
Line 59: assignment_expression => conditional_expression
Line 59: assignment_expression => unary_expression assignment_operator assignment_expression
Line 59: expression => assignment_expression
Line 59: primary_expression => ( expression )
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: cast_expression => unary_expression
Line 59: multiplicative_expression => cast_expression
Line 59: additive_expression => multiplicative_expression
Line 59: shift_expression => additive_expression
Line 59: relational_expression => shift_expression
Line 59: equality_expression => relational_expression
Line 59: AND_expression => equality_expression
Line 59: exclusive_OR_expression => AND_expression
Line 59: inclusive_OR_expression => exclusive_OR_expression
Line 59: logical_AND_expression => inclusive_OR_expression
Line 59: logical_OR_expression => logical_AND_expression
Line 59: conditional_expression => logical_OR_expression
Line 59: assignment_expression => conditional_expression
Line 59: assignment_expression => unary_expression assignment_operator assignment_expression
Line 59: expression => assignment_expression
Line 59: primary_expression => ( expression )
Line 59: postfix_expression => primary_expression
Line 59: unary_expression => postfix_expression
Line 59: cast_expression => unary_expression
Line 59: multiplicative_expression => cast_expression
Line 59: additive_expression => multiplicative_expression
Line 59: shift_expression => additive_expression
Line 59: relational_expression => shift_expression
Line 59: equality_expression => relational_expression
Line 59: AND_expression => equality_expression
Line 59: exclusive_OR_expression => AND_expression
Line 59: inclusive_OR_expression => exclusive_OR_expression
Line 59: logical_AND_expression => inclusive_OR_expression
Line 59: logical_OR_expression => logical_AND_expression
Line 59: conditional_expression => logical_OR_expression
Line 59: assignment_expression => conditional_expression
Line 59: assignment_expression => unary_expression assignment_operator assignment_expression
Line 59: expression => assignment_expression
Line 59: expression_opt => expression
Line 59: expression_statement => expression_opt ;
Line 59: statement => expression_statement
Line 59: block_item => statement
Line 59: block_item_list => block_item_list block_item

Line 60: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 60: postfix_expression => primary_expression
Line 60: unary_expression => postfix_expression
Line 60: assignment_operator => &=
Line 60: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 60: postfix_expression => primary_expression
Line 60: unary_expression => postfix_expression
Line 60: assignment_operator => |=
Line 60: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 60: postfix_expression => primary_expression
Line 60: unary_expression => postfix_expression
Line 60: assignment_operator => ^=
Line 60: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 60: postfix_expression => primary_expression
Line 60: unary_expression => postfix_expression
Line 60: cast_expression => unary_expression
Line 60: multiplicative_expression => cast_expression
Line 60: additive_expression => multiplicative_expression
Line 60: shift_expression => additive_expression
Line 60: relational_expression => shift_expression
Line 60: equality_expression => relational_expression
Line 60: AND_expression => equality_expression
Line 60: exclusive_OR_expression => AND_expression
Line 60: inclusive_OR_expression => exclusive_OR_expression
Line 60: logical_AND_expression => inclusive_OR_expression
Line 60: logical_OR_expression => logical_AND_expression
Line 60: conditional_expression => logical_OR_expression
Line 60: assignment_expression => conditional_expression
Line 60: assignment_expression => unary_expression assignment_operator assignment_expression
Line 60: assignment_expression => unary_expression assignment_operator assignment_expression
Line 60: assignment_expression => unary_expression assignment_operator assignment_expression
Line 60: expression => assignment_expression
Line 60: expression_opt => expression
Line 60: expression_statement => expression_opt ;
Line 60: statement => expression_statement
Line 60: block_item => statement
Line 60: block_item_list => block_item_list block_item


Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: assignment_operator => =
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => equality_expression == relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => equality_expression == relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => logical_AND_expression && inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: conditional_expression => logical_OR_expression
Line 62: assignment_expression => conditional_expression
Line 62: expression => assignment_expression
Line 62: primary_expression => ( expression )
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: unary_operator => !
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => equality_expression != relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: conditional_expression => logical_OR_expression
Line 62: assignment_expression => conditional_expression
Line 62: expression => assignment_expression
Line 62: primary_expression => ( expression )
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: unary_expression => unary_operator cast_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => logical_AND_expression && inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: conditional_expression => logical_OR_expression
Line 62: assignment_expression => conditional_expression
Line 62: expression => assignment_expression
Line 62: primary_expression => ( expression )
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: assignment_operator => =
Line 62: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `7`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: conditional_expression => logical_OR_expression
Line 62: assignment_expression => conditional_expression
Line 62: assignment_expression => unary_expression assignment_operator assignment_expression
Line 62: expression => assignment_expression
Line 62: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 62: postfix_expression => primary_expression
Line 62: unary_expression => postfix_expression
Line 62: cast_expression => unary_expression
Line 62: multiplicative_expression => cast_expression
Line 62: additive_expression => multiplicative_expression
Line 62: shift_expression => additive_expression
Line 62: relational_expression => shift_expression
Line 62: equality_expression => relational_expression
Line 62: AND_expression => equality_expression
Line 62: exclusive_OR_expression => AND_expression
Line 62: inclusive_OR_expression => exclusive_OR_expression
Line 62: logical_AND_expression => inclusive_OR_expression
Line 62: logical_OR_expression => logical_AND_expression
Line 62: conditional_expression => logical_OR_expression
Line 62: conditional_expression => logical_OR_expression ? expression : conditional_expression
Line 62: assignment_expression => conditional_expression
Line 62: assignment_expression => unary_expression assignment_operator assignment_expression
Line 62: expression => assignment_expression
Line 62: expression_opt => expression
Line 62: expression_statement => expression_opt ;
Line 62: statement => expression_statement
Line 62: block_item => statement
Line 62: block_item_list => block_item_list block_item

Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `a`
Line 63: postfix_expression => primary_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => shift_expression << additive_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => shift_expression >> additive_expression
Line 63: relational_expression => shift_expression
Line 63: equality_expression => relational_expression
Line 63: AND_expression => equality_expression
Line 63: exclusive_OR_expression => AND_expression
Line 63: inclusive_OR_expression => exclusive_OR_expression
Line 63: logical_AND_expression => inclusive_OR_expression
Line 63: logical_OR_expression => logical_AND_expression
Line 63: conditional_expression => logical_OR_expression
Line 63: assignment_expression => conditional_expression
Line 63: expression => assignment_expression
Line 63: postfix_expression => postfix_expression [ expression ]
Line 63: unary_expression => postfix_expression
Line 63: assignment_operator => =
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => additive_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => shift_expression >> additive_expression
Line 63: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 63: postfix_expression => primary_expression
Line 63: unary_expression => postfix_expression
Line 63: cast_expression => unary_expression
Line 63: multiplicative_expression => cast_expression
Line 63: additive_expression => multiplicative_expression
Line 63: shift_expression => shift_expression << additive_expression
Line 63: relational_expression => shift_expression
Line 63: equality_expression => relational_expression
Line 63: AND_expression => equality_expression
Line 63: exclusive_OR_expression => AND_expression
Line 63: inclusive_OR_expression => exclusive_OR_expression
Line 63: logical_AND_expression => inclusive_OR_expression
Line 63: logical_OR_expression => logical_AND_expression
Line 63: conditional_expression => logical_OR_expression
Line 63: assignment_expression => conditional_expression
Line 63: assignment_expression => unary_expression assignment_operator assignment_expression
Line 63: expression => assignment_expression
Line 63: expression_opt => expression
Line 63: expression_statement => expression_opt ;
Line 63: statement => expression_statement
Line 63: block_item => statement
Line 63: block_item_list => block_item_list block_item




Line 67: unary_operator => !
Line 67: primary_expression => IDENTIFIER
				IDENTIFIER = `n5`
Line 67: postfix_expression => primary_expression
Line 67: unary_expression => postfix_expression
Line 67: cast_expression => unary_expression
Line 67: unary_expression => unary_operator cast_expression
Line 67: cast_expression => unary_expression
Line 67: multiplicative_expression => cast_expression
Line 67: additive_expression => multiplicative_expression
Line 67: shift_expression => additive_expression
Line 67: relational_expression => shift_expression
Line 67: equality_expression => relational_expression
Line 67: AND_expression => equality_expression
Line 67: exclusive_OR_expression => AND_expression
Line 67: inclusive_OR_expression => exclusive_OR_expression
Line 67: logical_AND_expression => inclusive_OR_expression
Line 67: logical_OR_expression => logical_AND_expression
Line 67: conditional_expression => logical_OR_expression
Line 67: assignment_expression => conditional_expression
Line 67: expression => assignment_expression


Line 69: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 69: postfix_expression => primary_expression
Line 69: unary_expression => postfix_expression
Line 69: cast_expression => unary_expression
Line 69: multiplicative_expression => cast_expression
Line 69: additive_expression => multiplicative_expression
Line 69: shift_expression => additive_expression
Line 69: relational_expression => shift_expression
Line 69: equality_expression => relational_expression
Line 69: AND_expression => equality_expression
Line 69: exclusive_OR_expression => AND_expression
Line 69: inclusive_OR_expression => exclusive_OR_expression
Line 69: logical_AND_expression => inclusive_OR_expression
Line 69: logical_OR_expression => logical_AND_expression
Line 69: conditional_expression => logical_OR_expression
Line 69: assignment_expression => conditional_expression
Line 69: expression => assignment_expression


Line 71: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 71: postfix_expression => primary_expression
Line 71: unary_expression => postfix_expression
Line 71: cast_expression => unary_expression
Line 71: multiplicative_expression => cast_expression
Line 71: additive_expression => multiplicative_expression
Line 71: shift_expression => additive_expression
Line 71: relational_expression => shift_expression
Line 71: equality_expression => relational_expression
Line 71: AND_expression => equality_expression
Line 71: exclusive_OR_expression => AND_expression
Line 71: inclusive_OR_expression => exclusive_OR_expression
Line 71: logical_AND_expression => inclusive_OR_expression
Line 71: logical_OR_expression => logical_AND_expression
Line 71: conditional_expression => logical_OR_expression
Line 71: constant_expression => conditional_expression

Line 72: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 72: postfix_expression => primary_expression
Line 72: postfix_expression => postfix_expression ++
Line 72: unary_expression => postfix_expression
Line 72: cast_expression => unary_expression
Line 72: multiplicative_expression => cast_expression
Line 72: additive_expression => multiplicative_expression
Line 72: shift_expression => additive_expression
Line 72: relational_expression => shift_expression
Line 72: equality_expression => relational_expression
Line 72: AND_expression => equality_expression
Line 72: exclusive_OR_expression => AND_expression
Line 72: inclusive_OR_expression => exclusive_OR_expression
Line 72: logical_AND_expression => inclusive_OR_expression
Line 72: logical_OR_expression => logical_AND_expression
Line 72: conditional_expression => logical_OR_expression
Line 72: assignment_expression => conditional_expression
Line 72: expression => assignment_expression
Line 72: expression_opt => expression
Line 72: expression_statement => expression_opt ;
Line 72: statement => expression_statement
Line 72: labeled_statement => case constant_expression : statement
Line 72: statement => labeled_statement
Line 72: block_item => statement
Line 72: block_item_list => block_item

Line 73: jump_statement => break ;
Line 73: statement => jump_statement
Line 73: block_item => statement
Line 73: block_item_list => block_item_list block_item

Line 74: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 74: postfix_expression => primary_expression
Line 74: unary_expression => postfix_expression
Line 74: cast_expression => unary_expression
Line 74: multiplicative_expression => cast_expression
Line 74: additive_expression => multiplicative_expression
Line 74: shift_expression => additive_expression
Line 74: relational_expression => shift_expression
Line 74: equality_expression => relational_expression
Line 74: AND_expression => equality_expression
Line 74: exclusive_OR_expression => AND_expression
Line 74: inclusive_OR_expression => exclusive_OR_expression
Line 74: logical_AND_expression => inclusive_OR_expression
Line 74: logical_OR_expression => logical_AND_expression
Line 74: conditional_expression => logical_OR_expression
Line 74: constant_expression => conditional_expression

Line 75: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 75: postfix_expression => primary_expression
Line 75: unary_expression => postfix_expression
Line 75: assignment_operator => /=
Line 75: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 75: postfix_expression => primary_expression
Line 75: unary_expression => postfix_expression
Line 75: cast_expression => unary_expression
Line 75: multiplicative_expression => cast_expression
Line 75: additive_expression => multiplicative_expression
Line 75: shift_expression => additive_expression
Line 75: relational_expression => shift_expression
Line 75: equality_expression => relational_expression
Line 75: AND_expression => equality_expression
Line 75: exclusive_OR_expression => AND_expression
Line 75: inclusive_OR_expression => exclusive_OR_expression
Line 75: logical_AND_expression => inclusive_OR_expression
Line 75: logical_OR_expression => logical_AND_expression
Line 75: conditional_expression => logical_OR_expression
Line 75: assignment_expression => conditional_expression
Line 75: assignment_expression => unary_expression assignment_operator assignment_expression
Line 75: expression => assignment_expression
Line 75: expression_opt => expression
Line 75: expression_statement => expression_opt ;
Line 75: statement => expression_statement
Line 75: labeled_statement => case constant_expression : statement
Line 75: statement => labeled_statement
Line 75: block_item => statement
Line 75: block_item_list => block_item_list block_item

Line 76: jump_statement => break ;
Line 76: statement => jump_statement
Line 76: block_item => statement
Line 76: block_item_list => block_item_list block_item


Line 78: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 78: postfix_expression => primary_expression
Line 78: postfix_expression => postfix_expression --
Line 78: unary_expression => postfix_expression
Line 78: cast_expression => unary_expression
Line 78: multiplicative_expression => cast_expression
Line 78: additive_expression => multiplicative_expression
Line 78: shift_expression => additive_expression
Line 78: relational_expression => shift_expression
Line 78: equality_expression => relational_expression
Line 78: AND_expression => equality_expression
Line 78: exclusive_OR_expression => AND_expression
Line 78: inclusive_OR_expression => exclusive_OR_expression
Line 78: logical_AND_expression => inclusive_OR_expression
Line 78: logical_OR_expression => logical_AND_expression
Line 78: conditional_expression => logical_OR_expression
Line 78: assignment_expression => conditional_expression
Line 78: expression => assignment_expression
Line 78: expression_opt => expression
Line 78: expression_statement => expression_opt ;
Line 78: statement => expression_statement
Line 78: labeled_statement => default : statement
Line 78: statement => labeled_statement
Line 78: block_item => statement
Line 78: block_item_list => block_item_list block_item

Line 79: block_item_list_opt => block_item_list
Line 79: compound_statement => { block_item_list_opt }
Line 79: statement => compound_statement
Line 79: selection_statement => switch ( expression ) statement
Line 79: statement => selection_statement
Line 79: block_item => statement
Line 79: block_item_list => block_item

Line 80: block_item_list_opt => block_item_list
Line 80: compound_statement => { block_item_list_opt }
Line 80: statement => compound_statement

Line 81: primary_expression => IDENTIFIER
				IDENTIFIER = `n3`
Line 81: postfix_expression => primary_expression
Line 81: unary_expression => postfix_expression
Line 81: cast_expression => unary_expression
Line 81: multiplicative_expression => cast_expression
Line 81: additive_expression => multiplicative_expression
Line 81: shift_expression => additive_expression
Line 81: relational_expression => shift_expression
Line 81: primary_expression => IDENTIFIER
				IDENTIFIER = `n4`
Line 81: postfix_expression => primary_expression
Line 81: unary_expression => postfix_expression
Line 81: cast_expression => unary_expression
Line 81: multiplicative_expression => cast_expression
Line 81: additive_expression => multiplicative_expression
Line 81: shift_expression => additive_expression
Line 81: relational_expression => relational_expression > shift_expression
Line 81: equality_expression => relational_expression
Line 81: AND_expression => equality_expression
Line 81: exclusive_OR_expression => AND_expression
Line 81: inclusive_OR_expression => exclusive_OR_expression
Line 81: logical_AND_expression => inclusive_OR_expression
Line 81: logical_OR_expression => logical_AND_expression
Line 81: conditional_expression => logical_OR_expression
Line 81: assignment_expression => conditional_expression
Line 81: expression => assignment_expression


Line 83: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 83: postfix_expression => primary_expression
Line 83: unary_expression => postfix_expression
Line 83: cast_expression => unary_expression
Line 83: multiplicative_expression => cast_expression
Line 83: additive_expression => multiplicative_expression
Line 83: shift_expression => additive_expression
Line 83: relational_expression => shift_expression
Line 83: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 83: postfix_expression => primary_expression
Line 83: unary_expression => postfix_expression
Line 83: cast_expression => unary_expression
Line 83: multiplicative_expression => cast_expression
Line 83: additive_expression => multiplicative_expression
Line 83: shift_expression => additive_expression
Line 83: relational_expression => relational_expression <= shift_expression
Line 83: equality_expression => relational_expression
Line 83: AND_expression => equality_expression
Line 83: exclusive_OR_expression => AND_expression
Line 83: inclusive_OR_expression => exclusive_OR_expression
Line 83: logical_AND_expression => inclusive_OR_expression
Line 83: logical_OR_expression => logical_AND_expression
Line 83: conditional_expression => logical_OR_expression
Line 83: assignment_expression => conditional_expression
Line 83: expression => assignment_expression

Line 84: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 84: postfix_expression => primary_expression
Line 84: postfix_expression => postfix_expression ++
Line 84: unary_expression => postfix_expression
Line 84: cast_expression => unary_expression
Line 84: multiplicative_expression => cast_expression
Line 84: additive_expression => multiplicative_expression
Line 84: shift_expression => additive_expression
Line 84: relational_expression => shift_expression
Line 84: equality_expression => relational_expression
Line 84: AND_expression => equality_expression
Line 84: exclusive_OR_expression => AND_expression
Line 84: inclusive_OR_expression => exclusive_OR_expression
Line 84: logical_AND_expression => inclusive_OR_expression
Line 84: logical_OR_expression => logical_AND_expression
Line 84: conditional_expression => logical_OR_expression
Line 84: assignment_expression => conditional_expression
Line 84: expression => assignment_expression
Line 84: expression_opt => expression
Line 84: expression_statement => expression_opt ;
Line 84: statement => expression_statement

Line 85: selection_statement => if ( expression ) statement
Line 85: statement => selection_statement
Line 85: block_item => statement
Line 85: block_item_list => block_item
Line 85: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 85: postfix_expression => primary_expression
Line 85: unary_expression => postfix_expression
Line 85: unary_expression => ++ unary_expression
Line 85: cast_expression => unary_expression
Line 85: multiplicative_expression => cast_expression
Line 85: additive_expression => multiplicative_expression
Line 85: shift_expression => additive_expression
Line 85: relational_expression => shift_expression
Line 85: equality_expression => relational_expression
Line 85: AND_expression => equality_expression
Line 85: exclusive_OR_expression => AND_expression
Line 85: inclusive_OR_expression => exclusive_OR_expression
Line 85: logical_AND_expression => inclusive_OR_expression
Line 85: logical_OR_expression => logical_AND_expression
Line 85: conditional_expression => logical_OR_expression
Line 85: assignment_expression => conditional_expression
Line 85: expression => assignment_expression
Line 85: expression_opt => expression
Line 85: expression_statement => expression_opt ;
Line 85: statement => expression_statement
Line 85: block_item => statement
Line 85: block_item_list => block_item_list block_item

Line 86: block_item_list_opt => block_item_list
Line 86: compound_statement => { block_item_list_opt }
Line 86: statement => compound_statement



Line 89: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 89: postfix_expression => primary_expression
Line 89: unary_expression => postfix_expression
Line 89: cast_expression => unary_expression
Line 89: multiplicative_expression => cast_expression
Line 89: additive_expression => multiplicative_expression
Line 89: shift_expression => additive_expression
Line 89: relational_expression => shift_expression
Line 89: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 89: postfix_expression => primary_expression
Line 89: unary_expression => postfix_expression
Line 89: cast_expression => unary_expression
Line 89: multiplicative_expression => cast_expression
Line 89: additive_expression => multiplicative_expression
Line 89: shift_expression => additive_expression
Line 89: relational_expression => relational_expression >= shift_expression
Line 89: equality_expression => relational_expression
Line 89: AND_expression => equality_expression
Line 89: exclusive_OR_expression => AND_expression
Line 89: inclusive_OR_expression => exclusive_OR_expression
Line 89: logical_AND_expression => inclusive_OR_expression
Line 89: logical_OR_expression => logical_AND_expression
Line 89: conditional_expression => logical_OR_expression
Line 89: assignment_expression => conditional_expression
Line 89: expression => assignment_expression

Line 90: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 90: postfix_expression => primary_expression
Line 90: postfix_expression => postfix_expression ++
Line 90: unary_expression => postfix_expression
Line 90: cast_expression => unary_expression
Line 90: multiplicative_expression => cast_expression
Line 90: additive_expression => multiplicative_expression
Line 90: shift_expression => additive_expression
Line 90: relational_expression => shift_expression
Line 90: equality_expression => relational_expression
Line 90: AND_expression => equality_expression
Line 90: exclusive_OR_expression => AND_expression
Line 90: inclusive_OR_expression => exclusive_OR_expression
Line 90: logical_AND_expression => inclusive_OR_expression
Line 90: logical_OR_expression => logical_AND_expression
Line 90: conditional_expression => logical_OR_expression
Line 90: assignment_expression => conditional_expression
Line 90: expression => assignment_expression
Line 90: expression_opt => expression
Line 90: expression_statement => expression_opt ;
Line 90: statement => expression_statement

Line 91: selection_statement => if ( expression ) statement
Line 91: statement => selection_statement
Line 91: block_item => statement
Line 91: block_item_list => block_item
Line 91: primary_expression => IDENTIFIER
				IDENTIFIER = `n1`
Line 91: postfix_expression => primary_expression
Line 91: unary_expression => postfix_expression
Line 91: unary_expression => ++ unary_expression
Line 91: cast_expression => unary_expression
Line 91: multiplicative_expression => cast_expression
Line 91: additive_expression => multiplicative_expression
Line 91: shift_expression => additive_expression
Line 91: relational_expression => shift_expression
Line 91: equality_expression => relational_expression
Line 91: AND_expression => equality_expression
Line 91: exclusive_OR_expression => AND_expression
Line 91: inclusive_OR_expression => exclusive_OR_expression
Line 91: logical_AND_expression => inclusive_OR_expression
Line 91: logical_OR_expression => logical_AND_expression
Line 91: conditional_expression => logical_OR_expression
Line 91: assignment_expression => conditional_expression
Line 91: expression => assignment_expression
Line 91: expression_opt => expression
Line 91: expression_statement => expression_opt ;
Line 91: statement => expression_statement
Line 91: block_item => statement
Line 91: block_item_list => block_item_list block_item

Line 92: block_item_list_opt => block_item_list
Line 92: compound_statement => { block_item_list_opt }
Line 92: statement => compound_statement
Line 92: selection_statement => if ( expression ) statement else statement
Line 92: statement => selection_statement
Line 92: selection_statement => if ( expression ) statement else statement
Line 92: statement => selection_statement
Line 92: labeled_statement => IDENTIFIER : statement
				IDENTIFIER = `RANDOM_LOC`
Line 92: statement => labeled_statement
Line 92: block_item => statement
Line 92: block_item_list => block_item_list block_item


Line 94: primary_expression => IDENTIFIER
				IDENTIFIER = `n2`
Line 94: postfix_expression => primary_expression
Line 94: postfix_expression => postfix_expression --
Line 94: unary_expression => postfix_expression
Line 94: cast_expression => unary_expression
Line 94: multiplicative_expression => cast_expression
Line 94: additive_expression => multiplicative_expression
Line 94: shift_expression => additive_expression
Line 94: relational_expression => shift_expression
Line 94: equality_expression => relational_expression
Line 94: AND_expression => equality_expression
Line 94: exclusive_OR_expression => AND_expression
Line 94: inclusive_OR_expression => exclusive_OR_expression
Line 94: logical_AND_expression => inclusive_OR_expression
Line 94: logical_OR_expression => logical_AND_expression
Line 94: conditional_expression => logical_OR_expression
Line 94: assignment_expression => conditional_expression
Line 94: expression => assignment_expression

Line 95: jump_statement => goto IDENTIFIER ;
				IDENTIFIER = `RANDOM_LOC`
Line 95: statement => jump_statement
Line 95: iteration_statement => while ( expression ) statement
Line 95: statement => iteration_statement
Line 95: block_item => statement
Line 95: block_item_list => block_item_list block_item


Line 97: expression_opt => epsilon
Line 97: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 97: postfix_expression => primary_expression
Line 97: unary_expression => postfix_expression
Line 97: cast_expression => unary_expression
Line 97: multiplicative_expression => cast_expression
Line 97: additive_expression => multiplicative_expression
Line 97: shift_expression => additive_expression
Line 97: relational_expression => shift_expression
Line 97: equality_expression => relational_expression
Line 97: AND_expression => equality_expression
Line 97: exclusive_OR_expression => AND_expression
Line 97: inclusive_OR_expression => exclusive_OR_expression
Line 97: logical_AND_expression => inclusive_OR_expression
Line 97: logical_OR_expression => logical_AND_expression
Line 97: conditional_expression => logical_OR_expression
Line 97: assignment_expression => conditional_expression
Line 97: expression => assignment_expression
Line 97: expression_opt => expression
Line 97: expression_opt => epsilon

Line 98: type_specifier => int
Line 98: declaration_specifiers_opt => epsilon 
Line 98: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 98: pointer_opt => epsilon
Line 98: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 98: declarator => pointer_opt direct_declarator
Line 98: init_declarator => declarator
Line 98: init_declarator_list => init_declarator
Line 98: init_declarator_list_opt => init_declarator_list
Line 98: declaration => declaration_specifiers init_declarator_list_opt ;
Line 98: expression_opt => epsilon
Line 98: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 98: postfix_expression => primary_expression
Line 98: unary_expression => postfix_expression
Line 98: unary_expression => ++ unary_expression
Line 98: cast_expression => unary_expression
Line 98: multiplicative_expression => cast_expression
Line 98: additive_expression => multiplicative_expression
Line 98: shift_expression => additive_expression
Line 98: relational_expression => shift_expression
Line 98: equality_expression => relational_expression
Line 98: AND_expression => equality_expression
Line 98: exclusive_OR_expression => AND_expression
Line 98: inclusive_OR_expression => exclusive_OR_expression
Line 98: logical_AND_expression => inclusive_OR_expression
Line 98: logical_OR_expression => logical_AND_expression
Line 98: conditional_expression => logical_OR_expression
Line 98: assignment_expression => conditional_expression
Line 98: expression => assignment_expression
Line 98: expression_opt => expression

Line 99: type_specifier => int
Line 99: declaration_specifiers_opt => epsilon 
Line 99: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 99: pointer_opt => epsilon
Line 99: direct_declarator => IDENTIFIER
				IDENTIFIER = `i`
Line 99: declarator => pointer_opt direct_declarator
Line 99: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 99: postfix_expression => primary_expression
Line 99: unary_expression => postfix_expression
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => relational_expression
Line 99: AND_expression => equality_expression
Line 99: exclusive_OR_expression => AND_expression
Line 99: inclusive_OR_expression => exclusive_OR_expression
Line 99: logical_AND_expression => inclusive_OR_expression
Line 99: logical_OR_expression => logical_AND_expression
Line 99: conditional_expression => logical_OR_expression
Line 99: assignment_expression => conditional_expression
Line 99: initializer => assignment_expression
Line 99: init_declarator => declarator = initializer
Line 99: init_declarator_list => init_declarator
Line 99: pointer_opt => epsilon
Line 99: direct_declarator => IDENTIFIER
				IDENTIFIER = `j`
Line 99: declarator => pointer_opt direct_declarator
Line 99: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 99: postfix_expression => primary_expression
Line 99: unary_expression => postfix_expression
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => relational_expression
Line 99: AND_expression => equality_expression
Line 99: exclusive_OR_expression => AND_expression
Line 99: inclusive_OR_expression => exclusive_OR_expression
Line 99: logical_AND_expression => inclusive_OR_expression
Line 99: logical_OR_expression => logical_AND_expression
Line 99: conditional_expression => logical_OR_expression
Line 99: assignment_expression => conditional_expression
Line 99: initializer => assignment_expression
Line 99: init_declarator => declarator = initializer
Line 99: init_declarator_list => init_declarator_list , init_declarator
Line 99: init_declarator_list_opt => init_declarator_list
Line 99: declaration => declaration_specifiers init_declarator_list_opt ;
Line 99: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 99: postfix_expression => primary_expression
Line 99: unary_expression => postfix_expression
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => relational_expression
Line 99: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 99: postfix_expression => primary_expression
Line 99: unary_expression => postfix_expression
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => equality_expression != relational_expression
Line 99: AND_expression => equality_expression
Line 99: exclusive_OR_expression => AND_expression
Line 99: inclusive_OR_expression => exclusive_OR_expression
Line 99: logical_AND_expression => inclusive_OR_expression
Line 99: logical_OR_expression => logical_AND_expression
Line 99: conditional_expression => logical_OR_expression
Line 99: assignment_expression => conditional_expression
Line 99: expression => assignment_expression
Line 99: expression_opt => expression
Line 99: primary_expression => IDENTIFIER
				IDENTIFIER = `i`
Line 99: postfix_expression => primary_expression
Line 99: postfix_expression => postfix_expression ++
Line 99: unary_expression => postfix_expression
Line 99: cast_expression => unary_expression
Line 99: multiplicative_expression => cast_expression
Line 99: additive_expression => multiplicative_expression
Line 99: shift_expression => additive_expression
Line 99: relational_expression => shift_expression
Line 99: equality_expression => relational_expression
Line 99: AND_expression => equality_expression
Line 99: exclusive_OR_expression => AND_expression
Line 99: inclusive_OR_expression => exclusive_OR_expression
Line 99: logical_AND_expression => inclusive_OR_expression
Line 99: logical_OR_expression => logical_AND_expression
Line 99: conditional_expression => logical_OR_expression
Line 99: assignment_expression => conditional_expression
Line 99: expression => assignment_expression
Line 99: expression_opt => expression


Line 101: primary_expression => IDENTIFIER
				IDENTIFIER = `j`
Line 101: postfix_expression => primary_expression
Line 101: unary_expression => postfix_expression
Line 101: cast_expression => unary_expression
Line 101: multiplicative_expression => cast_expression
Line 101: additive_expression => multiplicative_expression
Line 101: shift_expression => additive_expression
Line 101: relational_expression => shift_expression
Line 101: equality_expression => relational_expression
Line 101: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 101: postfix_expression => primary_expression
Line 101: unary_expression => postfix_expression
Line 101: cast_expression => unary_expression
Line 101: multiplicative_expression => cast_expression
Line 101: additive_expression => multiplicative_expression
Line 101: shift_expression => additive_expression
Line 101: relational_expression => shift_expression
Line 101: equality_expression => equality_expression == relational_expression
Line 101: AND_expression => equality_expression
Line 101: exclusive_OR_expression => AND_expression
Line 101: inclusive_OR_expression => exclusive_OR_expression
Line 101: logical_AND_expression => inclusive_OR_expression
Line 101: logical_OR_expression => logical_AND_expression
Line 101: conditional_expression => logical_OR_expression
Line 101: assignment_expression => conditional_expression
Line 101: expression => assignment_expression

Line 102: jump_statement => continue ;
Line 102: statement => jump_statement

Line 103: selection_statement => if ( expression ) statement
Line 103: statement => selection_statement
Line 103: block_item => statement
Line 103: block_item_list => block_item
Line 103: block_item_list_opt => block_item_list
Line 103: compound_statement => { block_item_list_opt }
Line 103: statement => compound_statement
Line 103: iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
Line 103: statement => iteration_statement
Line 103: iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
Line 103: statement => iteration_statement
Line 103: iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
Line 103: statement => iteration_statement
Line 103: block_item => statement
Line 103: block_item_list => block_item_list block_item




Line 107: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 107: postfix_expression => primary_expression
Line 107: postfix_expression => postfix_expression ++
Line 107: unary_expression => postfix_expression
Line 107: cast_expression => unary_expression
Line 107: multiplicative_expression => cast_expression
Line 107: additive_expression => multiplicative_expression
Line 107: shift_expression => additive_expression
Line 107: relational_expression => shift_expression
Line 107: equality_expression => relational_expression
Line 107: AND_expression => equality_expression
Line 107: exclusive_OR_expression => AND_expression
Line 107: inclusive_OR_expression => exclusive_OR_expression
Line 107: logical_AND_expression => inclusive_OR_expression
Line 107: logical_OR_expression => logical_AND_expression
Line 107: conditional_expression => logical_OR_expression
Line 107: assignment_expression => conditional_expression
Line 107: expression => assignment_expression
Line 107: expression_opt => expression
Line 107: expression_statement => expression_opt ;
Line 107: statement => expression_statement
Line 107: block_item => statement
Line 107: block_item_list => block_item

Line 108: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 108: postfix_expression => primary_expression
Line 108: unary_expression => postfix_expression
Line 108: unary_expression => ++ unary_expression
Line 108: cast_expression => unary_expression
Line 108: multiplicative_expression => cast_expression
Line 108: additive_expression => multiplicative_expression
Line 108: shift_expression => additive_expression
Line 108: relational_expression => shift_expression
Line 108: equality_expression => relational_expression
Line 108: AND_expression => equality_expression
Line 108: exclusive_OR_expression => AND_expression
Line 108: inclusive_OR_expression => exclusive_OR_expression
Line 108: logical_AND_expression => inclusive_OR_expression
Line 108: logical_OR_expression => logical_AND_expression
Line 108: conditional_expression => logical_OR_expression
Line 108: assignment_expression => conditional_expression
Line 108: expression => assignment_expression
Line 108: expression_opt => expression
Line 108: expression_statement => expression_opt ;
Line 108: statement => expression_statement
Line 108: block_item => statement
Line 108: block_item_list => block_item_list block_item


Line 110: block_item_list_opt => block_item_list
Line 110: compound_statement => { block_item_list_opt }
Line 110: statement => compound_statement
Line 110: unary_operator => !
Line 110: primary_expression => IDENTIFIER
				IDENTIFIER = `n0`
Line 110: postfix_expression => primary_expression
Line 110: unary_expression => postfix_expression
Line 110: cast_expression => unary_expression
Line 110: multiplicative_expression => cast_expression
Line 110: additive_expression => multiplicative_expression
Line 110: shift_expression => additive_expression
Line 110: relational_expression => shift_expression
Line 110: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 110: postfix_expression => primary_expression
Line 110: unary_expression => postfix_expression
Line 110: cast_expression => unary_expression
Line 110: multiplicative_expression => cast_expression
Line 110: additive_expression => multiplicative_expression
Line 110: shift_expression => additive_expression
Line 110: relational_expression => relational_expression >= shift_expression
Line 110: equality_expression => relational_expression
Line 110: AND_expression => equality_expression
Line 110: exclusive_OR_expression => AND_expression
Line 110: inclusive_OR_expression => exclusive_OR_expression
Line 110: logical_AND_expression => inclusive_OR_expression
Line 110: logical_OR_expression => logical_AND_expression
Line 110: conditional_expression => logical_OR_expression
Line 110: assignment_expression => conditional_expression
Line 110: expression => assignment_expression
Line 110: primary_expression => ( expression )
Line 110: postfix_expression => primary_expression
Line 110: unary_expression => postfix_expression
Line 110: cast_expression => unary_expression
Line 110: unary_expression => unary_operator cast_expression
Line 110: cast_expression => unary_expression
Line 110: multiplicative_expression => cast_expression
Line 110: additive_expression => multiplicative_expression
Line 110: shift_expression => additive_expression
Line 110: relational_expression => shift_expression
Line 110: equality_expression => relational_expression
Line 110: AND_expression => equality_expression
Line 110: exclusive_OR_expression => AND_expression
Line 110: inclusive_OR_expression => exclusive_OR_expression
Line 110: logical_AND_expression => inclusive_OR_expression
Line 110: logical_OR_expression => logical_AND_expression
Line 110: conditional_expression => logical_OR_expression
Line 110: assignment_expression => conditional_expression
Line 110: expression => assignment_expression
Line 110: iteration_statement => do statement while ( expression ) ;
Line 110: statement => iteration_statement
Line 110: block_item => statement
Line 110: block_item_list => block_item_list block_item


Line 112: type_specifier => int
Line 112: declaration_specifiers_opt => epsilon 
Line 112: declaration_specifiers => type_specifier declaration_specifiers_opt
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var1`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var2`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator_list , init_declarator
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var3`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator_list , init_declarator
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var4`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator_list , init_declarator
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var5`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator_list , init_declarator
Line 112: pointer_opt => epsilon
Line 112: direct_declarator => IDENTIFIER
				IDENTIFIER = `var6`
Line 112: declarator => pointer_opt direct_declarator
Line 112: init_declarator => declarator
Line 112: init_declarator_list => init_declarator_list , init_declarator
Line 112: init_declarator_list_opt => init_declarator_list
Line 112: declaration => declaration_specifiers init_declarator_list_opt ;
Line 112: block_item => declaration
Line 112: block_item_list => block_item_list block_item


Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: assignment_operator => =
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => cast_expression
Line 114: additive_expression => multiplicative_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => cast_expression
Line 114: additive_expression => additive_expression - multiplicative_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var3`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => cast_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => multiplicative_expression / cast_expression
Line 114: additive_expression => additive_expression + multiplicative_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var4`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => cast_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var5`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => multiplicative_expression * cast_expression
Line 114: primary_expression => IDENTIFIER
				IDENTIFIER = `var6`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => multiplicative_expression / cast_expression
Line 114: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `23`
Line 114: postfix_expression => primary_expression
Line 114: unary_expression => postfix_expression
Line 114: cast_expression => unary_expression
Line 114: multiplicative_expression => multiplicative_expression % cast_expression
Line 114: additive_expression => additive_expression - multiplicative_expression
Line 114: shift_expression => additive_expression
Line 114: relational_expression => shift_expression
Line 114: equality_expression => relational_expression
Line 114: AND_expression => equality_expression
Line 114: exclusive_OR_expression => AND_expression
Line 114: inclusive_OR_expression => exclusive_OR_expression
Line 114: logical_AND_expression => inclusive_OR_expression
Line 114: logical_OR_expression => logical_AND_expression
Line 114: conditional_expression => logical_OR_expression
Line 114: assignment_expression => conditional_expression
Line 114: assignment_expression => unary_expression assignment_operator assignment_expression
Line 114: expression => assignment_expression
Line 114: expression_opt => expression
Line 114: expression_statement => expression_opt ;
Line 114: statement => expression_statement
Line 114: block_item => statement
Line 114: block_item_list => block_item_list block_item

Line 115: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 115: postfix_expression => primary_expression
Line 115: unary_expression => postfix_expression
Line 115: assignment_operator => =
Line 115: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 115: postfix_expression => primary_expression
Line 115: unary_expression => postfix_expression
Line 115: cast_expression => unary_expression
Line 115: multiplicative_expression => cast_expression
Line 115: additive_expression => multiplicative_expression
Line 115: shift_expression => additive_expression
Line 115: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `6`
Line 115: postfix_expression => primary_expression
Line 115: unary_expression => postfix_expression
Line 115: cast_expression => unary_expression
Line 115: multiplicative_expression => cast_expression
Line 115: additive_expression => multiplicative_expression
Line 115: shift_expression => shift_expression << additive_expression
Line 115: relational_expression => shift_expression
Line 115: equality_expression => relational_expression
Line 115: AND_expression => equality_expression
Line 115: exclusive_OR_expression => AND_expression
Line 115: inclusive_OR_expression => exclusive_OR_expression
Line 115: logical_AND_expression => inclusive_OR_expression
Line 115: logical_OR_expression => logical_AND_expression
Line 115: conditional_expression => logical_OR_expression
Line 115: assignment_expression => conditional_expression
Line 115: assignment_expression => unary_expression assignment_operator assignment_expression
Line 115: expression => assignment_expression
Line 115: expression_opt => expression
Line 115: expression_statement => expression_opt ;
Line 115: statement => expression_statement
Line 115: block_item => statement
Line 115: block_item_list => block_item_list block_item

Line 116: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 116: postfix_expression => primary_expression
Line 116: unary_expression => postfix_expression
Line 116: assignment_operator => =
Line 116: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 116: postfix_expression => primary_expression
Line 116: unary_expression => postfix_expression
Line 116: cast_expression => unary_expression
Line 116: multiplicative_expression => cast_expression
Line 116: additive_expression => multiplicative_expression
Line 116: shift_expression => additive_expression
Line 116: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `8`
Line 116: postfix_expression => primary_expression
Line 116: unary_expression => postfix_expression
Line 116: cast_expression => unary_expression
Line 116: multiplicative_expression => cast_expression
Line 116: additive_expression => multiplicative_expression
Line 116: shift_expression => shift_expression >> additive_expression
Line 116: relational_expression => shift_expression
Line 116: equality_expression => relational_expression
Line 116: AND_expression => equality_expression
Line 116: exclusive_OR_expression => AND_expression
Line 116: inclusive_OR_expression => exclusive_OR_expression
Line 116: logical_AND_expression => inclusive_OR_expression
Line 116: logical_OR_expression => logical_AND_expression
Line 116: conditional_expression => logical_OR_expression
Line 116: assignment_expression => conditional_expression
Line 116: assignment_expression => unary_expression assignment_operator assignment_expression
Line 116: expression => assignment_expression
Line 116: expression_opt => expression
Line 116: expression_statement => expression_opt ;
Line 116: statement => expression_statement
Line 116: block_item => statement
Line 116: block_item_list => block_item_list block_item

Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: assignment_operator => =
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var2`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => equality_expression
Line 117: exclusive_OR_expression => AND_expression
Line 117: inclusive_OR_expression => exclusive_OR_expression
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var3`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => equality_expression
Line 117: exclusive_OR_expression => AND_expression
Line 117: inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var4`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => equality_expression
Line 117: exclusive_OR_expression => AND_expression
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var5`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => equality_expression
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var6`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => AND_expression & equality_expression
Line 117: exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
Line 117: primary_expression => IDENTIFIER
				IDENTIFIER = `var1`
Line 117: postfix_expression => primary_expression
Line 117: unary_expression => postfix_expression
Line 117: cast_expression => unary_expression
Line 117: multiplicative_expression => cast_expression
Line 117: additive_expression => multiplicative_expression
Line 117: shift_expression => additive_expression
Line 117: relational_expression => shift_expression
Line 117: equality_expression => relational_expression
Line 117: AND_expression => equality_expression
Line 117: exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
Line 117: inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
Line 117: logical_AND_expression => inclusive_OR_expression
Line 117: logical_OR_expression => logical_AND_expression
Line 117: conditional_expression => logical_OR_expression
Line 117: assignment_expression => conditional_expression
Line 117: assignment_expression => unary_expression assignment_operator assignment_expression
Line 117: expression => assignment_expression
Line 117: expression_opt => expression
Line 117: expression_statement => expression_opt ;
Line 117: statement => expression_statement
Line 117: block_item => statement
Line 117: block_item_list => block_item_list block_item


Line 119: primary_expression => IDENTIFIER
				IDENTIFIER = `function1`
Line 119: postfix_expression => primary_expression
Line 119: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `1`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: argument_expression_list => assignment_expression
Line 119: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `2`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: argument_expression_list => argument_expression_list , assignment_expression
Line 119: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: argument_expression_list => argument_expression_list , assignment_expression
Line 119: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 119: postfix_expression => primary_expression
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: argument_expression_list => argument_expression_list , assignment_expression
Line 119: argument_expression_list_opt => argument_expression_list
Line 119: postfix_expression => postfix_expression ( argument_expression_list_opt )
Line 119: unary_expression => postfix_expression
Line 119: cast_expression => unary_expression
Line 119: multiplicative_expression => cast_expression
Line 119: additive_expression => multiplicative_expression
Line 119: shift_expression => additive_expression
Line 119: relational_expression => shift_expression
Line 119: equality_expression => relational_expression
Line 119: AND_expression => equality_expression
Line 119: exclusive_OR_expression => AND_expression
Line 119: inclusive_OR_expression => exclusive_OR_expression
Line 119: logical_AND_expression => inclusive_OR_expression
Line 119: logical_OR_expression => logical_AND_expression
Line 119: conditional_expression => logical_OR_expression
Line 119: assignment_expression => conditional_expression
Line 119: expression => assignment_expression
Line 119: expression_opt => expression
Line 119: expression_statement => expression_opt ;
Line 119: statement => expression_statement
Line 119: block_item => statement
Line 119: block_item_list => block_item_list block_item



Line 122: primary_expression => IDENTIFIER
				IDENTIFIER = `ms1`
Line 122: postfix_expression => primary_expression
Line 122: postfix_expression => postfix_expression . IDENTIFIER
				IDENTIFIER = `a`
Line 122: unary_expression => postfix_expression
Line 122: assignment_operator => =
Line 122: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `3`
Line 122: postfix_expression => primary_expression
Line 122: unary_expression => postfix_expression
Line 122: cast_expression => unary_expression
Line 122: multiplicative_expression => cast_expression
Line 122: additive_expression => multiplicative_expression
Line 122: shift_expression => additive_expression
Line 122: relational_expression => shift_expression
Line 122: equality_expression => relational_expression
Line 122: AND_expression => equality_expression
Line 122: exclusive_OR_expression => AND_expression
Line 122: inclusive_OR_expression => exclusive_OR_expression
Line 122: logical_AND_expression => inclusive_OR_expression
Line 122: logical_OR_expression => logical_AND_expression
Line 122: conditional_expression => logical_OR_expression
Line 122: assignment_expression => conditional_expression
Line 122: assignment_expression => unary_expression assignment_operator assignment_expression
Line 122: expression => assignment_expression
Line 122: expression_opt => expression
Line 122: expression_statement => expression_opt ;
Line 122: statement => expression_statement
Line 122: block_item => statement
Line 122: block_item_list => block_item_list block_item

Line 123: primary_expression => IDENTIFIER
				IDENTIFIER = `ms2`
Line 123: postfix_expression => primary_expression
Line 123: postfix_expression => postfix_expression -> IDENTIFIER
				IDENTIFIER = `a`
Line 123: unary_expression => postfix_expression
Line 123: assignment_operator => =
Line 123: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `4`
Line 123: postfix_expression => primary_expression
Line 123: unary_expression => postfix_expression
Line 123: cast_expression => unary_expression
Line 123: multiplicative_expression => cast_expression
Line 123: additive_expression => multiplicative_expression
Line 123: shift_expression => additive_expression
Line 123: relational_expression => shift_expression
Line 123: equality_expression => relational_expression
Line 123: AND_expression => equality_expression
Line 123: exclusive_OR_expression => AND_expression
Line 123: inclusive_OR_expression => exclusive_OR_expression
Line 123: logical_AND_expression => inclusive_OR_expression
Line 123: logical_OR_expression => logical_AND_expression
Line 123: conditional_expression => logical_OR_expression
Line 123: assignment_expression => conditional_expression
Line 123: assignment_expression => unary_expression assignment_operator assignment_expression
Line 123: expression => assignment_expression
Line 123: expression_opt => expression
Line 123: expression_statement => expression_opt ;
Line 123: statement => expression_statement
Line 123: block_item => statement
Line 123: block_item_list => block_item_list block_item


Line 125: primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = `0`
Line 125: postfix_expression => primary_expression
Line 125: unary_expression => postfix_expression
Line 125: cast_expression => unary_expression
Line 125: multiplicative_expression => cast_expression
Line 125: additive_expression => multiplicative_expression
Line 125: shift_expression => additive_expression
Line 125: relational_expression => shift_expression
Line 125: equality_expression => relational_expression
Line 125: AND_expression => equality_expression
Line 125: exclusive_OR_expression => AND_expression
Line 125: inclusive_OR_expression => exclusive_OR_expression
Line 125: logical_AND_expression => inclusive_OR_expression
Line 125: logical_OR_expression => logical_AND_expression
Line 125: conditional_expression => logical_OR_expression
Line 125: assignment_expression => conditional_expression
Line 125: expression => assignment_expression
Line 125: expression_opt => expression
Line 125: jump_statement => return expression_opt ;
Line 125: statement => jump_statement
Line 125: block_item => statement
Line 125: block_item_list => block_item_list block_item

Line 126: block_item_list_opt => block_item_list
Line 126: compound_statement => { block_item_list_opt }
Line 126: function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
Line 126: external_declaration => function_definition
Line 126: translation_unit => translation_unit external_declaration

